let g:php_builtin_object_functions = {
\ 'AMQPChannel::commitTransaction(': 'void | void',
\ 'AMQPChannel::__construct(': 'AMQPConnection $amqp_connection',
\ 'AMQPChannel::isConnected(': 'void | void',
\ 'AMQPChannel::qos(': 'int $size, int $count | void',
\ 'AMQPChannel::rollbackTransaction(': 'void | void',
\ 'AMQPChannel::setPrefetchCount(': 'int $count | void',
\ 'AMQPChannel::setPrefetchSize(': 'int $size | void',
\ 'AMQPChannel::startTransaction(': 'void | void',
\ 'AMQPConnection::connect(': 'void | bool',
\ 'AMQPConnection::__construct(': '[ array $credentials = array()]',
\ 'AMQPConnection::disconnect(': 'void | bool',
\ 'AMQPConnection::getHost(': 'void | string',
\ 'AMQPConnection::getLogin(': 'void | string',
\ 'AMQPConnection::getPassword(': 'void | string',
\ 'AMQPConnection::getPort(': 'void | int',
\ 'AMQPConnection::getTimeout(': 'void | int',
\ 'AMQPConnection::getVhost(': 'void | string',
\ 'AMQPConnection::isConnected(': 'void | bool',
\ 'AMQPConnection::reconnect(': 'void | bool',
\ 'AMQPConnection::setHost(': 'string $host | bool',
\ 'AMQPConnection::setLogin(': 'string $login | bool',
\ 'AMQPConnection::setPassword(': 'string $password | bool',
\ 'AMQPConnection::setPort(': 'int $port | bool',
\ 'AMQPConnection::setTimeout(': 'float $timeout | bool',
\ 'AMQPConnection::setVhost(': 'string $vhost | bool',
\ 'AMQPEnvelope::getAppId(': 'void | string',
\ 'AMQPEnvelope::getBody(': 'void | string',
\ 'AMQPEnvelope::getContentEncoding(': 'void | string',
\ 'AMQPEnvelope::getContentType(': 'void | string',
\ 'AMQPEnvelope::getCorrelationId(': 'void | string',
\ 'AMQPEnvelope::getDeliveryTag(': 'void | string',
\ 'AMQPEnvelope::getExchange(': 'void | string',
\ 'AMQPEnvelope::getExpiration(': 'void | string',
\ 'AMQPEnvelope::getHeader(': 'string $header_key | string',
\ 'AMQPEnvelope::getHeaders(': 'void | array',
\ 'AMQPEnvelope::getMessageId(': 'void | string',
\ 'AMQPEnvelope::getPriority(': 'void | string',
\ 'AMQPEnvelope::getReplyTo(': 'void | string',
\ 'AMQPEnvelope::getRoutingKey(': 'void | string',
\ 'AMQPEnvelope::getTimeStamp(': 'void | string',
\ 'AMQPEnvelope::getType(': 'void | string',
\ 'AMQPEnvelope::getUserId(': 'void | string',
\ 'AMQPEnvelope::isRedelivery(': 'void | bool',
\ 'AMQPExchange::bind(': 'string $destination_exchange_name, string $source_exchange_name, string $routing_key | bool',
\ 'AMQPExchange::__construct(': 'AMQPChannel $amqp_channel',
\ 'AMQPExchange::declare(': 'void | int',
\ 'AMQPExchange::delete(': '[ int $flags = AMQP_NOPARAM] | bool',
\ 'AMQPExchange::getArgument(': 'string $key | mixed',
\ 'AMQPExchange::getArguments(': 'void | array',
\ 'AMQPExchange::getFlags(': 'void | int',
\ 'AMQPExchange::getName(': 'void | string',
\ 'AMQPExchange::getType(': 'void | string',
\ 'AMQPExchange::publish(': 'string $message, string $routing_key [, int $flags = AMQP_NOPARAM [, array $attributes = array()]] | bool',
\ 'AMQPExchange::setArgument(': 'string $key, mixed $value | void',
\ 'AMQPExchange::setArguments(': 'array $arguments | void',
\ 'AMQPExchange::setFlags(': 'int $flags | void',
\ 'AMQPExchange::setName(': 'string $exchange_name | void',
\ 'AMQPExchange::setType(': 'string $exchange_type | string',
\ 'AMQPQueue::ack(': 'int $delivery_tag [, int $flags = AMQP_NOPARAM] | bool',
\ 'AMQPQueue::bind(': 'string $exchange_name, string $routing_key | bool',
\ 'AMQPQueue::cancel(': '[ string $consumer_tag = ""] | bool',
\ 'AMQPQueue::__construct(': 'AMQPChannel $amqp_channel',
\ 'AMQPQueue::consume(': 'callable $callback [, int $flags = AMQP_NOPARAM] | void',
\ 'AMQPQueue::declare(': 'void | int',
\ 'AMQPQueue::delete(': 'void | bool',
\ 'AMQPQueue::get(': '[ int $flags] | mixed',
\ 'AMQPQueue::getArgument(': 'string $key | mixed',
\ 'AMQPQueue::getArguments(': 'void | array',
\ 'AMQPQueue::getFlags(': 'void | int',
\ 'AMQPQueue::getName(': 'void | string',
\ 'AMQPQueue::nack(': 'string $delivery_tag [, string $flags = AMQP_NOPARAM] | void',
\ 'AMQPQueue::purge(': 'void | bool',
\ 'AMQPQueue::setArgument(': 'string $key, mixed $value | void',
\ 'AMQPQueue::setArguments(': 'array $arguments | void',
\ 'AMQPQueue::setFlags(': 'int $flags | void',
\ 'AMQPQueue::setName(': 'string $queue_name | void',
\ 'AMQPQueue::unbind(': 'string $exchange_name, string $routing_key | bool',
\ 'APCIterator::__construct(': 'string $cache [, mixed $search = null [, int $format [, int $chunk_size = 100 [, int $list]]]]',
\ 'APCIterator::current(': 'void | mixed',
\ 'APCIterator::getTotalCount(': 'void | int',
\ 'APCIterator::getTotalHits(': 'void | int',
\ 'APCIterator::getTotalSize(': 'void | int',
\ 'APCIterator::key(': 'void | string',
\ 'APCIterator::next(': 'void | void',
\ 'APCIterator::rewind(': 'void | void',
\ 'APCIterator::valid(': 'void | void',
\ 'AppendIterator::__construct(': 'void',
\ 'AppendIterator::append(': 'Iterator $iterator | void',
\ 'AppendIterator::current(': 'void | mixed',
\ 'AppendIterator::getArrayIterator(': 'void | void',
\ 'AppendIterator::getInnerIterator(': 'void | Iterator',
\ 'AppendIterator::getIteratorIndex(': 'void | int',
\ 'AppendIterator::key(': 'void | scalar',
\ 'AppendIterator::next(': 'void | void',
\ 'AppendIterator::rewind(': 'void | void',
\ 'AppendIterator::valid(': 'void | bool',
\ 'ArrayAccess::offsetExists(': 'mixed $offset | boolean',
\ 'ArrayAccess::offsetGet(': 'mixed $offset | mixed',
\ 'ArrayAccess::offsetSet(': 'mixed $offset, mixed $value | void',
\ 'ArrayAccess::offsetUnset(': 'mixed $offset | void',
\ 'ArrayIterator::append(': 'mixed $value | void',
\ 'ArrayIterator::asort(': 'void | void',
\ 'ArrayIterator::__construct(': '[ mixed $array = array() [, int $flags = 0]]',
\ 'ArrayIterator::count(': 'void | int',
\ 'ArrayIterator::current(': 'void | mixed',
\ 'ArrayIterator::getArrayCopy(': 'void | array',
\ 'ArrayIterator::getFlags(': 'void | void',
\ 'ArrayIterator::key(': 'void | mixed',
\ 'ArrayIterator::ksort(': 'void | void',
\ 'ArrayIterator::natcasesort(': 'void | void',
\ 'ArrayIterator::natsort(': 'void | void',
\ 'ArrayIterator::next(': 'void | void',
\ 'ArrayIterator::offsetExists(': 'string $index | void',
\ 'ArrayIterator::offsetGet(': 'string $index | mixed',
\ 'ArrayIterator::offsetSet(': 'string $index, string $newval | void',
\ 'ArrayIterator::offsetUnset(': 'string $index | void',
\ 'ArrayIterator::rewind(': 'void | void',
\ 'ArrayIterator::seek(': 'int $position | void',
\ 'ArrayIterator::serialize(': 'void | string',
\ 'ArrayIterator::setFlags(': 'string $flags | void',
\ 'ArrayIterator::uasort(': 'string $cmp_function | void',
\ 'ArrayIterator::uksort(': 'string $cmp_function | void',
\ 'ArrayIterator::unserialize(': 'string $serialized | string',
\ 'ArrayIterator::valid(': 'void | bool',
\ 'ArrayObject::__construct(': '[ mixed $input [, int $flags = 0 [, string $iterator_class = "ArrayIterator"]]]',
\ 'ArrayObject::append(': 'mixed $value | void',
\ 'ArrayObject::asort(': 'void | void',
\ 'ArrayObject::count(': 'void | int',
\ 'ArrayObject::exchangeArray(': 'mixed $input | array',
\ 'ArrayObject::getArrayCopy(': 'void | array',
\ 'ArrayObject::getFlags(': 'void | int',
\ 'ArrayObject::getIterator(': 'void | ArrayIterator',
\ 'ArrayObject::getIteratorClass(': 'void | string',
\ 'ArrayObject::ksort(': 'void | void',
\ 'ArrayObject::natcasesort(': 'void | void',
\ 'ArrayObject::natsort(': 'void | void',
\ 'ArrayObject::offsetExists(': 'mixed $index | bool',
\ 'ArrayObject::offsetGet(': 'mixed $index | mixed',
\ 'ArrayObject::offsetSet(': 'mixed $index, mixed $newval | void',
\ 'ArrayObject::offsetUnset(': 'mixed $index | void',
\ 'ArrayObject::serialize(': 'void | void',
\ 'ArrayObject::setFlags(': 'int $flags | void',
\ 'ArrayObject::setIteratorClass(': 'string $iterator_class | void',
\ 'ArrayObject::uasort(': 'callable $cmp_function | void',
\ 'ArrayObject::uksort(': 'callable $cmp_function | void',
\ 'ArrayObject::unserialize(': 'string $serialized | void',
\ 'BadFunctionCallException::getMessage(': 'void | string',
\ 'BadFunctionCallException::getPrevious(': 'void | Exception',
\ 'BadFunctionCallException::getCode(': 'void | mixed',
\ 'BadFunctionCallException::getFile(': 'void | string',
\ 'BadFunctionCallException::getLine(': 'void | int',
\ 'BadFunctionCallException::getTrace(': 'void | array',
\ 'BadFunctionCallException::getTraceAsString(': 'void | string',
\ 'BadFunctionCallException::__toString(': 'void | string',
\ 'BadFunctionCallException::__clone(': 'void | void',
\ 'BadMethodCallException::getMessage(': 'void | string',
\ 'BadMethodCallException::getPrevious(': 'void | Exception',
\ 'BadMethodCallException::getCode(': 'void | mixed',
\ 'BadMethodCallException::getFile(': 'void | string',
\ 'BadMethodCallException::getLine(': 'void | int',
\ 'BadMethodCallException::getTrace(': 'void | array',
\ 'BadMethodCallException::getTraceAsString(': 'void | string',
\ 'BadMethodCallException::__toString(': 'void | string',
\ 'BadMethodCallException::__clone(': 'void | void',
\ 'CachingIterator::__construct(': 'Iterator $iterator [, string $flags = self::CALL_TOSTRING]',
\ 'CachingIterator::count(': 'void | int',
\ 'CachingIterator::current(': 'void | void',
\ 'CachingIterator::getCache(': 'void | void',
\ 'CachingIterator::getFlags(': 'void | void',
\ 'CachingIterator::getInnerIterator(': 'void | Iterator',
\ 'CachingIterator::hasNext(': 'void | void',
\ 'CachingIterator::key(': 'void | scalar',
\ 'CachingIterator::next(': 'void | void',
\ 'CachingIterator::offsetExists(': 'string $index | void',
\ 'CachingIterator::offsetGet(': 'string $index | void',
\ 'CachingIterator::offsetSet(': 'string $index, string $newval | void',
\ 'CachingIterator::offsetUnset(': 'string $index | void',
\ 'CachingIterator::rewind(': 'void | void',
\ 'CachingIterator::setFlags(': 'bitmask $flags | void',
\ 'CachingIterator::__toString(': 'void | void',
\ 'CachingIterator::valid(': 'void | void',
\ 'Cairo::availableFonts(': 'void | array',
\ 'Cairo::availableSurfaces(': 'void | array',
\ 'Cairo::statusToString(': 'int $status | string',
\ 'Cairo::version(': 'void | int',
\ 'Cairo::versionString(': 'void | string',
\ 'CairoContext::appendPath(': 'CairoPath $path | void',
\ 'CairoContext::arc(': 'float $x, float $y, float $radius, float $angle1, float $angle2 | void',
\ 'CairoContext::arcNegative(': 'float $x, float $y, float $radius, float $angle1, float $angle2 | void',
\ 'CairoContext::clip(': 'void | void',
\ 'CairoContext::clipExtents(': 'void | array',
\ 'CairoContext::clipPreserve(': 'void | void',
\ 'CairoContext::clipRectangleList(': 'void | array',
\ 'CairoContext::closePath(': 'void | void',
\ 'CairoContext::__construct(': 'CairoSurface $surface',
\ 'CairoContext::copyPage(': 'void | void',
\ 'CairoContext::copyPath(': 'void | CairoPath',
\ 'CairoContext::copyPathFlat(': 'void | CairoPath',
\ 'CairoContext::curveTo(': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void',
\ 'CairoContext::deviceToUser(': 'float $x, float $y | array',
\ 'CairoContext::deviceToUserDistance(': 'float $x, float $y | array',
\ 'CairoContext::fill(': 'void | void',
\ 'CairoContext::fillExtents(': 'void | array',
\ 'CairoContext::fillPreserve(': 'void | void',
\ 'CairoContext::fontExtents(': 'void | array',
\ 'CairoContext::getAntialias(': 'void | int',
\ 'CairoContext::getCurrentPoint(': 'void | array',
\ 'CairoContext::getDash(': 'void | array',
\ 'CairoContext::getDashCount(': 'void | int',
\ 'CairoContext::getFillRule(': 'void | int',
\ 'CairoContext::getFontFace(': 'void | void',
\ 'CairoContext::getFontMatrix(': 'void | void',
\ 'CairoContext::getFontOptions(': 'void | void',
\ 'CairoContext::getGroupTarget(': 'void | void',
\ 'CairoContext::getLineCap(': 'void | int',
\ 'CairoContext::getLineJoin(': 'void | int',
\ 'CairoContext::getLineWidth(': 'void | float',
\ 'CairoContext::getMatrix(': 'void | void',
\ 'CairoContext::getMiterLimit(': 'void | float',
\ 'CairoContext::getOperator(': 'void | int',
\ 'CairoContext::getScaledFont(': 'void | void',
\ 'CairoContext::getSource(': 'void | void',
\ 'CairoContext::getTarget(': 'void | void',
\ 'CairoContext::getTolerance(': 'void | float',
\ 'CairoContext::glyphPath(': 'array $glyphs | void',
\ 'CairoContext::hasCurrentPoint(': 'void | bool',
\ 'CairoContext::identityMatrix(': 'void | void',
\ 'CairoContext::inFill(': 'string $x, string $y | bool',
\ 'CairoContext::inStroke(': 'string $x, string $y | bool',
\ 'CairoContext::lineTo(': 'string $x, string $y | void',
\ 'CairoContext::mask(': 'string $pattern | void',
\ 'CairoContext::maskSurface(': 'string $surface [, string $x [, string $y]] | void',
\ 'CairoContext::moveTo(': 'string $x, string $y | void',
\ 'CairoContext::newPath(': 'void | void',
\ 'CairoContext::newSubPath(': 'void | void',
\ 'CairoContext::paint(': 'void | void',
\ 'CairoContext::paintWithAlpha(': 'string $alpha | void',
\ 'CairoContext::pathExtents(': 'void | array',
\ 'CairoContext::popGroup(': 'void | void',
\ 'CairoContext::popGroupToSource(': 'void | void',
\ 'CairoContext::pushGroup(': 'void | void',
\ 'CairoContext::pushGroupWithContent(': 'string $content | void',
\ 'CairoContext::rectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoContext::relCurveTo(': 'string $x1, string $y1, string $x2, string $y2, string $x3, string $y3 | void',
\ 'CairoContext::relLineTo(': 'string $x, string $y | void',
\ 'CairoContext::relMoveTo(': 'string $x, string $y | void',
\ 'CairoContext::resetClip(': 'void | void',
\ 'CairoContext::restore(': 'void | void',
\ 'CairoContext::rotate(': 'string $angle | void',
\ 'CairoContext::save(': 'void | void',
\ 'CairoContext::scale(': 'string $x, string $y | void',
\ 'CairoContext::selectFontFace(': 'string $family [, string $slant [, string $weight]] | void',
\ 'CairoContext::setAntialias(': '[ string $antialias] | void',
\ 'CairoContext::setDash(': 'string $dashes [, string $offset] | void',
\ 'CairoContext::setFillRule(': 'string $setting | void',
\ 'CairoContext::setFontFace(': 'CairoFontFace $fontface | void',
\ 'CairoContext::setFontMatrix(': 'string $matrix | void',
\ 'CairoContext::setFontOptions(': 'string $fontoptions | void',
\ 'CairoContext::setFontSize(': 'string $size | void',
\ 'CairoContext::setLineCap(': 'string $setting | void',
\ 'CairoContext::setLineJoin(': 'string $setting | void',
\ 'CairoContext::setLineWidth(': 'string $width | void',
\ 'CairoContext::setMatrix(': 'string $matrix | void',
\ 'CairoContext::setMiterLimit(': 'string $limit | void',
\ 'CairoContext::setOperator(': 'string $setting | void',
\ 'CairoContext::setScaledFont(': 'string $scaledfont | void',
\ 'CairoContext::setSource(': 'string $pattern | void',
\ 'CairoContext::setSourceRGB(': 'string $red, string $green, string $blue | void',
\ 'CairoContext::setSourceRGBA(': 'string $red, string $green, string $blue, string $alpha | void',
\ 'CairoContext::setSourceSurface(': 'string $surface [, string $x [, string $y]] | void',
\ 'CairoContext::setTolerance(': 'string $tolerance | void',
\ 'CairoContext::showPage(': 'void | void',
\ 'CairoContext::showText(': 'string $text | void',
\ 'CairoContext::status(': 'void | int',
\ 'CairoContext::stroke(': 'void | void',
\ 'CairoContext::strokeExtents(': 'void | array',
\ 'CairoContext::strokePreserve(': 'void | void',
\ 'CairoContext::textExtents(': 'string $text | array',
\ 'CairoContext::textPath(': 'string $string | void',
\ 'CairoContext::transform(': 'string $matrix | void',
\ 'CairoContext::translate(': 'string $x, string $y | void',
\ 'CairoContext::userToDevice(': 'string $x, string $y | array',
\ 'CairoContext::userToDeviceDistance(': 'string $x, string $y | array',
\ 'CairoFontFace::__construct(': 'void',
\ 'CairoFontFace::getType(': 'void | int',
\ 'CairoFontFace::status(': 'void | int',
\ 'CairoFontOptions::__construct(': 'void',
\ 'CairoFontOptions::equal(': 'string $other | bool',
\ 'CairoFontOptions::getAntialias(': 'void | int',
\ 'CairoFontOptions::getHintMetrics(': 'void | int',
\ 'CairoFontOptions::getHintStyle(': 'void | int',
\ 'CairoFontOptions::getSubpixelOrder(': 'void | int',
\ 'CairoFontOptions::hash(': 'void | int',
\ 'CairoFontOptions::merge(': 'string $other | void',
\ 'CairoFontOptions::setAntialias(': 'string $antialias | void',
\ 'CairoFontOptions::setHintMetrics(': 'string $hint_metrics | void',
\ 'CairoFontOptions::setHintStyle(': 'string $hint_style | void',
\ 'CairoFontOptions::setSubpixelOrder(': 'string $subpixel_order | void',
\ 'CairoFontOptions::status(': 'void | int',
\ 'CairoFormat::strideForWidth(': 'int $format, int $width | int',
\ 'CairoGradientPattern::addColorStopRgb(': 'string $offset, string $red, string $green, string $blue | void',
\ 'CairoGradientPattern::addColorStopRgba(': 'string $offset, string $red, string $green, string $blue, string $alpha | void',
\ 'CairoGradientPattern::getColorStopCount(': 'void | int',
\ 'CairoGradientPattern::getColorStopRgba(': 'string $index | array',
\ 'CairoGradientPattern::getExtend(': 'void | int',
\ 'CairoGradientPattern::setExtend(': 'int $extend | void',
\ 'CairoGradientPattern::__construct(': 'void',
\ 'CairoGradientPattern::getMatrix(': 'void | void',
\ 'CairoGradientPattern::getType(': 'void | int',
\ 'CairoGradientPattern::setMatrix(': 'string $matrix | void',
\ 'CairoGradientPattern::status(': 'void | int',
\ 'CairoImageSurface::__construct(': 'int $format, int $width, int $height',
\ 'CairoImageSurface::createForData(': 'string $data, int $format, int $width, int $height [, int $stride = -1] | void',
\ 'CairoImageSurface::createFromPng(': 'string $file | CairoImageSurface',
\ 'CairoImageSurface::getData(': 'void | string',
\ 'CairoImageSurface::getFormat(': 'void | int',
\ 'CairoImageSurface::getHeight(': 'void | int',
\ 'CairoImageSurface::getStride(': 'void | int',
\ 'CairoImageSurface::getWidth(': 'void | int',
\ 'CairoImageSurface::copyPage(': 'void | void',
\ 'CairoImageSurface::createSimilar(': 'CairoSurface $other, int $content, string $width, string $height | void',
\ 'CairoImageSurface::finish(': 'void | void',
\ 'CairoImageSurface::flush(': 'void | void',
\ 'CairoImageSurface::getContent(': 'void | int',
\ 'CairoImageSurface::getDeviceOffset(': 'void | array',
\ 'CairoImageSurface::getFontOptions(': 'void | void',
\ 'CairoImageSurface::getType(': 'void | int',
\ 'CairoImageSurface::markDirty(': 'void | void',
\ 'CairoImageSurface::markDirtyRectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoImageSurface::setDeviceOffset(': 'string $x, string $y | void',
\ 'CairoImageSurface::setFallbackResolution(': 'string $x, string $y | void',
\ 'CairoImageSurface::showPage(': 'void | void',
\ 'CairoImageSurface::status(': 'void | int',
\ 'CairoImageSurface::writeToPng(': 'string $file | void',
\ 'CairoLinearGradient::__construct(': 'float $x0, float $y0, float $x1, float $y1',
\ 'CairoLinearGradient::getPoints(': 'void | array',
\ 'CairoLinearGradient::addColorStopRgb(': 'string $offset, string $red, string $green, string $blue | void',
\ 'CairoLinearGradient::addColorStopRgba(': 'string $offset, string $red, string $green, string $blue, string $alpha | void',
\ 'CairoLinearGradient::getColorStopCount(': 'void | int',
\ 'CairoLinearGradient::getColorStopRgba(': 'string $index | array',
\ 'CairoLinearGradient::getExtend(': 'void | int',
\ 'CairoLinearGradient::setExtend(': 'int $extend | void',
\ 'CairoMatrix::__construct(': '[ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]',
\ 'CairoMatrix::initIdentity(': 'void | void',
\ 'CairoMatrix::initRotate(': 'float $radians | void',
\ 'CairoMatrix::initScale(': 'float $sx, float $sy | void',
\ 'CairoMatrix::initTranslate(': 'float $tx, float $ty | void',
\ 'CairoMatrix::invert(': 'void | void',
\ 'CairoMatrix::multiply(': 'CairoMatrix $matrix1, CairoMatrix $matrix2 | CairoMatrix',
\ 'CairoMatrix::rotate(': 'string $sx, string $sy | void',
\ 'CairoMatrix::scale(': 'float $sx, float $sy | void',
\ 'CairoMatrix::transformDistance(': 'string $dx, string $dy | array',
\ 'CairoMatrix::transformPoint(': 'string $dx, string $dy | array',
\ 'CairoMatrix::translate(': 'string $tx, string $ty | void',
\ 'CairoPattern::__construct(': 'void',
\ 'CairoPattern::getMatrix(': 'void | void',
\ 'CairoPattern::getType(': 'void | int',
\ 'CairoPattern::setMatrix(': 'string $matrix | void',
\ 'CairoPattern::status(': 'void | int',
\ 'CairoPdfSurface::__construct(': 'string $file, float $width, float $height',
\ 'CairoPdfSurface::setSize(': 'string $width, string $height | void',
\ 'CairoPdfSurface::copyPage(': 'void | void',
\ 'CairoPdfSurface::createSimilar(': 'CairoSurface $other, int $content, string $width, string $height | void',
\ 'CairoPdfSurface::finish(': 'void | void',
\ 'CairoPdfSurface::flush(': 'void | void',
\ 'CairoPdfSurface::getContent(': 'void | int',
\ 'CairoPdfSurface::getDeviceOffset(': 'void | array',
\ 'CairoPdfSurface::getFontOptions(': 'void | void',
\ 'CairoPdfSurface::getType(': 'void | int',
\ 'CairoPdfSurface::markDirty(': 'void | void',
\ 'CairoPdfSurface::markDirtyRectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoPdfSurface::setDeviceOffset(': 'string $x, string $y | void',
\ 'CairoPdfSurface::setFallbackResolution(': 'string $x, string $y | void',
\ 'CairoPdfSurface::showPage(': 'void | void',
\ 'CairoPdfSurface::status(': 'void | int',
\ 'CairoPdfSurface::writeToPng(': 'string $file | void',
\ 'CairoPsSurface::__construct(': 'string $file, float $width, float $height',
\ 'CairoPsSurface::dscBeginPageSetup(': 'void | void',
\ 'CairoPsSurface::dscBeginSetup(': 'void | void',
\ 'CairoPsSurface::dscComment(': 'string $comment | void',
\ 'CairoPsSurface::getEps(': 'void | bool',
\ 'CairoPsSurface::getLevels(': 'void | array',
\ 'CairoPsSurface::levelToString(': 'int $level | string',
\ 'CairoPsSurface::restrictToLevel(': 'string $level | void',
\ 'CairoPsSurface::setEps(': 'string $level | void',
\ 'CairoPsSurface::setSize(': 'string $width, string $height | void',
\ 'CairoPsSurface::copyPage(': 'void | void',
\ 'CairoPsSurface::createSimilar(': 'CairoSurface $other, int $content, string $width, string $height | void',
\ 'CairoPsSurface::finish(': 'void | void',
\ 'CairoPsSurface::flush(': 'void | void',
\ 'CairoPsSurface::getContent(': 'void | int',
\ 'CairoPsSurface::getDeviceOffset(': 'void | array',
\ 'CairoPsSurface::getFontOptions(': 'void | void',
\ 'CairoPsSurface::getType(': 'void | int',
\ 'CairoPsSurface::markDirty(': 'void | void',
\ 'CairoPsSurface::markDirtyRectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoPsSurface::setDeviceOffset(': 'string $x, string $y | void',
\ 'CairoPsSurface::setFallbackResolution(': 'string $x, string $y | void',
\ 'CairoPsSurface::showPage(': 'void | void',
\ 'CairoPsSurface::status(': 'void | int',
\ 'CairoPsSurface::writeToPng(': 'string $file | void',
\ 'CairoRadialGradient::__construct(': 'float $x0, float $y0, float $r0, float $x1, float $y1, float $r1',
\ 'CairoRadialGradient::getCircles(': 'void | array',
\ 'CairoRadialGradient::addColorStopRgb(': 'string $offset, string $red, string $green, string $blue | void',
\ 'CairoRadialGradient::addColorStopRgba(': 'string $offset, string $red, string $green, string $blue, string $alpha | void',
\ 'CairoRadialGradient::getColorStopCount(': 'void | int',
\ 'CairoRadialGradient::getColorStopRgba(': 'string $index | array',
\ 'CairoRadialGradient::getExtend(': 'void | int',
\ 'CairoRadialGradient::setExtend(': 'int $extend | void',
\ 'CairoScaledFont::__construct(': 'CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options',
\ 'CairoScaledFont::extents(': 'void | array',
\ 'CairoScaledFont::getCtm(': 'void | CairoMatrix',
\ 'CairoScaledFont::getFontFace(': 'void | void',
\ 'CairoScaledFont::getFontMatrix(': 'void | void',
\ 'CairoScaledFont::getFontOptions(': 'void | void',
\ 'CairoScaledFont::getScaleMatrix(': 'void | void',
\ 'CairoScaledFont::getType(': 'void | int',
\ 'CairoScaledFont::glyphExtents(': 'string $glyphs | array',
\ 'CairoScaledFont::status(': 'void | int',
\ 'CairoScaledFont::textExtents(': 'string $text | array',
\ 'CairoSolidPattern::__construct(': 'float $red, float $green, float $blue [, float $alpha = 0]',
\ 'CairoSolidPattern::getRgba(': 'void | array',
\ 'CairoSolidPattern::getMatrix(': 'void | void',
\ 'CairoSolidPattern::getType(': 'void | int',
\ 'CairoSolidPattern::setMatrix(': 'string $matrix | void',
\ 'CairoSolidPattern::status(': 'void | int',
\ 'CairoSurface::__construct(': 'void',
\ 'CairoSurface::copyPage(': 'void | void',
\ 'CairoSurface::createSimilar(': 'CairoSurface $other, int $content, string $width, string $height | void',
\ 'CairoSurface::finish(': 'void | void',
\ 'CairoSurface::flush(': 'void | void',
\ 'CairoSurface::getContent(': 'void | int',
\ 'CairoSurface::getDeviceOffset(': 'void | array',
\ 'CairoSurface::getFontOptions(': 'void | void',
\ 'CairoSurface::getType(': 'void | int',
\ 'CairoSurface::markDirty(': 'void | void',
\ 'CairoSurface::markDirtyRectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoSurface::setDeviceOffset(': 'string $x, string $y | void',
\ 'CairoSurface::setFallbackResolution(': 'string $x, string $y | void',
\ 'CairoSurface::showPage(': 'void | void',
\ 'CairoSurface::status(': 'void | int',
\ 'CairoSurface::writeToPng(': 'string $file | void',
\ 'CairoSurfacePattern::__construct(': 'CairoSurface $surface',
\ 'CairoSurfacePattern::getExtend(': 'void | int',
\ 'CairoSurfacePattern::getFilter(': 'void | int',
\ 'CairoSurfacePattern::getSurface(': 'void | void',
\ 'CairoSurfacePattern::setExtend(': 'int $extend | void',
\ 'CairoSurfacePattern::setFilter(': 'string $filter | void',
\ 'CairoSurfacePattern::getMatrix(': 'void | void',
\ 'CairoSurfacePattern::getType(': 'void | int',
\ 'CairoSurfacePattern::setMatrix(': 'string $matrix | void',
\ 'CairoSurfacePattern::status(': 'void | int',
\ 'CairoSvgSurface::__construct(': 'string $file, float $width, float $height',
\ 'CairoSvgSurface::getVersions(': 'void | array',
\ 'CairoSvgSurface::restrictToVersion(': 'string $version | void',
\ 'CairoSvgSurface::versionToString(': 'int $version | string',
\ 'CairoSvgSurface::copyPage(': 'void | void',
\ 'CairoSvgSurface::createSimilar(': 'CairoSurface $other, int $content, string $width, string $height | void',
\ 'CairoSvgSurface::finish(': 'void | void',
\ 'CairoSvgSurface::flush(': 'void | void',
\ 'CairoSvgSurface::getContent(': 'void | int',
\ 'CairoSvgSurface::getDeviceOffset(': 'void | array',
\ 'CairoSvgSurface::getFontOptions(': 'void | void',
\ 'CairoSvgSurface::getType(': 'void | int',
\ 'CairoSvgSurface::markDirty(': 'void | void',
\ 'CairoSvgSurface::markDirtyRectangle(': 'string $x, string $y, string $width, string $height | void',
\ 'CairoSvgSurface::setDeviceOffset(': 'string $x, string $y | void',
\ 'CairoSvgSurface::setFallbackResolution(': 'string $x, string $y | void',
\ 'CairoSvgSurface::showPage(': 'void | void',
\ 'CairoSvgSurface::status(': 'void | int',
\ 'CairoSvgSurface::writeToPng(': 'string $file | void',
\ 'CallbackFilterIterator::__construct(': 'Iterator $iterator, callable $callback',
\ 'CallbackFilterIterator::accept(': 'void | string',
\ 'CallbackFilterIterator::current(': 'void | mixed',
\ 'CallbackFilterIterator::getInnerIterator(': 'void | Iterator',
\ 'CallbackFilterIterator::key(': 'void | mixed',
\ 'CallbackFilterIterator::next(': 'void | void',
\ 'CallbackFilterIterator::rewind(': 'void | void',
\ 'CallbackFilterIterator::valid(': 'void | bool',
\ 'chdb::__construct(': 'string $pathname',
\ 'chdb::get(': 'string $key | string',
\ 'Closure::__construct(': 'void',
\ 'Closure::bind(': 'Closure $closure, object $newthis [, mixed $newscope = ''static''] | Closure',
\ 'Closure::bindTo(': 'object $newthis [, mixed $newscope = ''static''] | Closure',
\ 'Collator::__construct(': 'string $locale',
\ 'Collator::asort(': 'array &$arr [, int $sort_flag] | bool',
\ 'Collator::compare(': 'string $str1, string $str2 | int',
\ 'Collator::create(': 'string $locale | Collator',
\ 'Collator::getAttribute(': 'int $attr | int',
\ 'Collator::getErrorCode(': 'void | int',
\ 'Collator::getErrorMessage(': 'void | string',
\ 'Collator::getLocale(': '[ int $type] | string',
\ 'Collator::getSortKey(': 'string $str | string',
\ 'Collator::getStrength(': 'void | int',
\ 'Collator::setAttribute(': 'int $attr, int $val | bool',
\ 'Collator::setStrength(': 'int $strength | bool',
\ 'Collator::sortWithSortKeys(': 'array &$arr | bool',
\ 'Collator::sort(': 'array &$arr [, int $sort_flag] | bool',
\ 'Cond::broadcast(': 'long $condition | boolean',
\ 'Cond::create(': 'void | long',
\ 'Cond::destroy(': 'long $condition | boolean',
\ 'Cond::signal(': 'long $condition | boolean',
\ 'Cond::wait(': 'long $condition, long $mutex [, long $timeout] | boolean',
\ 'Countable::count(': 'void | int',
\ 'DateInterval::__construct(': 'string $interval_spec',
\ 'DateInterval::createFromDateString(': 'string $time | DateInterval',
\ 'DateInterval::format(': 'string $format | string',
\ 'DatePeriod::__construct(': 'DateTime $start, DateInterval $interval, int $recurrences [, int $options]',
\ 'DateTime::__construct(': '[ string $time = "now" [, DateTimeZone $timezone = NULL]]',
\ 'DateTime::add(': 'DateInterval $interval | DateTime',
\ 'DateTime::createFromFormat(': 'string $format, string $time [, DateTimeZone $timezone] | DateTime',
\ 'DateTime::diff(': 'DateTime $datetime2 [, bool $absolute = false] | DateInterval',
\ 'DateTime::format(': 'string $format | string',
\ 'DateTime::getLastErrors(': 'void | array',
\ 'DateTime::getOffset(': 'void | int',
\ 'DateTime::getTimestamp(': 'void | int',
\ 'DateTime::getTimezone(': 'void | DateTimeZone',
\ 'DateTime::modify(': 'string $modify | DateTime',
\ 'DateTime::__set_state(': 'array $array | DateTime',
\ 'DateTime::setDate(': 'int $year, int $month, int $day | DateTime',
\ 'DateTime::setISODate(': 'int $year, int $week [, int $day = 1] | DateTime',
\ 'DateTime::setTime(': 'int $hour, int $minute [, int $second = 0] | DateTime',
\ 'DateTime::setTimestamp(': 'int $unixtimestamp | DateTime',
\ 'DateTime::setTimezone(': 'DateTimeZone $timezone | DateTime',
\ 'DateTime::sub(': 'DateInterval $interval | DateTime',
\ 'DateTime::__wakeup(': 'void | DateTime',
\ 'DateTimeZone::__construct(': 'string $timezone',
\ 'DateTimeZone::getLocation(': 'void | array',
\ 'DateTimeZone::getName(': 'void | string',
\ 'DateTimeZone::getOffset(': 'DateTime $datetime | int',
\ 'DateTimeZone::getTransitions(': '[ int $timestamp_begin [, int $timestamp_end]] | array',
\ 'DateTimeZone::listAbbreviations(': 'void | array',
\ 'DateTimeZone::listIdentifiers(': '[ int $what = DateTimeZone::ALL [, string $country = NULL]] | array',
\ 'Directory::close(': '[ resource $dir_handle] | void',
\ 'Directory::read(': '[ resource $dir_handle] | string',
\ 'Directory::rewind(': '[ resource $dir_handle] | void',
\ 'DirectoryIterator::__construct(': 'string $path',
\ 'DirectoryIterator::current(': 'void | DirectoryIterator',
\ 'DirectoryIterator::getATime(': 'void | int',
\ 'DirectoryIterator::getBasename(': '[ string $suffix] | string',
\ 'DirectoryIterator::getCTime(': 'void | int',
\ 'DirectoryIterator::getExtension(': 'void | string',
\ 'DirectoryIterator::getFilename(': 'void | string',
\ 'DirectoryIterator::getGroup(': 'void | int',
\ 'DirectoryIterator::getInode(': 'void | int',
\ 'DirectoryIterator::getMTime(': 'void | int',
\ 'DirectoryIterator::getOwner(': 'void | int',
\ 'DirectoryIterator::getPath(': 'void | string',
\ 'DirectoryIterator::getPathname(': 'void | string',
\ 'DirectoryIterator::getPerms(': 'void | int',
\ 'DirectoryIterator::getSize(': 'void | int',
\ 'DirectoryIterator::getType(': 'void | string',
\ 'DirectoryIterator::isDir(': 'void | bool',
\ 'DirectoryIterator::isDot(': 'void | bool',
\ 'DirectoryIterator::isExecutable(': 'void | bool',
\ 'DirectoryIterator::isFile(': 'void | bool',
\ 'DirectoryIterator::isLink(': 'void | bool',
\ 'DirectoryIterator::isReadable(': 'void | bool',
\ 'DirectoryIterator::isWritable(': 'void | bool',
\ 'DirectoryIterator::key(': 'void | string',
\ 'DirectoryIterator::next(': 'void | void',
\ 'DirectoryIterator::rewind(': 'void | void',
\ 'DirectoryIterator::seek(': 'int $position | void',
\ 'DirectoryIterator::__toString(': 'void | string',
\ 'DirectoryIterator::valid(': 'void | bool',
\ 'DomainException::getMessage(': 'void | string',
\ 'DomainException::getPrevious(': 'void | Exception',
\ 'DomainException::getCode(': 'void | mixed',
\ 'DomainException::getFile(': 'void | string',
\ 'DomainException::getLine(': 'void | int',
\ 'DomainException::getTrace(': 'void | array',
\ 'DomainException::getTraceAsString(': 'void | string',
\ 'DomainException::__toString(': 'void | string',
\ 'DomainException::__clone(': 'void | void',
\ 'DOMAttr::__construct(': 'string $name [, string $value]',
\ 'DOMAttr::isId(': 'void | bool',
\ 'DOMAttr::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMAttr::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMAttr::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMAttr::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMAttr::getLineNo(': 'void | int',
\ 'DOMAttr::getNodePath(': 'void | string',
\ 'DOMAttr::hasAttributes(': 'void | bool',
\ 'DOMAttr::hasChildNodes(': 'void | bool',
\ 'DOMAttr::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMAttr::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMAttr::isSameNode(': 'DOMNode $node | bool',
\ 'DOMAttr::isSupported(': 'string $feature, string $version | bool',
\ 'DOMAttr::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMAttr::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMAttr::normalize(': 'void | void',
\ 'DOMAttr::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMAttr::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMCdataSection::__construct(': 'string $value',
\ 'DOMCdataSection::isWhitespaceInElementContent(': 'void | bool',
\ 'DOMCdataSection::splitText(': 'int $offset | DOMText',
\ 'DOMCharacterData::appendData(': 'string $data | void',
\ 'DOMCharacterData::deleteData(': 'int $offset, int $count | void',
\ 'DOMCharacterData::insertData(': 'int $offset, string $data | void',
\ 'DOMCharacterData::replaceData(': 'int $offset, int $count, string $data | void',
\ 'DOMCharacterData::substringData(': 'int $offset, int $count | string',
\ 'DOMCharacterData::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMCharacterData::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMCharacterData::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMCharacterData::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMCharacterData::getLineNo(': 'void | int',
\ 'DOMCharacterData::getNodePath(': 'void | string',
\ 'DOMCharacterData::hasAttributes(': 'void | bool',
\ 'DOMCharacterData::hasChildNodes(': 'void | bool',
\ 'DOMCharacterData::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMCharacterData::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMCharacterData::isSameNode(': 'DOMNode $node | bool',
\ 'DOMCharacterData::isSupported(': 'string $feature, string $version | bool',
\ 'DOMCharacterData::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMCharacterData::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMCharacterData::normalize(': 'void | void',
\ 'DOMCharacterData::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMCharacterData::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMComment::__construct(': '[ string $value]',
\ 'DOMComment::appendData(': 'string $data | void',
\ 'DOMComment::deleteData(': 'int $offset, int $count | void',
\ 'DOMComment::insertData(': 'int $offset, string $data | void',
\ 'DOMComment::replaceData(': 'int $offset, int $count, string $data | void',
\ 'DOMComment::substringData(': 'int $offset, int $count | string',
\ 'DOMComment::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMComment::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMComment::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMComment::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMComment::getLineNo(': 'void | int',
\ 'DOMComment::getNodePath(': 'void | string',
\ 'DOMComment::hasAttributes(': 'void | bool',
\ 'DOMComment::hasChildNodes(': 'void | bool',
\ 'DOMComment::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMComment::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMComment::isSameNode(': 'DOMNode $node | bool',
\ 'DOMComment::isSupported(': 'string $feature, string $version | bool',
\ 'DOMComment::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMComment::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMComment::normalize(': 'void | void',
\ 'DOMComment::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMComment::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMDocument::__construct(': '[ string $version [, string $encoding]]',
\ 'DOMDocument::createAttribute(': 'string $name | DOMAttr',
\ 'DOMDocument::createAttributeNS(': 'string $namespaceURI, string $qualifiedName | DOMAttr',
\ 'DOMDocument::createCDATASection(': 'string $data | DOMCDATASection',
\ 'DOMDocument::createComment(': 'string $data | DOMComment',
\ 'DOMDocument::createDocumentFragment(': 'void | DOMDocumentFragment',
\ 'DOMDocument::createElement(': 'string $name [, string $value] | DOMElement',
\ 'DOMDocument::createElementNS(': 'string $namespaceURI, string $qualifiedName [, string $value] | DOMElement',
\ 'DOMDocument::createEntityReference(': 'string $name | DOMEntityReference',
\ 'DOMDocument::createProcessingInstruction(': 'string $target [, string $data] | DOMProcessingInstruction',
\ 'DOMDocument::createTextNode(': 'string $content | DOMText',
\ 'DOMDocument::getElementById(': 'string $elementId | DOMElement',
\ 'DOMDocument::getElementsByTagName(': 'string $name | DOMNodeList',
\ 'DOMDocument::getElementsByTagNameNS(': 'string $namespaceURI, string $localName | DOMNodeList',
\ 'DOMDocument::importNode(': 'DOMNode $importedNode [, bool $deep] | DOMNode',
\ 'DOMDocument::load(': 'string $filename [, int $options = 0] | mixed',
\ 'DOMDocument::loadHTML(': 'string $source | bool',
\ 'DOMDocument::loadHTMLFile(': 'string $filename | bool',
\ 'DOMDocument::loadXML(': 'string $source [, int $options = 0] | mixed',
\ 'DOMDocument::normalizeDocument(': 'void | void',
\ 'DOMDocument::registerNodeClass(': 'string $baseclass, string $extendedclass | bool',
\ 'DOMDocument::relaxNGValidate(': 'string $filename | bool',
\ 'DOMDocument::relaxNGValidateSource(': 'string $source | bool',
\ 'DOMDocument::save(': 'string $filename [, int $options] | int',
\ 'DOMDocument::saveHTML(': '[ DOMNode $node = NULL] | string',
\ 'DOMDocument::saveHTMLFile(': 'string $filename | int',
\ 'DOMDocument::saveXML(': '[ DOMNode $node [, int $options]] | string',
\ 'DOMDocument::schemaValidate(': 'string $filename | bool',
\ 'DOMDocument::schemaValidateSource(': 'string $source | bool',
\ 'DOMDocument::validate(': 'void | bool',
\ 'DOMDocument::xinclude(': '[ int $options] | int',
\ 'DOMDocument::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMDocument::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMDocument::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMDocument::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMDocument::getLineNo(': 'void | int',
\ 'DOMDocument::getNodePath(': 'void | string',
\ 'DOMDocument::hasAttributes(': 'void | bool',
\ 'DOMDocument::hasChildNodes(': 'void | bool',
\ 'DOMDocument::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMDocument::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMDocument::isSameNode(': 'DOMNode $node | bool',
\ 'DOMDocument::isSupported(': 'string $feature, string $version | bool',
\ 'DOMDocument::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMDocument::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMDocument::normalize(': 'void | void',
\ 'DOMDocument::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMDocument::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMDocumentFragment::appendXML(': 'string $data | bool',
\ 'DOMDocumentFragment::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMDocumentFragment::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMDocumentFragment::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMDocumentFragment::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMDocumentFragment::getLineNo(': 'void | int',
\ 'DOMDocumentFragment::getNodePath(': 'void | string',
\ 'DOMDocumentFragment::hasAttributes(': 'void | bool',
\ 'DOMDocumentFragment::hasChildNodes(': 'void | bool',
\ 'DOMDocumentFragment::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMDocumentFragment::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMDocumentFragment::isSameNode(': 'DOMNode $node | bool',
\ 'DOMDocumentFragment::isSupported(': 'string $feature, string $version | bool',
\ 'DOMDocumentFragment::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMDocumentFragment::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMDocumentFragment::normalize(': 'void | void',
\ 'DOMDocumentFragment::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMDocumentFragment::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMDocumentType::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMDocumentType::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMDocumentType::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMDocumentType::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMDocumentType::getLineNo(': 'void | int',
\ 'DOMDocumentType::getNodePath(': 'void | string',
\ 'DOMDocumentType::hasAttributes(': 'void | bool',
\ 'DOMDocumentType::hasChildNodes(': 'void | bool',
\ 'DOMDocumentType::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMDocumentType::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMDocumentType::isSameNode(': 'DOMNode $node | bool',
\ 'DOMDocumentType::isSupported(': 'string $feature, string $version | bool',
\ 'DOMDocumentType::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMDocumentType::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMDocumentType::normalize(': 'void | void',
\ 'DOMDocumentType::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMDocumentType::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMElement::__construct(': 'string $name [, string $value [, string $namespaceURI]]',
\ 'DOMElement::getAttribute(': 'string $name | string',
\ 'DOMElement::getAttributeNode(': 'string $name | DOMAttr',
\ 'DOMElement::getAttributeNodeNS(': 'string $namespaceURI, string $localName | DOMAttr',
\ 'DOMElement::getAttributeNS(': 'string $namespaceURI, string $localName | string',
\ 'DOMElement::getElementsByTagName(': 'string $name | DOMNodeList',
\ 'DOMElement::getElementsByTagNameNS(': 'string $namespaceURI, string $localName | DOMNodeList',
\ 'DOMElement::hasAttribute(': 'string $name | bool',
\ 'DOMElement::hasAttributeNS(': 'string $namespaceURI, string $localName | bool',
\ 'DOMElement::removeAttribute(': 'string $name | bool',
\ 'DOMElement::removeAttributeNode(': 'DOMAttr $oldnode | bool',
\ 'DOMElement::removeAttributeNS(': 'string $namespaceURI, string $localName | bool',
\ 'DOMElement::setAttribute(': 'string $name, string $value | DOMAttr',
\ 'DOMElement::setAttributeNode(': 'DOMAttr $attr | DOMAttr',
\ 'DOMElement::setAttributeNodeNS(': 'DOMAttr $attr | DOMAttr',
\ 'DOMElement::setAttributeNS(': 'string $namespaceURI, string $qualifiedName, string $value | void',
\ 'DOMElement::setIdAttribute(': 'string $name, bool $isId | void',
\ 'DOMElement::setIdAttributeNode(': 'DOMAttr $attr, bool $isId | void',
\ 'DOMElement::setIdAttributeNS(': 'string $namespaceURI, string $localName, bool $isId | void',
\ 'DOMElement::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMElement::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMElement::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMElement::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMElement::getLineNo(': 'void | int',
\ 'DOMElement::getNodePath(': 'void | string',
\ 'DOMElement::hasAttributes(': 'void | bool',
\ 'DOMElement::hasChildNodes(': 'void | bool',
\ 'DOMElement::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMElement::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMElement::isSameNode(': 'DOMNode $node | bool',
\ 'DOMElement::isSupported(': 'string $feature, string $version | bool',
\ 'DOMElement::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMElement::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMElement::normalize(': 'void | void',
\ 'DOMElement::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMElement::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMEntity::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMEntity::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMEntity::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMEntity::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMEntity::getLineNo(': 'void | int',
\ 'DOMEntity::getNodePath(': 'void | string',
\ 'DOMEntity::hasAttributes(': 'void | bool',
\ 'DOMEntity::hasChildNodes(': 'void | bool',
\ 'DOMEntity::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMEntity::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMEntity::isSameNode(': 'DOMNode $node | bool',
\ 'DOMEntity::isSupported(': 'string $feature, string $version | bool',
\ 'DOMEntity::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMEntity::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMEntity::normalize(': 'void | void',
\ 'DOMEntity::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMEntity::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMEntityReference::__construct(': 'string $name',
\ 'DOMEntityReference::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMEntityReference::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMEntityReference::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMEntityReference::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMEntityReference::getLineNo(': 'void | int',
\ 'DOMEntityReference::getNodePath(': 'void | string',
\ 'DOMEntityReference::hasAttributes(': 'void | bool',
\ 'DOMEntityReference::hasChildNodes(': 'void | bool',
\ 'DOMEntityReference::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMEntityReference::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMEntityReference::isSameNode(': 'DOMNode $node | bool',
\ 'DOMEntityReference::isSupported(': 'string $feature, string $version | bool',
\ 'DOMEntityReference::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMEntityReference::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMEntityReference::normalize(': 'void | void',
\ 'DOMEntityReference::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMEntityReference::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMException::getMessage(': 'void | string',
\ 'DOMException::getPrevious(': 'void | Exception',
\ 'DOMException::getCode(': 'void | mixed',
\ 'DOMException::getFile(': 'void | string',
\ 'DOMException::getLine(': 'void | int',
\ 'DOMException::getTrace(': 'void | array',
\ 'DOMException::getTraceAsString(': 'void | string',
\ 'DOMException::__toString(': 'void | string',
\ 'DOMException::__clone(': 'void | void',
\ 'DOMImplementation::__construct(': 'void',
\ 'DOMImplementation::createDocument(': '[ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL]]] | DOMDocument',
\ 'DOMImplementation::createDocumentType(': '[ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL]]] | DOMDocumentType',
\ 'DOMImplementation::hasFeature(': 'string $feature, string $version | bool',
\ 'DOMNamedNodeMap::getNamedItem(': 'string $name | DOMNode',
\ 'DOMNamedNodeMap::getNamedItemNS(': 'string $namespaceURI, string $localName | DOMNode',
\ 'DOMNamedNodeMap::item(': 'int $index | DOMNode',
\ 'DOMNode::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMNode::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMNode::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMNode::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMNode::getLineNo(': 'void | int',
\ 'DOMNode::getNodePath(': 'void | string',
\ 'DOMNode::hasAttributes(': 'void | bool',
\ 'DOMNode::hasChildNodes(': 'void | bool',
\ 'DOMNode::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMNode::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMNode::isSameNode(': 'DOMNode $node | bool',
\ 'DOMNode::isSupported(': 'string $feature, string $version | bool',
\ 'DOMNode::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMNode::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMNode::normalize(': 'void | void',
\ 'DOMNode::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMNode::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMNodeList::item(': 'int $index | DOMNode',
\ 'DOMNotation::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMNotation::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMNotation::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMNotation::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMNotation::getLineNo(': 'void | int',
\ 'DOMNotation::getNodePath(': 'void | string',
\ 'DOMNotation::hasAttributes(': 'void | bool',
\ 'DOMNotation::hasChildNodes(': 'void | bool',
\ 'DOMNotation::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMNotation::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMNotation::isSameNode(': 'DOMNode $node | bool',
\ 'DOMNotation::isSupported(': 'string $feature, string $version | bool',
\ 'DOMNotation::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMNotation::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMNotation::normalize(': 'void | void',
\ 'DOMNotation::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMNotation::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMProcessingInstruction::__construct(': 'string $name [, string $value]',
\ 'DOMProcessingInstruction::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMProcessingInstruction::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMProcessingInstruction::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMProcessingInstruction::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMProcessingInstruction::getLineNo(': 'void | int',
\ 'DOMProcessingInstruction::getNodePath(': 'void | string',
\ 'DOMProcessingInstruction::hasAttributes(': 'void | bool',
\ 'DOMProcessingInstruction::hasChildNodes(': 'void | bool',
\ 'DOMProcessingInstruction::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMProcessingInstruction::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMProcessingInstruction::isSameNode(': 'DOMNode $node | bool',
\ 'DOMProcessingInstruction::isSupported(': 'string $feature, string $version | bool',
\ 'DOMProcessingInstruction::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMProcessingInstruction::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMProcessingInstruction::normalize(': 'void | void',
\ 'DOMProcessingInstruction::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMProcessingInstruction::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMText::__construct(': '[ string $value]',
\ 'DOMText::isWhitespaceInElementContent(': 'void | bool',
\ 'DOMText::splitText(': 'int $offset | DOMText',
\ 'DOMText::appendChild(': 'DOMNode $newnode | DOMNode',
\ 'DOMText::C14N(': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string',
\ 'DOMText::C14NFile(': 'string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | int',
\ 'DOMText::cloneNode(': '[ bool $deep] | DOMNode',
\ 'DOMText::getLineNo(': 'void | int',
\ 'DOMText::getNodePath(': 'void | string',
\ 'DOMText::hasAttributes(': 'void | bool',
\ 'DOMText::hasChildNodes(': 'void | bool',
\ 'DOMText::insertBefore(': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode',
\ 'DOMText::isDefaultNamespace(': 'string $namespaceURI | bool',
\ 'DOMText::isSameNode(': 'DOMNode $node | bool',
\ 'DOMText::isSupported(': 'string $feature, string $version | bool',
\ 'DOMText::lookupNamespaceURI(': 'string $prefix | string',
\ 'DOMText::lookupPrefix(': 'string $namespaceURI | string',
\ 'DOMText::normalize(': 'void | void',
\ 'DOMText::removeChild(': 'DOMNode $oldnode | DOMNode',
\ 'DOMText::replaceChild(': 'DOMNode $newnode, DOMNode $oldnode | DOMNode',
\ 'DOMXPath::__construct(': 'DOMDocument $doc',
\ 'DOMXPath::evaluate(': 'string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true]] | mixed',
\ 'DOMXPath::query(': 'string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true]] | DOMNodeList',
\ 'DOMXPath::registerNamespace(': 'string $prefix, string $namespaceURI | bool',
\ 'DOMXPath::registerPhpFunctions(': '[ mixed $restrict] | void',
\ 'EmptyIterator::current(': 'void | void',
\ 'EmptyIterator::key(': 'void | void',
\ 'EmptyIterator::next(': 'void | void',
\ 'EmptyIterator::rewind(': 'void | void',
\ 'EmptyIterator::valid(': 'void | void',
\ 'ErrorException::__construct(': '[ string $message = "" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL]]]]]]',
\ 'ErrorException::getSeverity(': 'void | int',
\ 'ErrorException::getMessage(': 'void | string',
\ 'ErrorException::getPrevious(': 'void | Exception',
\ 'ErrorException::getCode(': 'void | mixed',
\ 'ErrorException::getFile(': 'void | string',
\ 'ErrorException::getLine(': 'void | int',
\ 'ErrorException::getTrace(': 'void | array',
\ 'ErrorException::getTraceAsString(': 'void | string',
\ 'ErrorException::__toString(': 'void | string',
\ 'ErrorException::__clone(': 'void | void',
\ 'Ev::backend(': 'void | int',
\ 'Ev::depth(': 'void | int',
\ 'Ev::embeddableBackends(': 'void | void',
\ 'Ev::feedSignal(': 'int $signum | void',
\ 'Ev::feedSignalEvent(': 'int $signum | void',
\ 'Ev::iteration(': 'void | int',
\ 'Ev::now(': 'void | double',
\ 'Ev::nowUpdate(': 'void | void',
\ 'Ev::recommendedBackends(': 'void | void',
\ 'Ev::resume(': 'void | void',
\ 'Ev::run(': '[ int $flags] | void',
\ 'Ev::sleep(': 'double $seconds | void',
\ 'Ev::stop(': '[ int $how] | void',
\ 'Ev::supportedBackends(': 'void | void',
\ 'Ev::suspend(': 'void | void',
\ 'Ev::time(': 'void | double',
\ 'Ev::verify(': 'void | void',
\ 'EvCheck::__construct(': 'callable $callback [, mixed $data [, int $priority]]',
\ 'EvCheck::createStopped(': 'string $callback [, string $data [, string $priority]] | object',
\ 'EvCheck::clear(': 'void | int',
\ 'EvCheck::feed(': 'int $revents | void',
\ 'EvCheck::getLoop(': 'void | EvLoop',
\ 'EvCheck::invoke(': 'int $revents | void',
\ 'EvCheck::keepalive(': '[ bool $value] | bool',
\ 'EvCheck::setCallback(': 'callable $callback | void',
\ 'EvCheck::start(': 'void | void',
\ 'EvCheck::stop(': 'void | void',
\ 'EvChild::__construct(': 'int $pid, bool $trace, callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvChild::createStopped(': 'int $pid, bool $trace, callable $callback [, mixed $data [, int $priority]] | object',
\ 'EvChild::set(': 'int $pid, bool $trace | void',
\ 'EvChild::clear(': 'void | int',
\ 'EvChild::feed(': 'int $revents | void',
\ 'EvChild::getLoop(': 'void | EvLoop',
\ 'EvChild::invoke(': 'int $revents | void',
\ 'EvChild::keepalive(': '[ bool $value] | bool',
\ 'EvChild::setCallback(': 'callable $callback | void',
\ 'EvChild::start(': 'void | void',
\ 'EvChild::stop(': 'void | void',
\ 'EvEmbed::__construct(': 'object $other [, callable $callback [, mixed $data [, int $priority]]]',
\ 'EvEmbed::createStopped(': 'object $other [, callable $callback [, mixed $data [, int $priority]]] | void',
\ 'EvEmbed::set(': 'object $other | void',
\ 'EvEmbed::sweep(': 'void | void',
\ 'EvEmbed::clear(': 'void | int',
\ 'EvEmbed::feed(': 'int $revents | void',
\ 'EvEmbed::getLoop(': 'void | EvLoop',
\ 'EvEmbed::invoke(': 'int $revents | void',
\ 'EvEmbed::keepalive(': '[ bool $value] | bool',
\ 'EvEmbed::setCallback(': 'callable $callback | void',
\ 'EvEmbed::start(': 'void | void',
\ 'EvEmbed::stop(': 'void | void',
\ 'Event::add(': '[ double $timeout] | void',
\ 'Event::addSignal(': '[ double $timeout] | bool',
\ 'Event::addTimer(': '[ double $timeout] | bool',
\ 'Event::__construct(': 'EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL]',
\ 'Event::del(': 'void | void',
\ 'Event::delSignal(': 'void | bool',
\ 'Event::delTimer(': 'void | bool',
\ 'Event::free(': 'void | void',
\ 'Event::getSupportedMethods(': 'void | void',
\ 'Event::pending(': 'int $flags | bool',
\ 'Event::set(': 'EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg]]] | bool',
\ 'Event::setPriority(': 'int $priority | bool',
\ 'Event::setTimer(': 'EventBase $base, callable $cb [, mixed $arg] | bool',
\ 'Event::signal(': 'EventBase $base, int $signum, callable $cb [, mixed $arg] | Event',
\ 'Event::timer(': 'EventBase $base, callable $cb [, mixed $arg] | Event',
\ 'EventBase::__construct(': '[ EventConfig $cfg]',
\ 'EventBase::dispatch(': 'void | void',
\ 'EventBase::exit(': '[ double $timeout] | void',
\ 'EventBase::getFeatures(': 'void | int',
\ 'EventBase::getMethod(': '[ EventConfig $cfg] | string',
\ 'EventBase::getTimeOfDayCached(': 'void | double',
\ 'EventBase::gotExit(': 'void | void',
\ 'EventBase::gotStop(': 'void | void',
\ 'EventBase::loop(': '[ int $flags] | bool',
\ 'EventBase::priorityInit(': 'string $n_priorities | bool',
\ 'EventBase::reInit(': 'string $base | void',
\ 'EventBase::stop(': 'void | bool',
\ 'EventBuffer::add(': 'string $data | bool',
\ 'EventBuffer::addBuffer(': 'EventBuffer $buf | bool',
\ 'EventBuffer::appendFrom(': 'EventBuffer $buf, int $len | int',
\ 'EventBuffer::__construct(': 'void',
\ 'EventBuffer::copyout(': 'string &$data, int $max_bytes | int',
\ 'EventBuffer::drain(': 'int $len | void',
\ 'EventBuffer::enableLocking(': 'void | void',
\ 'EventBuffer::expand(': 'int $len | bool',
\ 'EventBuffer::freeze(': 'bool $at_front | bool',
\ 'EventBuffer::lock(': 'void | void',
\ 'EventBuffer::prepend(': 'string $data | bool',
\ 'EventBuffer::prependBuffer(': 'EventBuffer $buf | bool',
\ 'EventBuffer::pullup(': 'string $size | void',
\ 'EventBuffer::read(': 'int $max_bytes | string',
\ 'EventBuffer::readLine(': 'string $eol_style | void',
\ 'EventBuffer::search(': 'string $what [, int $start = -1 [, int $end = -1]] | mixed',
\ 'EventBuffer::searchEol(': '[ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY]] | mixed',
\ 'EventBuffer::substr(': 'int $start [, int $length] | string',
\ 'EventBuffer::unfreeze(': 'bool $at_front | bool',
\ 'EventBuffer::unlock(': 'void | bool',
\ 'EventBuffer::write(': 'mixed $fd [, int $howmuch] | void',
\ 'EventBufferEvent::connect(': 'string $addr | bool',
\ 'EventBufferEvent::connectHost(': 'EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC] | bool',
\ 'EventBufferEvent::__construct(': 'EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL]]]]]',
\ 'EventBufferEvent::createPair(': 'EventBase $base [, int $options = 0] | array',
\ 'EventBufferEvent::disable(': 'int $events | bool',
\ 'EventBufferEvent::enable(': 'string $events | bool',
\ 'EventBufferEvent::free(': 'void | void',
\ 'EventBufferEvent::getDnsErrorString(': 'void | string',
\ 'EventBufferEvent::getEnabled(': 'void | int',
\ 'EventBufferEvent::getInput(': 'void | EventBuffer',
\ 'EventBufferEvent::getOutput(': 'void | EventBuffer',
\ 'EventBufferEvent::read(': 'string &$data, int $size | int',
\ 'EventBufferEvent::readBuffer(': 'EventBuffer $buf | bool',
\ 'EventBufferEvent::setCallbacks(': 'callable $readcb, callable $writecb, callable $eventcb [, string $arg] | void',
\ 'EventBufferEvent::setPriority(': 'int $priority | bool',
\ 'EventBufferEvent::setTimeouts(': 'int $timeout_read, int $timeout_write | bool',
\ 'EventBufferEvent::setWatermark(': 'int $events, int $lowmark, int $highmark | void',
\ 'EventBufferEvent::sslError(': 'void | void',
\ 'EventBufferEvent::sslFilter(': 'EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0] | EventBufferEvent',
\ 'EventBufferEvent::sslRenegotiate(': 'void | void',
\ 'EventBufferEvent::sslSocket(': 'EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options] | EventBufferEvent',
\ 'EventBufferEvent::write(': 'string $data | bool',
\ 'EventBufferEvent::writeBuffer(': 'EventBuffer $buf | bool',
\ 'EventConfig::avoidMethod(': 'int $method | bool',
\ 'EventConfig::__construct(': 'void',
\ 'EventConfig::requireFeatures(': 'int $feature | bool',
\ 'EventConfig::setMaxDispatchInterval(': 'int $max_interval, int $max_callbacks, int $min_priority | void',
\ 'EventDnsBase::addNameserverIp(': 'string $ip | bool',
\ 'EventDnsBase::addSearch(': 'string $domain | void',
\ 'EventDnsBase::clearSearch(': 'void | void',
\ 'EventDnsBase::__construct(': 'EventBase $base, bool $initialize',
\ 'EventDnsBase::countNameservers(': 'void | void',
\ 'EventDnsBase::loadHosts(': 'string $hosts | bool',
\ 'EventDnsBase::parseResolvConf(': 'int $flags, string $filename | bool',
\ 'EventDnsBase::setOption(': 'string $option, string $value | bool',
\ 'EventDnsBase::setSearchNdots(': 'int $ndots | bool',
\ 'EventHttp::accept(': 'mixed $socket | bool',
\ 'EventHttp::addServerAlias(': 'string $alias | bool',
\ 'EventHttp::bind(': 'string $address, int $port | void',
\ 'EventHttp::__construct(': 'EventBase $base',
\ 'EventHttp::removeServerAlias(': 'string $alias | bool',
\ 'EventHttp::setAllowedMethods(': 'int $methods | void',
\ 'EventHttp::setCallback(': 'string $path, string $cb [, string $arg] | void',
\ 'EventHttp::setDefaultCallback(': 'string $cb [, string $arg] | void',
\ 'EventHttp::setMaxBodySize(': 'int $value | void',
\ 'EventHttp::setMaxHeadersSize(': 'int $value | void',
\ 'EventHttp::setTimeout(': 'int $value | void',
\ 'EventHttpConnection::__construct(': 'EventBase $base, EventDnsBase $dns_base, string $address, int $port',
\ 'EventHttpConnection::getBase(': 'void | EventBase',
\ 'EventHttpConnection::getPeer(': 'string &$address, int &$port | void',
\ 'EventHttpConnection::makeRequest(': 'EventHttpRequest $req, int $type, string $uri | bool',
\ 'EventHttpConnection::setLocalAddress(': 'string $address | void',
\ 'EventHttpConnection::setLocalPort(': 'int $port | void',
\ 'EventHttpConnection::setMaxBodySize(': 'string $max_size | void',
\ 'EventHttpConnection::setMaxHeadersSize(': 'string $max_size | void',
\ 'EventHttpConnection::setRetries(': 'int $retries | void',
\ 'EventHttpConnection::setTimeout(': 'int $timeout | void',
\ 'EventHttpRequest::addHeader(': 'string $key, string $value, int $type | bool',
\ 'EventHttpRequest::cancel(': 'void | void',
\ 'EventHttpRequest::clearHeaders(': 'void | void',
\ 'EventHttpRequest::__construct(': 'callable $callback [, mixed $data = NULL]',
\ 'EventHttpRequest::findHeader(': 'string $key, string $type | void',
\ 'EventHttpRequest::free(': 'void | void',
\ 'EventHttpRequest::getCommand(': 'void | void',
\ 'EventHttpRequest::getHost(': 'void | string',
\ 'EventHttpRequest::getInputBuffer(': 'void | EventBuffer',
\ 'EventHttpRequest::getInputHeaders(': 'void | array',
\ 'EventHttpRequest::getOutputBuffer(': 'void | EventBuffer',
\ 'EventHttpRequest::getOutputHeaders(': 'void | void',
\ 'EventHttpRequest::getResponseCode(': 'void | int',
\ 'EventHttpRequest::getUri(': 'void | string',
\ 'EventHttpRequest::removeHeader(': 'string $key, string $type | void',
\ 'EventHttpRequest::sendError(': 'int $error [, string $reason = NULL] | void',
\ 'EventHttpRequest::sendReply(': 'int $code, string $reason [, EventBuffer $buf] | void',
\ 'EventHttpRequest::sendReplyChunk(': 'EventBuffer $buf | void',
\ 'EventHttpRequest::sendReplyEnd(': 'void | void',
\ 'EventHttpRequest::sendReplyStart(': 'int $code, string $reason | void',
\ 'EventListener::__construct(': 'EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target',
\ 'EventListener::disable(': 'void | bool',
\ 'EventListener::enable(': 'void | bool',
\ 'EventListener::getBase(': 'void | void',
\ 'EventListener::getSocketName(': 'string &$address [, mixed &$port] | bool',
\ 'EventListener::setCallback(': 'callable $cb [, mixed $arg = NULL] | void',
\ 'EventListener::setErrorCallback(': 'string $cb | void',
\ 'EventSslContext::__construct(': 'string $method, string $options',
\ 'EventUtil::__construct(': 'void',
\ 'EventUtil::getLastSocketErrno(': '[ mixed $socket = NULL] | int',
\ 'EventUtil::getLastSocketError(': '[ mixed $socket] | string',
\ 'EventUtil::getSocketName(': 'mixed $socket, string &$address [, mixed &$port] | bool',
\ 'EventUtil::setSocketOption(': 'mixed $socket, int $level, int $optname, mixed $optval | bool',
\ 'EventUtil::sslRandPoll(': 'void | void',
\ 'EvFork::__construct(': 'callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvFork::createStopped(': 'string $callback [, string $data [, string $priority]] | object',
\ 'EvFork::clear(': 'void | int',
\ 'EvFork::feed(': 'int $revents | void',
\ 'EvFork::getLoop(': 'void | EvLoop',
\ 'EvFork::invoke(': 'int $revents | void',
\ 'EvFork::keepalive(': '[ bool $value] | bool',
\ 'EvFork::setCallback(': 'callable $callback | void',
\ 'EvFork::start(': 'void | void',
\ 'EvFork::stop(': 'void | void',
\ 'EvIdle::__construct(': 'callable $callback [, mixed $data [, int $priority]]',
\ 'EvIdle::createStopped(': 'string $callback [, mixed $data [, int $priority]] | object',
\ 'EvIdle::clear(': 'void | int',
\ 'EvIdle::feed(': 'int $revents | void',
\ 'EvIdle::getLoop(': 'void | EvLoop',
\ 'EvIdle::invoke(': 'int $revents | void',
\ 'EvIdle::keepalive(': '[ bool $value] | bool',
\ 'EvIdle::setCallback(': 'callable $callback | void',
\ 'EvIdle::start(': 'void | void',
\ 'EvIdle::stop(': 'void | void',
\ 'EvIo::__construct(': 'mixed $fd, int $events, callable $callback [, mixed $data [, int $priority]]',
\ 'EvIo::createStopped(': 'mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIo',
\ 'EvIo::set(': 'mixed $fd, int $events | void',
\ 'EvIo::clear(': 'void | int',
\ 'EvIo::feed(': 'int $revents | void',
\ 'EvIo::getLoop(': 'void | EvLoop',
\ 'EvIo::invoke(': 'int $revents | void',
\ 'EvIo::keepalive(': '[ bool $value] | bool',
\ 'EvIo::setCallback(': 'callable $callback | void',
\ 'EvIo::start(': 'void | void',
\ 'EvIo::stop(': 'void | void',
\ 'EvLoop::backend(': 'void | int',
\ 'EvLoop::check(': 'string $callback [, string $data [, string $priority]] | EvCheck',
\ 'EvLoop::child(': 'string $pid, string $trace, string $callback [, string $data [, string $priority]] | EvChild',
\ 'EvLoop::__construct(': '[ int $flags [, mixed $data = NULL [, double $io_interval = 0.0 [, double $timeout_interval = 0.0]]]]',
\ 'EvLoop::defaultLoop(': '[ int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, double $io_interval = 0. [, double $timeout_interval = 0.]]]] | EvLoop',
\ 'EvLoop::embed(': 'string $other [, string $callback [, string $data [, string $priority]]] | EvEmbed',
\ 'EvLoop::fork(': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvFork',
\ 'EvLoop::idle(': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIdle',
\ 'EvLoop::invokePending(': 'void | void',
\ 'EvLoop::io(': 'mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIo',
\ 'EvLoop::loopFork(': 'void | void',
\ 'EvLoop::now(': 'void | double',
\ 'EvLoop::nowUpdate(': 'void | void',
\ 'EvLoop::periodic(': 'double $offset, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPeriodic',
\ 'EvLoop::prepare(': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPrepare',
\ 'EvLoop::resume(': 'void | void',
\ 'EvLoop::run(': '[ int $flags = 0] | void',
\ 'EvLoop::signal(': 'int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvSignal',
\ 'EvLoop::stat(': 'string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvStat',
\ 'EvLoop::stop(': '[ int $how] | void',
\ 'EvLoop::suspend(': 'void | void',
\ 'EvLoop::timer(': 'double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvTimer',
\ 'EvLoop::verify(': 'void | void',
\ 'EvPeriodic::again(': 'void | void',
\ 'EvPeriodic::at(': 'void | double',
\ 'EvPeriodic::__construct(': 'double $offset, string $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvPeriodic::createStopped(': 'double $offset, double $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPeriodic',
\ 'EvPeriodic::set(': 'double $offset, double $interval | void',
\ 'EvPeriodic::clear(': 'void | int',
\ 'EvPeriodic::feed(': 'int $revents | void',
\ 'EvPeriodic::getLoop(': 'void | EvLoop',
\ 'EvPeriodic::invoke(': 'int $revents | void',
\ 'EvPeriodic::keepalive(': '[ bool $value] | bool',
\ 'EvPeriodic::setCallback(': 'callable $callback | void',
\ 'EvPeriodic::start(': 'void | void',
\ 'EvPeriodic::stop(': 'void | void',
\ 'EvPrepare::__construct(': 'string $callback [, string $data [, string $priority]]',
\ 'EvPrepare::createStopped(': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPrepare',
\ 'EvPrepare::clear(': 'void | int',
\ 'EvPrepare::feed(': 'int $revents | void',
\ 'EvPrepare::getLoop(': 'void | EvLoop',
\ 'EvPrepare::invoke(': 'int $revents | void',
\ 'EvPrepare::keepalive(': '[ bool $value] | bool',
\ 'EvPrepare::setCallback(': 'callable $callback | void',
\ 'EvPrepare::start(': 'void | void',
\ 'EvPrepare::stop(': 'void | void',
\ 'EvSignal::__construct(': 'int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvSignal::createStopped(': 'int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvSignal',
\ 'EvSignal::set(': 'int $signum | void',
\ 'EvSignal::clear(': 'void | int',
\ 'EvSignal::feed(': 'int $revents | void',
\ 'EvSignal::getLoop(': 'void | EvLoop',
\ 'EvSignal::invoke(': 'int $revents | void',
\ 'EvSignal::keepalive(': '[ bool $value] | bool',
\ 'EvSignal::setCallback(': 'callable $callback | void',
\ 'EvSignal::start(': 'void | void',
\ 'EvSignal::stop(': 'void | void',
\ 'EvStat::attr(': 'void | array',
\ 'EvStat::__construct(': 'string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvStat::createStopped(': 'string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | void',
\ 'EvStat::prev(': 'void | void',
\ 'EvStat::set(': 'string $path, double $interval | void',
\ 'EvStat::stat(': 'void | bool',
\ 'EvStat::clear(': 'void | int',
\ 'EvStat::feed(': 'int $revents | void',
\ 'EvStat::getLoop(': 'void | EvLoop',
\ 'EvStat::invoke(': 'int $revents | void',
\ 'EvStat::keepalive(': '[ bool $value] | bool',
\ 'EvStat::setCallback(': 'callable $callback | void',
\ 'EvStat::start(': 'void | void',
\ 'EvStat::stop(': 'void | void',
\ 'EvTimer::again(': 'void | void',
\ 'EvTimer::__construct(': 'double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]',
\ 'EvTimer::createStopped(': 'double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvTimer',
\ 'EvTimer::set(': 'double $after, double $repeat | void',
\ 'EvTimer::clear(': 'void | int',
\ 'EvTimer::feed(': 'int $revents | void',
\ 'EvTimer::getLoop(': 'void | EvLoop',
\ 'EvTimer::invoke(': 'int $revents | void',
\ 'EvTimer::keepalive(': '[ bool $value] | bool',
\ 'EvTimer::setCallback(': 'callable $callback | void',
\ 'EvTimer::start(': 'void | void',
\ 'EvTimer::stop(': 'void | void',
\ 'EvWatcher::clear(': 'void | int',
\ 'EvWatcher::__construct(': 'void',
\ 'EvWatcher::feed(': 'int $revents | void',
\ 'EvWatcher::getLoop(': 'void | EvLoop',
\ 'EvWatcher::invoke(': 'int $revents | void',
\ 'EvWatcher::keepalive(': '[ bool $value] | bool',
\ 'EvWatcher::setCallback(': 'callable $callback | void',
\ 'EvWatcher::start(': 'void | void',
\ 'EvWatcher::stop(': 'void | void',
\ 'Exception::__construct(': '[ string $message = "" [, int $code = 0 [, Exception $previous = NULL]]]',
\ 'Exception::getMessage(': 'void | string',
\ 'Exception::getPrevious(': 'void | Exception',
\ 'Exception::getCode(': 'void | mixed',
\ 'Exception::getFile(': 'void | string',
\ 'Exception::getLine(': 'void | int',
\ 'Exception::getTrace(': 'void | array',
\ 'Exception::getTraceAsString(': 'void | string',
\ 'Exception::__toString(': 'void | string',
\ 'Exception::__clone(': 'void | void',
\ 'FilesystemIterator::__construct(': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]',
\ 'FilesystemIterator::current(': 'void | mixed',
\ 'FilesystemIterator::getFlags(': 'void | int',
\ 'FilesystemIterator::key(': 'void | string',
\ 'FilesystemIterator::next(': 'void | void',
\ 'FilesystemIterator::rewind(': 'void | void',
\ 'FilesystemIterator::setFlags(': '[ int $flags] | void',
\ 'FilesystemIterator::getATime(': 'void | int',
\ 'FilesystemIterator::getBasename(': '[ string $suffix] | string',
\ 'FilesystemIterator::getCTime(': 'void | int',
\ 'FilesystemIterator::getExtension(': 'void | string',
\ 'FilesystemIterator::getFilename(': 'void | string',
\ 'FilesystemIterator::getGroup(': 'void | int',
\ 'FilesystemIterator::getInode(': 'void | int',
\ 'FilesystemIterator::getMTime(': 'void | int',
\ 'FilesystemIterator::getOwner(': 'void | int',
\ 'FilesystemIterator::getPath(': 'void | string',
\ 'FilesystemIterator::getPathname(': 'void | string',
\ 'FilesystemIterator::getPerms(': 'void | int',
\ 'FilesystemIterator::getSize(': 'void | int',
\ 'FilesystemIterator::getType(': 'void | string',
\ 'FilesystemIterator::isDir(': 'void | bool',
\ 'FilesystemIterator::isDot(': 'void | bool',
\ 'FilesystemIterator::isExecutable(': 'void | bool',
\ 'FilesystemIterator::isFile(': 'void | bool',
\ 'FilesystemIterator::isLink(': 'void | bool',
\ 'FilesystemIterator::isReadable(': 'void | bool',
\ 'FilesystemIterator::isWritable(': 'void | bool',
\ 'FilesystemIterator::seek(': 'int $position | void',
\ 'FilesystemIterator::__toString(': 'void | string',
\ 'FilesystemIterator::valid(': 'void | bool',
\ 'FilterIterator::accept(': 'void | bool',
\ 'FilterIterator::__construct(': 'Iterator $iterator',
\ 'FilterIterator::current(': 'void | mixed',
\ 'FilterIterator::getInnerIterator(': 'void | Iterator',
\ 'FilterIterator::key(': 'void | mixed',
\ 'FilterIterator::next(': 'void | void',
\ 'FilterIterator::rewind(': 'void | void',
\ 'FilterIterator::valid(': 'void | bool',
\ 'GearmanClient::addOptions(': 'int $options | bool',
\ 'GearmanClient::addServer(': '[ string $host = 127.0.0.1 [, int $port = 4730]] | bool',
\ 'GearmanClient::addServers(': '[ string $servers = 127.0.0.1:4730] | bool',
\ 'GearmanClient::addTask(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskBackground(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskHigh(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskHighBackground(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskLow(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskLowBackground(': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask',
\ 'GearmanClient::addTaskStatus(': 'string $job_handle [, string &$context] | GearmanTask',
\ 'GearmanClient::clearCallbacks(': 'void | bool',
\ 'GearmanClient::clone(': 'void | GearmanClient',
\ 'GearmanClient::__construct(': 'void',
\ 'GearmanClient::context(': 'void | string',
\ 'GearmanClient::data(': 'void | string',
\ 'GearmanClient::do(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doBackground(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doHigh(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doHighBackground(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doJobHandle(': 'void | string',
\ 'GearmanClient::doLow(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doLowBackground(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doNormal(': 'string $function_name, string $workload [, string $unique] | string',
\ 'GearmanClient::doStatus(': 'void | array',
\ 'GearmanClient::echo(': 'string $workload | bool',
\ 'GearmanClient::error(': 'void | string',
\ 'GearmanClient::getErrno(': 'void | int',
\ 'GearmanClient::jobStatus(': 'string $job_handle | array',
\ 'GearmanClient::ping(': 'string $workload | bool',
\ 'GearmanClient::removeOptions(': 'int $options | bool',
\ 'GearmanClient::returnCode(': 'void | int',
\ 'GearmanClient::runTasks(': 'void | bool',
\ 'GearmanClient::setClientCallback(': 'callable $callback | void',
\ 'GearmanClient::setCompleteCallback(': 'callable $callback | bool',
\ 'GearmanClient::setContext(': 'string $context | bool',
\ 'GearmanClient::setCreatedCallback(': 'string $callback | bool',
\ 'GearmanClient::setData(': 'string $data | bool',
\ 'GearmanClient::setDataCallback(': 'callable $callback | bool',
\ 'GearmanClient::setExceptionCallback(': 'callable $callback | bool',
\ 'GearmanClient::setFailCallback(': 'callable $callback | bool',
\ 'GearmanClient::setOptions(': 'int $options | bool',
\ 'GearmanClient::setStatusCallback(': 'callable $callback | bool',
\ 'GearmanClient::setTimeout(': 'int $timeout | bool',
\ 'GearmanClient::setWarningCallback(': 'callable $callback | bool',
\ 'GearmanClient::setWorkloadCallback(': 'callable $callback | bool',
\ 'GearmanClient::timeout(': 'void | int',
\ 'GearmanException::getMessage(': 'void | string',
\ 'GearmanException::getPrevious(': 'void | Exception',
\ 'GearmanException::getCode(': 'void | mixed',
\ 'GearmanException::getFile(': 'void | string',
\ 'GearmanException::getLine(': 'void | int',
\ 'GearmanException::getTrace(': 'void | array',
\ 'GearmanException::getTraceAsString(': 'void | string',
\ 'GearmanException::__toString(': 'void | string',
\ 'GearmanException::__clone(': 'void | void',
\ 'GearmanJob::complete(': 'string $result | bool',
\ 'GearmanJob::__construct(': 'void',
\ 'GearmanJob::data(': 'string $data | bool',
\ 'GearmanJob::exception(': 'string $exception | bool',
\ 'GearmanJob::fail(': 'void | bool',
\ 'GearmanJob::functionName(': 'void | string',
\ 'GearmanJob::handle(': 'void | string',
\ 'GearmanJob::returnCode(': 'void | int',
\ 'GearmanJob::sendComplete(': 'string $result | bool',
\ 'GearmanJob::sendData(': 'string $data | bool',
\ 'GearmanJob::sendException(': 'string $exception | bool',
\ 'GearmanJob::sendFail(': 'void | bool',
\ 'GearmanJob::sendStatus(': 'int $numerator, int $denominator | bool',
\ 'GearmanJob::sendWarning(': 'string $warning | bool',
\ 'GearmanJob::setReturn(': 'int $gearman_return_t | bool',
\ 'GearmanJob::status(': 'int $numerator, int $denominator | bool',
\ 'GearmanJob::unique(': 'void | string',
\ 'GearmanJob::warning(': 'string $warning | bool',
\ 'GearmanJob::workload(': 'void | string',
\ 'GearmanJob::workloadSize(': 'void | int',
\ 'GearmanTask::__construct(': 'void',
\ 'GearmanTask::create(': 'void | GearmanTask',
\ 'GearmanTask::data(': 'void | string',
\ 'GearmanTask::dataSize(': 'void | int',
\ 'GearmanTask::function(': 'void | string',
\ 'GearmanTask::functionName(': 'void | string',
\ 'GearmanTask::isKnown(': 'void | bool',
\ 'GearmanTask::isRunning(': 'void | bool',
\ 'GearmanTask::jobHandle(': 'void | string',
\ 'GearmanTask::recvData(': 'int $data_len | array',
\ 'GearmanTask::returnCode(': 'void | int',
\ 'GearmanTask::sendData(': 'string $data | int',
\ 'GearmanTask::sendWorkload(': 'string $data | int',
\ 'GearmanTask::taskDenominator(': 'void | int',
\ 'GearmanTask::taskNumerator(': 'void | int',
\ 'GearmanTask::unique(': 'void | string',
\ 'GearmanTask::uuid(': 'void | string',
\ 'GearmanWorker::addFunction(': 'string $function_name, callable $function [, mixed &$context [, int $timeout]] | bool',
\ 'GearmanWorker::addOptions(': 'int $option | bool',
\ 'GearmanWorker::addServer(': '[ string $host = 127.0.0.1 [, int $port = 4730]] | bool',
\ 'GearmanWorker::addServers(': '[ string $servers = 127.0.0.1:4730] | bool',
\ 'GearmanWorker::clone(': 'void | void',
\ 'GearmanWorker::__construct(': 'void',
\ 'GearmanWorker::echo(': 'string $workload | bool',
\ 'GearmanWorker::error(': 'void | string',
\ 'GearmanWorker::getErrno(': 'void | int',
\ 'GearmanWorker::options(': 'void | int',
\ 'GearmanWorker::register(': 'string $function_name [, int $timeout] | bool',
\ 'GearmanWorker::removeOptions(': 'int $option | bool',
\ 'GearmanWorker::returnCode(': 'void | int',
\ 'GearmanWorker::setId(': 'string $id | bool',
\ 'GearmanWorker::setOptions(': 'int $option | bool',
\ 'GearmanWorker::setTimeout(': 'int $timeout | bool',
\ 'GearmanWorker::timeout(': 'void | int',
\ 'GearmanWorker::unregister(': 'string $function_name | bool',
\ 'GearmanWorker::unregisterAll(': 'void | bool',
\ 'GearmanWorker::wait(': 'void | bool',
\ 'GearmanWorker::work(': 'void | bool',
\ 'Gender\Gender::connect(': 'string $dsn | boolean',
\ 'Gender\Gender::__construct(': '[ string $dsn]',
\ 'Gender\Gender::country(': 'integer $country | array',
\ 'Gender\Gender::get(': 'string $name [, integer $country] | integer',
\ 'Gender\Gender::isNick(': 'string $name0, string $name1 [, integer $country] | array',
\ 'Gender\Gender::similarNames(': 'string $name [, integer $country] | array',
\ 'GlobIterator::__construct(': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]',
\ 'GlobIterator::count(': 'void | int',
\ 'GlobIterator::current(': 'void | mixed',
\ 'GlobIterator::getFlags(': 'void | int',
\ 'GlobIterator::key(': 'void | string',
\ 'GlobIterator::next(': 'void | void',
\ 'GlobIterator::rewind(': 'void | void',
\ 'GlobIterator::setFlags(': '[ int $flags] | void',
\ 'Gmagick::addimage(': 'Gmagick $Gmagick | Gmagick',
\ 'Gmagick::addnoiseimage(': 'int $NOISE | Gmagick',
\ 'Gmagick::annotateimage(': 'GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text | Gmagick',
\ 'Gmagick::blurimage(': 'float $radius, float $sigma [, int $channel] | Gmagick',
\ 'Gmagick::borderimage(': 'GmagickPixel $color, int $width, int $height | Gmagick',
\ 'Gmagick::charcoalimage(': 'float $radius, float $sigma | Gmagick',
\ 'Gmagick::chopimage(': 'int $width, int $height, int $x, int $y | Gmagick',
\ 'Gmagick::clear(': 'void | Gmagick',
\ 'Gmagick::commentimage(': 'string $comment | Gmagick',
\ 'Gmagick::compositeimage(': 'Gmagick $source, int $COMPOSE, int $x, int $y | Gmagick',
\ 'Gmagick::__construct(': '[ string $filename]',
\ 'Gmagick::cropimage(': 'int $width, int $height, int $x, int $y | Gmagick',
\ 'Gmagick::cropthumbnailimage(': 'int $width, int $height | Gmagick',
\ 'Gmagick::current(': 'void | Gmagick',
\ 'Gmagick::cyclecolormapimage(': 'int $displace | Gmagick',
\ 'Gmagick::deconstructimages(': 'void | void',
\ 'Gmagick::despeckleimage(': 'void | Gmagick',
\ 'Gmagick::destroy(': 'void | Gmagick',
\ 'Gmagick::drawimage(': 'GmagickDraw $GmagickDraw | Gmagick',
\ 'Gmagick::edgeimage(': 'float $radius | Gmagick',
\ 'Gmagick::embossimage(': 'float $radius, float $sigma | Gmagick',
\ 'Gmagick::enhanceimage(': 'void | Gmagick',
\ 'Gmagick::equalizeimage(': 'void | Gmagick',
\ 'Gmagick::flipimage(': 'void | Gmagick',
\ 'Gmagick::flopimage(': 'void | Gmagick',
\ 'Gmagick::frameimage(': 'GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel | Gmagick',
\ 'Gmagick::gammaimage(': 'float $gamma | Gmagick',
\ 'Gmagick::getcopyright(': 'void | string',
\ 'Gmagick::getfilename(': 'void | string',
\ 'Gmagick::getimagebackgroundcolor(': 'void | void',
\ 'Gmagick::getimageblueprimary(': 'void | array',
\ 'Gmagick::getimagebordercolor(': 'void | void',
\ 'Gmagick::getimagechanneldepth(': 'int $channel_type | int',
\ 'Gmagick::getimagecolors(': 'void | int',
\ 'Gmagick::getimagecolorspace(': 'void | int',
\ 'Gmagick::getimagecompose(': 'void | int',
\ 'Gmagick::getimagedelay(': 'void | int',
\ 'Gmagick::getimagedepth(': 'void | int',
\ 'Gmagick::getimagedispose(': 'void | int',
\ 'Gmagick::getimageextrema(': 'void | array',
\ 'Gmagick::getimagefilename(': 'void | string',
\ 'Gmagick::getimageformat(': 'void | string',
\ 'Gmagick::getimagegamma(': 'void | float',
\ 'Gmagick::getimagegreenprimary(': 'void | array',
\ 'Gmagick::getimageheight(': 'void | int',
\ 'Gmagick::getimagehistogram(': 'void | array',
\ 'Gmagick::getimageindex(': 'void | int',
\ 'Gmagick::getimageinterlacescheme(': 'void | int',
\ 'Gmagick::getimageiterations(': 'void | int',
\ 'Gmagick::getimagematte(': 'void | int',
\ 'Gmagick::getimagemattecolor(': 'void | void',
\ 'Gmagick::getimageprofile(': 'string $name | string',
\ 'Gmagick::getimageredprimary(': 'void | array',
\ 'Gmagick::getimagerenderingintent(': 'void | int',
\ 'Gmagick::getimageresolution(': 'void | array',
\ 'Gmagick::getimagescene(': 'void | int',
\ 'Gmagick::getimagesignature(': 'void | string',
\ 'Gmagick::getimagetype(': 'void | int',
\ 'Gmagick::getimageunits(': 'void | int',
\ 'Gmagick::getimagewhitepoint(': 'void | array',
\ 'Gmagick::getimagewidth(': 'void | int',
\ 'Gmagick::getpackagename(': 'void | string',
\ 'Gmagick::getquantumdepth(': 'void | array',
\ 'Gmagick::getreleasedate(': 'void | string',
\ 'Gmagick::getsamplingfactors(': 'void | array',
\ 'Gmagick::getsize(': 'void | array',
\ 'Gmagick::getversion(': 'void | array',
\ 'Gmagick::hasnextimage(': 'void | mixed',
\ 'Gmagick::haspreviousimage(': 'void | mixed',
\ 'Gmagick::implodeimage(': 'float $radius | mixed',
\ 'Gmagick::labelimage(': 'string $label | mixed',
\ 'Gmagick::levelimage(': 'float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT] | mixed',
\ 'Gmagick::magnifyimage(': 'void | mixed',
\ 'Gmagick::mapimage(': 'gmagick $gmagick, bool $dither | Gmagick',
\ 'Gmagick::medianfilterimage(': 'float $radius | void',
\ 'Gmagick::minifyimage(': 'void | void',
\ 'Gmagick::modulateimage(': 'float $brightness, float $saturation, float $hue | void',
\ 'Gmagick::motionblurimage(': 'float $radius, float $sigma, float $angle | void',
\ 'Gmagick::newimage(': 'int $width, int $height, string $background [, string $format] | void',
\ 'Gmagick::nextimage(': 'void | bool',
\ 'Gmagick::normalizeimage(': '[ int $channel] | void',
\ 'Gmagick::oilpaintimage(': 'float $radius | void',
\ 'Gmagick::previousimage(': 'void | bool',
\ 'Gmagick::profileimage(': 'string $name, string $profile | void',
\ 'Gmagick::quantizeimage(': 'int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError | void',
\ 'Gmagick::quantizeimages(': 'int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError | void',
\ 'Gmagick::queryfontmetrics(': 'GmagickDraw $draw, string $text | array',
\ 'Gmagick::queryfonts(': '[ string $pattern = "*"] | array',
\ 'Gmagick::queryformats(': '[ string $pattern = "*"] | array',
\ 'Gmagick::radialblurimage(': 'float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT] | void',
\ 'Gmagick::raiseimage(': 'int $width, int $height, int $x, int $y, bool $raise | void',
\ 'Gmagick::read(': 'string $filename | void',
\ 'Gmagick::readimage(': 'string $filename | void',
\ 'Gmagick::readimageblob(': 'string $imageContents [, string $filename] | void',
\ 'Gmagick::readimagefile(': 'resource $fp [, string $filename] | void',
\ 'Gmagick::reducenoiseimage(': 'float $radius | void',
\ 'Gmagick::removeimage(': 'void | void',
\ 'Gmagick::removeimageprofile(': 'string $name | string',
\ 'Gmagick::resampleimage(': 'float $xResolution, float $yResolution, int $filter, float $blur | void',
\ 'Gmagick::resizeimage(': 'int $width, int $height, int $filter, float $blur [, bool $fit = false] | void',
\ 'Gmagick::rollimage(': 'int $x, int $y | void',
\ 'Gmagick::rotateimage(': 'mixed $color, float $degrees | Gmagick',
\ 'Gmagick::scaleimage(': 'int $width, int $height [, bool $fit = false] | Gmagick',
\ 'Gmagick::separateimagechannel(': 'int $channel | Gmagick',
\ 'Gmagick::setfilename(': 'string $filename | Gmagick',
\ 'Gmagick::setimagebackgroundcolor(': 'GmagickPixel $color | Gmagick',
\ 'Gmagick::setimageblueprimary(': 'float $x, float $y | Gmagick',
\ 'Gmagick::setimagebordercolor(': 'GmagickPixel $color | Gmagick',
\ 'Gmagick::setimagechanneldepth(': 'int $channel, int $depth | Gmagick',
\ 'Gmagick::setimagecolorspace(': 'int $colorspace | Gmagick',
\ 'Gmagick::setimagecompose(': 'int $composite | Gmagick',
\ 'Gmagick::setimagedelay(': 'int $delay | Gmagick',
\ 'Gmagick::setimagedepth(': 'int $depth | Gmagick',
\ 'Gmagick::setimagedispose(': 'int $disposeType | Gmagick',
\ 'Gmagick::setimagefilename(': 'string $filename | Gmagick',
\ 'Gmagick::setimageformat(': 'string $imageFormat | Gmagick',
\ 'Gmagick::setimagegamma(': 'float $gamma | Gmagick',
\ 'Gmagick::setimagegreenprimary(': 'float $x, float $y | Gmagick',
\ 'Gmagick::setimageindex(': 'int $index | Gmagick',
\ 'Gmagick::setimageinterlacescheme(': 'int $interlace | Gmagick',
\ 'Gmagick::setimageiterations(': 'int $iterations | Gmagick',
\ 'Gmagick::setimageprofile(': 'string $name, string $profile | Gmagick',
\ 'Gmagick::setimageredprimary(': 'float $x, float $y | Gmagick',
\ 'Gmagick::setimagerenderingintent(': 'int $rendering_intent | Gmagick',
\ 'Gmagick::setimageresolution(': 'float $xResolution, float $yResolution | Gmagick',
\ 'Gmagick::setimagescene(': 'int $scene | Gmagick',
\ 'Gmagick::setimagetype(': 'int $imgType | Gmagick',
\ 'Gmagick::setimageunits(': 'int $resolution | Gmagick',
\ 'Gmagick::setimagewhitepoint(': 'float $x, float $y | Gmagick',
\ 'Gmagick::setsamplingfactors(': 'array $factors | Gmagick',
\ 'Gmagick::setsize(': 'int $columns, int $rows | Gmagick',
\ 'Gmagick::shearimage(': 'mixed $color, float $xShear, float $yShear | Gmagick',
\ 'Gmagick::solarizeimage(': 'int $threshold | Gmagick',
\ 'Gmagick::spreadimage(': 'float $radius | Gmagick',
\ 'Gmagick::stripimage(': 'void | Gmagick',
\ 'Gmagick::swirlimage(': 'float $degrees | Gmagick',
\ 'Gmagick::thumbnailimage(': 'int $width, int $height [, bool $fit = false] | Gmagick',
\ 'Gmagick::trimimage(': 'float $fuzz | Gmagick',
\ 'Gmagick::write(': 'string $filename | void',
\ 'Gmagick::writeimage(': 'string $filename [, bool $all_frames = false] | Gmagick',
\ 'GmagickDraw::annotate(': 'float $x, float $y, string $text | GmagickDraw',
\ 'GmagickDraw::arc(': 'float $sx, float $sy, float $ex, float $ey, float $sd, float $ed | GmagickDraw',
\ 'GmagickDraw::bezier(': 'array $coordinate_array | GmagickDraw',
\ 'GmagickDraw::ellipse(': 'float $ox, float $oy, float $rx, float $ry, float $start, float $end | GmagickDraw',
\ 'GmagickDraw::getfillcolor(': 'void | void',
\ 'GmagickDraw::getfillopacity(': 'void | float',
\ 'GmagickDraw::getfont(': 'void | string',
\ 'GmagickDraw::getfontsize(': 'void | float',
\ 'GmagickDraw::getfontstyle(': 'void | int',
\ 'GmagickDraw::getfontweight(': 'void | int',
\ 'GmagickDraw::getstrokecolor(': 'void | void',
\ 'GmagickDraw::getstrokeopacity(': 'void | float',
\ 'GmagickDraw::getstrokewidth(': 'void | float',
\ 'GmagickDraw::gettextdecoration(': 'void | int',
\ 'GmagickDraw::gettextencoding(': 'void | string',
\ 'GmagickDraw::line(': 'float $sx, float $sy, float $ex, float $ey | GmagickDraw',
\ 'GmagickDraw::point(': 'float $x, float $y | GmagickDraw',
\ 'GmagickDraw::polygon(': 'array $coordinates | GmagickDraw',
\ 'GmagickDraw::polyline(': 'array $coordinate_array | GmagickDraw',
\ 'GmagickDraw::rectangle(': 'float $x1, float $y1, float $x2, float $y2 | GmagickDraw',
\ 'GmagickDraw::rotate(': 'float $degrees | GmagickDraw',
\ 'GmagickDraw::roundrectangle(': 'float $x1, float $y1, float $x2, float $y2, float $rx, float $ry | GmagickDraw',
\ 'GmagickDraw::scale(': 'float $x, float $y | GmagickDraw',
\ 'GmagickDraw::setfillcolor(': 'string $color | GmagickDraw',
\ 'GmagickDraw::setfillopacity(': 'float $fill_opacity | GmagickDraw',
\ 'GmagickDraw::setfont(': 'string $font | GmagickDraw',
\ 'GmagickDraw::setfontsize(': 'float $pointsize | GmagickDraw',
\ 'GmagickDraw::setfontstyle(': 'int $style | GmagickDraw',
\ 'GmagickDraw::setfontweight(': 'int $weight | GmagickDraw',
\ 'GmagickDraw::setstrokecolor(': 'GmagickPixel $color | GmagickDraw',
\ 'GmagickDraw::setstrokeopacity(': 'float $stroke_opacity | GmagickDraw',
\ 'GmagickDraw::setstrokewidth(': 'float $width | GmagickDraw',
\ 'GmagickDraw::settextdecoration(': 'int $decoration | GmagickDraw',
\ 'GmagickDraw::settextencoding(': 'string $encoding | GmagickDraw',
\ 'GmagickPixel::__construct(': '[ string $color]',
\ 'GmagickPixel::getcolor(': '[ bool $as_array [, bool $normalize_array]] | mixed',
\ 'GmagickPixel::getcolorcount(': 'void | int',
\ 'GmagickPixel::getcolorvalue(': 'int $color | float',
\ 'GmagickPixel::setcolor(': 'string $color | GmagickPixel',
\ 'GmagickPixel::setcolorvalue(': 'int $color, float $value | GmagickPixel',
\ 'HaruAnnotation::setBorderStyle(': 'float $width, int $dash_on, int $dash_off | bool',
\ 'HaruAnnotation::setHighlightMode(': 'int $mode | bool',
\ 'HaruAnnotation::setIcon(': 'int $icon | bool',
\ 'HaruAnnotation::setOpened(': 'bool $opened | bool',
\ 'HaruDestination::setFit(': 'void | bool',
\ 'HaruDestination::setFitB(': 'void | bool',
\ 'HaruDestination::setFitBH(': 'float $top | bool',
\ 'HaruDestination::setFitBV(': 'float $left | bool',
\ 'HaruDestination::setFitH(': 'float $top | bool',
\ 'HaruDestination::setFitR(': 'float $left, float $bottom, float $right, float $top | bool',
\ 'HaruDestination::setFitV(': 'float $left | bool',
\ 'HaruDestination::setXYZ(': 'float $left, float $top, float $zoom | bool',
\ 'HaruDoc::addPage(': 'void | object',
\ 'HaruDoc::addPageLabel(': 'int $first_page, int $style, int $first_num [, string $prefix = ""] | bool',
\ 'HaruDoc::__construct(': 'void',
\ 'HaruDoc::createOutline(': 'string $title [, object $parent_outline [, object $encoder]] | object',
\ 'HaruDoc::getCurrentEncoder(': 'void | object',
\ 'HaruDoc::getCurrentPage(': 'void | object',
\ 'HaruDoc::getEncoder(': 'string $encoding | object',
\ 'HaruDoc::getFont(': 'string $fontname [, string $encoding] | object',
\ 'HaruDoc::getInfoAttr(': 'int $type | string',
\ 'HaruDoc::getPageLayout(': 'void | int',
\ 'HaruDoc::getPageMode(': 'void | int',
\ 'HaruDoc::getStreamSize(': 'void | int',
\ 'HaruDoc::insertPage(': 'object $page | object',
\ 'HaruDoc::loadJPEG(': 'string $filename | object',
\ 'HaruDoc::loadPNG(': 'string $filename [, bool $deferred = false] | object',
\ 'HaruDoc::loadRaw(': 'string $filename, int $width, int $height, int $color_space | object',
\ 'HaruDoc::loadTTC(': 'string $fontfile, int $index [, bool $embed = false] | string',
\ 'HaruDoc::loadTTF(': 'string $fontfile [, bool $embed = false] | string',
\ 'HaruDoc::loadType1(': 'string $afmfile [, string $pfmfile] | string',
\ 'HaruDoc::output(': 'void | bool',
\ 'HaruDoc::readFromStream(': 'int $bytes | string',
\ 'HaruDoc::resetError(': 'void | bool',
\ 'HaruDoc::resetStream(': 'void | bool',
\ 'HaruDoc::save(': 'string $file | bool',
\ 'HaruDoc::saveToStream(': 'void | bool',
\ 'HaruDoc::setCompressionMode(': 'int $mode | bool',
\ 'HaruDoc::setCurrentEncoder(': 'string $encoding | bool',
\ 'HaruDoc::setEncryptionMode(': 'int $mode [, int $key_len = 5] | bool',
\ 'HaruDoc::setInfoAttr(': 'int $type, string $info | bool',
\ 'HaruDoc::setInfoDateAttr(': 'int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min | bool',
\ 'HaruDoc::setOpenAction(': 'object $destination | bool',
\ 'HaruDoc::setPageLayout(': 'int $layout | bool',
\ 'HaruDoc::setPageMode(': 'int $mode | bool',
\ 'HaruDoc::setPagesConfiguration(': 'int $page_per_pages | bool',
\ 'HaruDoc::setPassword(': 'string $owner_password, string $user_password | bool',
\ 'HaruDoc::setPermission(': 'int $permission | bool',
\ 'HaruDoc::useCNSEncodings(': 'void | bool',
\ 'HaruDoc::useCNSFonts(': 'void | bool',
\ 'HaruDoc::useCNTEncodings(': 'void | bool',
\ 'HaruDoc::useCNTFonts(': 'void | bool',
\ 'HaruDoc::useJPEncodings(': 'void | bool',
\ 'HaruDoc::useJPFonts(': 'void | bool',
\ 'HaruDoc::useKREncodings(': 'void | bool',
\ 'HaruDoc::useKRFonts(': 'void | bool',
\ 'HaruEncoder::getByteType(': 'string $text, int $index | int',
\ 'HaruEncoder::getType(': 'void | int',
\ 'HaruEncoder::getUnicode(': 'int $character | int',
\ 'HaruEncoder::getWritingMode(': 'void | int',
\ 'HaruException::getMessage(': 'void | string',
\ 'HaruException::getPrevious(': 'void | Exception',
\ 'HaruException::getCode(': 'void | mixed',
\ 'HaruException::getFile(': 'void | string',
\ 'HaruException::getLine(': 'void | int',
\ 'HaruException::getTrace(': 'void | array',
\ 'HaruException::getTraceAsString(': 'void | string',
\ 'HaruException::__toString(': 'void | string',
\ 'HaruException::__clone(': 'void | void',
\ 'HaruFont::getAscent(': 'void | int',
\ 'HaruFont::getCapHeight(': 'void | int',
\ 'HaruFont::getDescent(': 'void | int',
\ 'HaruFont::getEncodingName(': 'void | string',
\ 'HaruFont::getFontName(': 'void | string',
\ 'HaruFont::getTextWidth(': 'string $text | array',
\ 'HaruFont::getUnicodeWidth(': 'int $character | int',
\ 'HaruFont::getXHeight(': 'void | int',
\ 'HaruFont::measureText(': 'string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = false] | int',
\ 'HaruImage::getBitsPerComponent(': 'void | int',
\ 'HaruImage::getColorSpace(': 'void | string',
\ 'HaruImage::getHeight(': 'void | int',
\ 'HaruImage::getSize(': 'void | array',
\ 'HaruImage::getWidth(': 'void | int',
\ 'HaruImage::setColorMask(': 'int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax | bool',
\ 'HaruImage::setMaskImage(': 'object $mask_image | bool',
\ 'HaruOutline::setDestination(': 'object $destination | bool',
\ 'HaruOutline::setOpened(': 'bool $opened | bool',
\ 'HaruPage::arc(': 'float $x, float $y, float $ray, float $ang1, float $ang2 | bool',
\ 'HaruPage::beginText(': 'void | bool',
\ 'HaruPage::circle(': 'float $x, float $y, float $ray | bool',
\ 'HaruPage::closePath(': 'void | bool',
\ 'HaruPage::concat(': 'float $a, float $b, float $c, float $d, float $x, float $y | bool',
\ 'HaruPage::createDestination(': 'void | object',
\ 'HaruPage::createLinkAnnotation(': 'array $rectangle, object $destination | object',
\ 'HaruPage::createTextAnnotation(': 'array $rectangle, string $text [, object $encoder] | object',
\ 'HaruPage::createURLAnnotation(': 'array $rectangle, string $url | object',
\ 'HaruPage::curveTo2(': 'float $x2, float $y2, float $x3, float $y3 | bool',
\ 'HaruPage::curveTo3(': 'float $x1, float $y1, float $x3, float $y3 | bool',
\ 'HaruPage::curveTo(': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool',
\ 'HaruPage::drawImage(': 'object $image, float $x, float $y, float $width, float $height | bool',
\ 'HaruPage::ellipse(': 'float $x, float $y, float $xray, float $yray | bool',
\ 'HaruPage::endPath(': 'void | bool',
\ 'HaruPage::endText(': 'void | bool',
\ 'HaruPage::eofill(': 'void | bool',
\ 'HaruPage::eoFillStroke(': '[ bool $close_path = false] | bool',
\ 'HaruPage::fill(': 'void | bool',
\ 'HaruPage::fillStroke(': '[ bool $close_path = false] | bool',
\ 'HaruPage::getCharSpace(': 'void | float',
\ 'HaruPage::getCMYKFill(': 'void | array',
\ 'HaruPage::getCMYKStroke(': 'void | array',
\ 'HaruPage::getCurrentFont(': 'void | object',
\ 'HaruPage::getCurrentFontSize(': 'void | float',
\ 'HaruPage::getCurrentPos(': 'void | array',
\ 'HaruPage::getCurrentTextPos(': 'void | array',
\ 'HaruPage::getDash(': 'void | array',
\ 'HaruPage::getFillingColorSpace(': 'void | int',
\ 'HaruPage::getFlatness(': 'void | float',
\ 'HaruPage::getGMode(': 'void | int',
\ 'HaruPage::getGrayFill(': 'void | float',
\ 'HaruPage::getGrayStroke(': 'void | float',
\ 'HaruPage::getHeight(': 'void | float',
\ 'HaruPage::getHorizontalScaling(': 'void | float',
\ 'HaruPage::getLineCap(': 'void | int',
\ 'HaruPage::getLineJoin(': 'void | int',
\ 'HaruPage::getLineWidth(': 'void | float',
\ 'HaruPage::getMiterLimit(': 'void | float',
\ 'HaruPage::getRGBFill(': 'void | array',
\ 'HaruPage::getRGBStroke(': 'void | array',
\ 'HaruPage::getStrokingColorSpace(': 'void | int',
\ 'HaruPage::getTextLeading(': 'void | float',
\ 'HaruPage::getTextMatrix(': 'void | array',
\ 'HaruPage::getTextRenderingMode(': 'void | int',
\ 'HaruPage::getTextRise(': 'void | float',
\ 'HaruPage::getTextWidth(': 'string $text | float',
\ 'HaruPage::getTransMatrix(': 'void | array',
\ 'HaruPage::getWidth(': 'void | float',
\ 'HaruPage::getWordSpace(': 'void | float',
\ 'HaruPage::lineTo(': 'float $x, float $y | bool',
\ 'HaruPage::measureText(': 'string $text, float $width [, bool $wordwrap = false] | int',
\ 'HaruPage::moveTextPos(': 'float $x, float $y [, bool $set_leading = false] | bool',
\ 'HaruPage::moveTo(': 'float $x, float $y | bool',
\ 'HaruPage::moveToNextLine(': 'void | bool',
\ 'HaruPage::rectangle(': 'float $x, float $y, float $width, float $height | bool',
\ 'HaruPage::setCharSpace(': 'float $char_space | bool',
\ 'HaruPage::setCMYKFill(': 'float $c, float $m, float $y, float $k | bool',
\ 'HaruPage::setCMYKStroke(': 'float $c, float $m, float $y, float $k | bool',
\ 'HaruPage::setDash(': 'array $pattern, int $phase | bool',
\ 'HaruPage::setFlatness(': 'float $flatness | bool',
\ 'HaruPage::setFontAndSize(': 'object $font, float $size | bool',
\ 'HaruPage::setGrayFill(': 'float $value | bool',
\ 'HaruPage::setGrayStroke(': 'float $value | bool',
\ 'HaruPage::setHeight(': 'float $height | bool',
\ 'HaruPage::setHorizontalScaling(': 'float $scaling | bool',
\ 'HaruPage::setLineCap(': 'int $cap | bool',
\ 'HaruPage::setLineJoin(': 'int $join | bool',
\ 'HaruPage::setLineWidth(': 'float $width | bool',
\ 'HaruPage::setMiterLimit(': 'float $limit | bool',
\ 'HaruPage::setRGBFill(': 'float $r, float $g, float $b | bool',
\ 'HaruPage::setRGBStroke(': 'float $r, float $g, float $b | bool',
\ 'HaruPage::setRotate(': 'int $angle | bool',
\ 'HaruPage::setSize(': 'int $size, int $direction | bool',
\ 'HaruPage::setSlideShow(': 'int $type, float $disp_time, float $trans_time | bool',
\ 'HaruPage::setTextLeading(': 'float $text_leading | bool',
\ 'HaruPage::setTextMatrix(': 'float $a, float $b, float $c, float $d, float $x, float $y | bool',
\ 'HaruPage::setTextRenderingMode(': 'int $mode | bool',
\ 'HaruPage::setTextRise(': 'float $rise | bool',
\ 'HaruPage::setWidth(': 'float $width | bool',
\ 'HaruPage::setWordSpace(': 'float $word_space | bool',
\ 'HaruPage::showText(': 'string $text | bool',
\ 'HaruPage::showTextNextLine(': 'string $text [, float $word_space = 0 [, float $char_space = 0]] | bool',
\ 'HaruPage::stroke(': '[ bool $close_path = false] | bool',
\ 'HaruPage::textOut(': 'float $x, float $y, string $text | bool',
\ 'HaruPage::textRect(': 'float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT] | bool',
\ 'HttpDeflateStream::__construct(': '[ int $flags = 0]',
\ 'HttpDeflateStream::factory(': '[ int $flags = 0 [, string $class_name = "HttpDeflateStream"]] | HttpDeflateStream',
\ 'HttpDeflateStream::finish(': '[ string $data] | string',
\ 'HttpDeflateStream::flush(': '[ string $data] | string',
\ 'HttpDeflateStream::update(': 'string $data | string',
\ 'HttpInflateStream::__construct(': '[ int $flags = 0]',
\ 'HttpInflateStream::factory(': '[ int $flags = 0 [, string $class_name = "HttpInflateStream"]] | HttpInflateStream',
\ 'HttpInflateStream::finish(': '[ string $data] | string',
\ 'HttpInflateStream::flush(': '[ string $data] | string',
\ 'HttpInflateStream::update(': 'string $data | string',
\ 'HttpMessage::addHeaders(': 'array $headers [, bool $append = false] | void',
\ 'HttpMessage::__construct(': '[ string $message]',
\ 'HttpMessage::detach(': 'void | HttpMessage',
\ 'HttpMessage::factory(': '[ string $raw_message [, string $class_name = "HttpMessage"]] | HttpMessage',
\ 'HttpMessage::fromEnv(': 'int $message_type [, string $class_name = "HttpMessage"] | HttpMessage',
\ 'HttpMessage::fromString(': '[ string $raw_message [, string $class_name = "HttpMessage"]] | HttpMessage',
\ 'HttpMessage::getBody(': 'void | string',
\ 'HttpMessage::getHeader(': 'string $header | string',
\ 'HttpMessage::getHeaders(': 'void | array',
\ 'HttpMessage::getHttpVersion(': 'void | string',
\ 'HttpMessage::getParentMessage(': 'void | HttpMessage',
\ 'HttpMessage::getRequestMethod(': 'void | string',
\ 'HttpMessage::getRequestUrl(': 'void | string',
\ 'HttpMessage::getResponseCode(': 'void | int',
\ 'HttpMessage::getResponseStatus(': 'void | string',
\ 'HttpMessage::getType(': 'void | int',
\ 'HttpMessage::guessContentType(': 'string $magic_file [, int $magic_mode = MAGIC_MIME] | string',
\ 'HttpMessage::prepend(': 'HttpMessage $message [, bool $top = true] | void',
\ 'HttpMessage::reverse(': 'void | HttpMessage',
\ 'HttpMessage::send(': 'void | bool',
\ 'HttpMessage::setBody(': 'string $body | void',
\ 'HttpMessage::setHeaders(': 'array $headers | void',
\ 'HttpMessage::setHttpVersion(': 'string $version | bool',
\ 'HttpMessage::setRequestMethod(': 'string $method | bool',
\ 'HttpMessage::setRequestUrl(': 'string $url | bool',
\ 'HttpMessage::setResponseCode(': 'int $code | bool',
\ 'HttpMessage::setResponseStatus(': 'string $status | bool',
\ 'HttpMessage::setType(': 'int $type | void',
\ 'HttpMessage::toMessageTypeObject(': 'void | HttpRequest|HttpResponse',
\ 'HttpMessage::toString(': '[ bool $include_parent = false] | string',
\ 'HttpQueryString::__construct(': '[ bool $global = true [, mixed $add]]',
\ 'HttpQueryString::get(': '[ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false]]]] | mixed',
\ 'HttpQueryString::mod(': 'mixed $params | HttpQueryString',
\ 'HttpQueryString::set(': 'mixed $params | string',
\ 'HttpQueryString::singleton(': '[ bool $global = true] | HttpQueryString',
\ 'HttpQueryString::toArray(': 'void | array',
\ 'HttpQueryString::toString(': 'void | string',
\ 'HttpQueryString::xlate(': 'string $ie, string $oe | bool',
\ 'HttpRequest::addCookies(': 'array $cookies | bool',
\ 'HttpRequest::addHeaders(': 'array $headers | bool',
\ 'HttpRequest::addPostFields(': 'array $post_data | bool',
\ 'HttpRequest::addPostFile(': 'string $name, string $file [, string $content_type = "application/x-octetstream"] | bool',
\ 'HttpRequest::addPutData(': 'string $put_data | bool',
\ 'HttpRequest::addQueryData(': 'array $query_params | bool',
\ 'HttpRequest::addRawPostData(': 'string $raw_post_data | bool',
\ 'HttpRequest::addSslOptions(': 'array $options | bool',
\ 'HttpRequest::clearHistory(': 'void | void',
\ 'HttpRequest::__construct(': '[ string $url [, int $request_method = HTTP_METH_GET [, array $options]]]',
\ 'HttpRequest::enableCookies(': 'void | bool',
\ 'HttpRequest::getContentType(': 'void | string',
\ 'HttpRequest::getCookies(': 'void | array',
\ 'HttpRequest::getHeaders(': 'void | array',
\ 'HttpRequest::getHistory(': 'void | HttpMessage',
\ 'HttpRequest::getMethod(': 'void | int',
\ 'HttpRequest::getOptions(': 'void | array',
\ 'HttpRequest::getPostFields(': 'void | array',
\ 'HttpRequest::getPostFiles(': 'void | array',
\ 'HttpRequest::getPutData(': 'void | string',
\ 'HttpRequest::getPutFile(': 'void | string',
\ 'HttpRequest::getQueryData(': 'void | string',
\ 'HttpRequest::getRawPostData(': 'void | string',
\ 'HttpRequest::getRawRequestMessage(': 'void | string',
\ 'HttpRequest::getRawResponseMessage(': 'void | string',
\ 'HttpRequest::getRequestMessage(': 'void | HttpMessage',
\ 'HttpRequest::getResponseBody(': 'void | string',
\ 'HttpRequest::getResponseCode(': 'void | int',
\ 'HttpRequest::getResponseCookies(': '[ int $flags = 0 [, array $allowed_extras]] | array',
\ 'HttpRequest::getResponseData(': 'void | array',
\ 'HttpRequest::getResponseHeader(': '[ string $name] | mixed',
\ 'HttpRequest::getResponseInfo(': '[ string $name] | mixed',
\ 'HttpRequest::getResponseMessage(': 'void | HttpMessage',
\ 'HttpRequest::getResponseStatus(': 'void | string',
\ 'HttpRequest::getSslOptions(': 'void | array',
\ 'HttpRequest::getUrl(': 'void | string',
\ 'HttpRequest::resetCookies(': '[ bool $session_only = false] | bool',
\ 'HttpRequest::send(': 'void | HttpMessage',
\ 'HttpRequest::setBody(': '[ string $request_body_data] | bool',
\ 'HttpRequest::setContentType(': 'string $content_type | bool',
\ 'HttpRequest::setCookies(': '[ array $cookies] | bool',
\ 'HttpRequest::setHeaders(': '[ array $headers] | bool',
\ 'HttpRequest::setMethod(': 'int $request_method | bool',
\ 'HttpRequest::setOptions(': '[ array $options] | bool',
\ 'HttpRequest::setPostFields(': 'array $post_data | bool',
\ 'HttpRequest::setPostFiles(': 'array $post_files | bool',
\ 'HttpRequest::setPutData(': '[ string $put_data] | bool',
\ 'HttpRequest::setPutFile(': '[ string $file = ""] | bool',
\ 'HttpRequest::setQueryData(': 'mixed $query_data | bool',
\ 'HttpRequest::setRawPostData(': '[ string $raw_post_data] | bool',
\ 'HttpRequest::setSslOptions(': '[ array $options] | bool',
\ 'HttpRequest::setUrl(': 'string $url | bool',
\ 'HttpRequestPool::attach(': 'HttpRequest $request | bool',
\ 'HttpRequestPool::__construct(': '[ HttpRequest $request [, HttpRequest $...]]',
\ 'HttpRequestPool::__destruct(': 'void | void',
\ 'HttpRequestPool::detach(': 'HttpRequest $request | bool',
\ 'HttpRequestPool::getAttachedRequests(': 'void | array',
\ 'HttpRequestPool::getFinishedRequests(': 'void | array',
\ 'HttpRequestPool::reset(': 'void | void',
\ 'HttpRequestPool::send(': 'void | bool',
\ 'HttpRequestPool::socketPerform(': 'void | bool',
\ 'HttpRequestPool::socketSelect(': '[ float $timeout = 0] | bool',
\ 'HttpResponse::capture(': 'void | void',
\ 'HttpResponse::getBufferSize(': 'void | int',
\ 'HttpResponse::getCache(': 'void | bool',
\ 'HttpResponse::getCacheControl(': 'void | string',
\ 'HttpResponse::getContentDisposition(': 'void | string',
\ 'HttpResponse::getContentType(': 'void | string',
\ 'HttpResponse::getData(': 'void | string',
\ 'HttpResponse::getETag(': 'void | string',
\ 'HttpResponse::getFile(': 'void | string',
\ 'HttpResponse::getGzip(': 'void | bool',
\ 'HttpResponse::getHeader(': '[ string $name] | mixed',
\ 'HttpResponse::getLastModified(': 'void | int',
\ 'HttpResponse::getRequestBody(': 'void | string',
\ 'HttpResponse::getRequestBodyStream(': 'void | resource',
\ 'HttpResponse::getRequestHeaders(': 'void | array',
\ 'HttpResponse::getStream(': 'void | resource',
\ 'HttpResponse::getThrottleDelay(': 'void | float',
\ 'HttpResponse::guessContentType(': 'string $magic_file [, int $magic_mode = MAGIC_MIME] | string',
\ 'HttpResponse::redirect(': '[ string $url [, array $params [, bool $session = false [, int $status]]]] | void',
\ 'HttpResponse::send(': '[ bool $clean_ob = true] | bool',
\ 'HttpResponse::setBufferSize(': 'int $bytes | bool',
\ 'HttpResponse::setCache(': 'bool $cache | bool',
\ 'HttpResponse::setCacheControl(': 'string $control [, int $max_age = 0 [, bool $must_revalidate = true]] | bool',
\ 'HttpResponse::setContentDisposition(': 'string $filename [, bool $inline = false] | bool',
\ 'HttpResponse::setContentType(': 'string $content_type | bool',
\ 'HttpResponse::setData(': 'mixed $data | bool',
\ 'HttpResponse::setETag(': 'string $etag | bool',
\ 'HttpResponse::setFile(': 'string $file | bool',
\ 'HttpResponse::setGzip(': 'bool $gzip | bool',
\ 'HttpResponse::setHeader(': 'string $name [, mixed $value [, bool $replace = true]] | bool',
\ 'HttpResponse::setLastModified(': 'int $timestamp | bool',
\ 'HttpResponse::setStream(': 'resource $stream | bool',
\ 'HttpResponse::setThrottleDelay(': 'float $seconds | bool',
\ 'HttpResponse::status(': 'int $status | bool',
\ 'Imagick::adaptiveBlurImage(': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::adaptiveResizeImage(': 'int $columns, int $rows [, bool $bestfit = false] | bool',
\ 'Imagick::adaptiveSharpenImage(': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::adaptiveThresholdImage(': 'int $width, int $height, int $offset | bool',
\ 'Imagick::addImage(': 'Imagick $source | bool',
\ 'Imagick::addNoiseImage(': 'int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::affineTransformImage(': 'ImagickDraw $matrix | bool',
\ 'Imagick::animateImages(': 'string $x_server | bool',
\ 'Imagick::annotateImage(': 'ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text | bool',
\ 'Imagick::appendImages(': '[ bool $stack = false] | Imagick',
\ 'Imagick::averageImages(': 'void | Imagick',
\ 'Imagick::blackThresholdImage(': 'mixed $threshold | bool',
\ 'Imagick::blurImage(': 'float $radius, float $sigma [, int $channel] | bool',
\ 'Imagick::borderImage(': 'mixed $bordercolor, int $width, int $height | bool',
\ 'Imagick::charcoalImage(': 'float $radius, float $sigma | bool',
\ 'Imagick::chopImage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::clear(': 'void | bool',
\ 'Imagick::clipImage(': 'void | bool',
\ 'Imagick::clipPathImage(': 'string $pathname, bool $inside | bool',
\ 'Imagick::clone(': 'void | Imagick',
\ 'Imagick::clutImage(': 'Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::coalesceImages(': 'void | Imagick',
\ 'Imagick::colorFloodfillImage(': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y | bool',
\ 'Imagick::colorizeImage(': 'mixed $colorize, mixed $opacity | bool',
\ 'Imagick::combineImages(': 'int $channelType | Imagick',
\ 'Imagick::commentImage(': 'string $comment | bool',
\ 'Imagick::compareImageChannels(': 'Imagick $image, int $channelType, int $metricType | array',
\ 'Imagick::compareImageLayers(': 'int $method | Imagick',
\ 'Imagick::compareImages(': 'Imagick $compare, int $metric | array',
\ 'Imagick::compositeImage(': 'Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::__construct(': 'mixed $files',
\ 'Imagick::contrastImage(': 'bool $sharpen | bool',
\ 'Imagick::contrastStretchImage(': 'float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::convolveImage(': 'array $kernel [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::cropImage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::cropThumbnailImage(': 'int $width, int $height | bool',
\ 'Imagick::current(': 'void | Imagick',
\ 'Imagick::cycleColormapImage(': 'int $displace | bool',
\ 'Imagick::decipherImage(': 'string $passphrase | bool',
\ 'Imagick::deconstructImages(': 'void | Imagick',
\ 'Imagick::deleteImageArtifact(': 'string $artifact | bool',
\ 'Imagick::deskewImage(': 'float $threshold | bool',
\ 'Imagick::despeckleImage(': 'void | bool',
\ 'Imagick::destroy(': 'void | bool',
\ 'Imagick::displayImage(': 'string $servername | bool',
\ 'Imagick::displayImages(': 'string $servername | bool',
\ 'Imagick::distortImage(': 'int $method, array $arguments, bool $bestfit | bool',
\ 'Imagick::drawImage(': 'ImagickDraw $draw | bool',
\ 'Imagick::edgeImage(': 'float $radius | bool',
\ 'Imagick::embossImage(': 'float $radius, float $sigma | bool',
\ 'Imagick::encipherImage(': 'string $passphrase | bool',
\ 'Imagick::enhanceImage(': 'void | bool',
\ 'Imagick::equalizeImage(': 'void | bool',
\ 'Imagick::evaluateImage(': 'int $op, float $constant [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::exportImagePixels(': 'int $x, int $y, int $width, int $height, string $map, int $STORAGE | array',
\ 'Imagick::extentImage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::flattenImages(': 'void | Imagick',
\ 'Imagick::flipImage(': 'void | bool',
\ 'Imagick::floodFillPaintImage(': 'mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::flopImage(': 'void | bool',
\ 'Imagick::frameImage(': 'mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel | bool',
\ 'Imagick::functionImage(': 'int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::fxImage(': 'string $expression [, int $channel = Imagick::CHANNEL_ALL] | Imagick',
\ 'Imagick::gammaImage(': 'float $gamma [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::gaussianBlurImage(': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::getColorspace(': 'void | int',
\ 'Imagick::getCompression(': 'void | int',
\ 'Imagick::getCompressionQuality(': 'void | int',
\ 'Imagick::getCopyright(': 'void | string',
\ 'Imagick::getFilename(': 'void | string',
\ 'Imagick::getFont(': 'void | string',
\ 'Imagick::getFormat(': 'void | string',
\ 'Imagick::getGravity(': 'void | int',
\ 'Imagick::getHomeURL(': 'void | string',
\ 'Imagick::getImage(': 'void | Imagick',
\ 'Imagick::getImageAlphaChannel(': 'void | int',
\ 'Imagick::getImageArtifact(': 'string $artifact | string',
\ 'Imagick::getImageBackgroundColor(': 'void | ImagickPixel',
\ 'Imagick::getImageBlob(': 'void | string',
\ 'Imagick::getImageBluePrimary(': 'void | array',
\ 'Imagick::getImageBorderColor(': 'void | ImagickPixel',
\ 'Imagick::getImageChannelDepth(': 'int $channel | int',
\ 'Imagick::getImageChannelDistortion(': 'Imagick $reference, int $channel, int $metric | float',
\ 'Imagick::getImageChannelDistortions(': 'Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT] | float',
\ 'Imagick::getImageChannelExtrema(': 'int $channel | array',
\ 'Imagick::getImageChannelKurtosis(': '[ int $channel = Imagick::CHANNEL_DEFAULT] | array',
\ 'Imagick::getImageChannelMean(': 'int $channel | array',
\ 'Imagick::getImageChannelRange(': 'int $channel | array',
\ 'Imagick::getImageChannelStatistics(': 'void | array',
\ 'Imagick::getImageClipMask(': 'void | Imagick',
\ 'Imagick::getImageColormapColor(': 'int $index | ImagickPixel',
\ 'Imagick::getImageColors(': 'void | int',
\ 'Imagick::getImageColorspace(': 'void | int',
\ 'Imagick::getImageCompose(': 'void | int',
\ 'Imagick::getImageCompression(': 'void | int',
\ 'Imagick::getImageDelay(': 'void | int',
\ 'Imagick::getImageDepth(': 'void | int',
\ 'Imagick::getImageDispose(': 'void | int',
\ 'Imagick::getImageDistortion(': 'MagickWand $reference, int $metric | float',
\ 'Imagick::getImageExtrema(': 'void | array',
\ 'Imagick::getImageFilename(': 'void | string',
\ 'Imagick::getImageFormat(': 'void | string',
\ 'Imagick::getImageGamma(': 'void | float',
\ 'Imagick::getImageGeometry(': 'void | array',
\ 'Imagick::getImageGravity(': 'void | int',
\ 'Imagick::getImageGreenPrimary(': 'void | array',
\ 'Imagick::getImageHeight(': 'void | int',
\ 'Imagick::getImageHistogram(': 'void | array',
\ 'Imagick::getImageIndex(': 'void | int',
\ 'Imagick::getImageInterlaceScheme(': 'void | int',
\ 'Imagick::getImageInterpolateMethod(': 'void | int',
\ 'Imagick::getImageIterations(': 'void | int',
\ 'Imagick::getImageLength(': 'void | int',
\ 'Imagick::getImageMagickLicense(': 'void | string',
\ 'Imagick::getImageMatte(': 'void | bool',
\ 'Imagick::getImageMatteColor(': 'void | ImagickPixel',
\ 'Imagick::getImageOrientation(': 'void | int',
\ 'Imagick::getImagePage(': 'void | array',
\ 'Imagick::getImagePixelColor(': 'int $x, int $y | ImagickPixel',
\ 'Imagick::getImageProfile(': 'string $name | string',
\ 'Imagick::getImageProfiles(': '[ string $pattern = "*" [, bool $only_names = true]] | array',
\ 'Imagick::getImageProperties(': '[ string $pattern = "*" [, bool $only_names = true]] | array',
\ 'Imagick::getImageProperty(': 'string $name | string',
\ 'Imagick::getImageRedPrimary(': 'void | array',
\ 'Imagick::getImageRegion(': 'int $width, int $height, int $x, int $y | Imagick',
\ 'Imagick::getImageRenderingIntent(': 'void | int',
\ 'Imagick::getImageResolution(': 'void | array',
\ 'Imagick::getImagesBlob(': 'void | string',
\ 'Imagick::getImageScene(': 'void | int',
\ 'Imagick::getImageSignature(': 'void | string',
\ 'Imagick::getImageSize(': 'void | int',
\ 'Imagick::getImageTicksPerSecond(': 'void | int',
\ 'Imagick::getImageTotalInkDensity(': 'void | float',
\ 'Imagick::getImageType(': 'void | int',
\ 'Imagick::getImageUnits(': 'void | int',
\ 'Imagick::getImageVirtualPixelMethod(': 'void | int',
\ 'Imagick::getImageWhitePoint(': 'void | array',
\ 'Imagick::getImageWidth(': 'void | int',
\ 'Imagick::getInterlaceScheme(': 'void | int',
\ 'Imagick::getIteratorIndex(': 'void | int',
\ 'Imagick::getNumberImages(': 'void | int',
\ 'Imagick::getOption(': 'string $key | string',
\ 'Imagick::getPackageName(': 'void | string',
\ 'Imagick::getPage(': 'void | array',
\ 'Imagick::getPixelIterator(': 'void | ImagickPixelIterator',
\ 'Imagick::getPixelRegionIterator(': 'int $x, int $y, int $columns, int $rows | ImagickPixelIterator',
\ 'Imagick::getPointSize(': 'void | float',
\ 'Imagick::getQuantumDepth(': 'void | array',
\ 'Imagick::getQuantumRange(': 'void | array',
\ 'Imagick::getReleaseDate(': 'void | string',
\ 'Imagick::getResource(': 'int $type | int',
\ 'Imagick::getResourceLimit(': 'int $type | int',
\ 'Imagick::getSamplingFactors(': 'void | array',
\ 'Imagick::getSize(': 'void | array',
\ 'Imagick::getSizeOffset(': 'void | int',
\ 'Imagick::getVersion(': 'void | array',
\ 'Imagick::haldClutImage(': 'Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::hasNextImage(': 'void | bool',
\ 'Imagick::hasPreviousImage(': 'void | bool',
\ 'Imagick::identifyImage(': '[ bool $appendRawOutput = false] | array',
\ 'Imagick::implodeImage(': 'float $radius | bool',
\ 'Imagick::importImagePixels(': 'int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels | bool',
\ 'Imagick::labelImage(': 'string $label | bool',
\ 'Imagick::levelImage(': 'float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::linearStretchImage(': 'float $blackPoint, float $whitePoint | bool',
\ 'Imagick::liquidRescaleImage(': 'int $width, int $height, float $delta_x, float $rigidity | bool',
\ 'Imagick::magnifyImage(': 'void | bool',
\ 'Imagick::mapImage(': 'Imagick $map, bool $dither | bool',
\ 'Imagick::matteFloodfillImage(': 'float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y | bool',
\ 'Imagick::medianFilterImage(': 'float $radius | bool',
\ 'Imagick::mergeImageLayers(': 'int $layer_method | bool',
\ 'Imagick::minifyImage(': 'void | bool',
\ 'Imagick::modulateImage(': 'float $brightness, float $saturation, float $hue | bool',
\ 'Imagick::montageImage(': 'ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame | Imagick',
\ 'Imagick::morphImages(': 'int $number_frames | Imagick',
\ 'Imagick::mosaicImages(': 'void | Imagick',
\ 'Imagick::motionBlurImage(': 'float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::negateImage(': 'bool $gray [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::newImage(': 'int $cols, int $rows, mixed $background [, string $format] | bool',
\ 'Imagick::newPseudoImage(': 'int $columns, int $rows, string $pseudoString | bool',
\ 'Imagick::nextImage(': 'void | bool',
\ 'Imagick::normalizeImage(': '[ int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::oilPaintImage(': 'float $radius | bool',
\ 'Imagick::opaquePaintImage(': 'mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::optimizeImageLayers(': 'void | bool',
\ 'Imagick::orderedPosterizeImage(': 'string $threshold_map [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::paintFloodfillImage(': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::paintOpaqueImage(': 'mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::paintTransparentImage(': 'mixed $target, float $alpha, float $fuzz | bool',
\ 'Imagick::pingImage(': 'string $filename | bool',
\ 'Imagick::pingImageBlob(': 'string $image | bool',
\ 'Imagick::pingImageFile(': 'resource $filehandle [, string $fileName] | bool',
\ 'Imagick::polaroidImage(': 'ImagickDraw $properties, float $angle | bool',
\ 'Imagick::posterizeImage(': 'int $levels, bool $dither | bool',
\ 'Imagick::previewImages(': 'int $preview | bool',
\ 'Imagick::previousImage(': 'void | bool',
\ 'Imagick::profileImage(': 'string $name, string $profile | bool',
\ 'Imagick::quantizeImage(': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool',
\ 'Imagick::quantizeImages(': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool',
\ 'Imagick::queryFontMetrics(': 'ImagickDraw $properties, string $text [, bool $multiline] | array',
\ 'Imagick::queryFonts(': '[ string $pattern = "*"] | array',
\ 'Imagick::queryFormats(': '[ string $pattern = "*"] | array',
\ 'Imagick::radialBlurImage(': 'float $angle [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::raiseImage(': 'int $width, int $height, int $x, int $y, bool $raise | bool',
\ 'Imagick::randomThresholdImage(': 'float $low, float $high [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::readImage(': 'string $filename | bool',
\ 'Imagick::readImageBlob(': 'string $image [, string $filename] | bool',
\ 'Imagick::readImageFile(': 'resource $filehandle [, string $fileName = null] | bool',
\ 'Imagick::recolorImage(': 'array $matrix | bool',
\ 'Imagick::reduceNoiseImage(': 'float $radius | bool',
\ 'Imagick::remapImage(': 'Imagick $replacement, int $DITHER | bool',
\ 'Imagick::removeImage(': 'void | bool',
\ 'Imagick::removeImageProfile(': 'string $name | string',
\ 'Imagick::render(': 'void | bool',
\ 'Imagick::resampleImage(': 'float $x_resolution, float $y_resolution, int $filter, float $blur | bool',
\ 'Imagick::resetImagePage(': 'string $page | bool',
\ 'Imagick::resizeImage(': 'int $columns, int $rows, int $filter, float $blur [, bool $bestfit = false] | bool',
\ 'Imagick::rollImage(': 'int $x, int $y | bool',
\ 'Imagick::rotateImage(': 'mixed $background, float $degrees | bool',
\ 'Imagick::roundCorners(': 'float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]] | bool',
\ 'Imagick::sampleImage(': 'int $columns, int $rows | bool',
\ 'Imagick::scaleImage(': 'int $cols, int $rows [, bool $bestfit = false] | bool',
\ 'Imagick::segmentImage(': 'int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = false] | bool',
\ 'Imagick::separateImageChannel(': 'int $channel | bool',
\ 'Imagick::sepiaToneImage(': 'float $threshold | bool',
\ 'Imagick::setBackgroundColor(': 'mixed $background | bool',
\ 'Imagick::setColorspace(': 'int $COLORSPACE | bool',
\ 'Imagick::setCompression(': 'int $compression | bool',
\ 'Imagick::setCompressionQuality(': 'int $quality | bool',
\ 'Imagick::setFilename(': 'string $filename | bool',
\ 'Imagick::setFirstIterator(': 'void | bool',
\ 'Imagick::setFont(': 'string $font | bool',
\ 'Imagick::setFormat(': 'string $format | bool',
\ 'Imagick::setGravity(': 'int $gravity | bool',
\ 'Imagick::setImage(': 'Imagick $replace | bool',
\ 'Imagick::setImageAlphaChannel(': 'int $mode | bool',
\ 'Imagick::setImageArtifact(': 'string $artifact, string $value | bool',
\ 'Imagick::setImageBackgroundColor(': 'mixed $background | bool',
\ 'Imagick::setImageBias(': 'float $bias | bool',
\ 'Imagick::setImageBluePrimary(': 'float $x, float $y | bool',
\ 'Imagick::setImageBorderColor(': 'mixed $border | bool',
\ 'Imagick::setImageChannelDepth(': 'int $channel, int $depth | bool',
\ 'Imagick::setImageClipMask(': 'Imagick $clip_mask | bool',
\ 'Imagick::setImageColormapColor(': 'int $index, ImagickPixel $color | bool',
\ 'Imagick::setImageColorspace(': 'int $colorspace | bool',
\ 'Imagick::setImageCompose(': 'int $compose | bool',
\ 'Imagick::setImageCompression(': 'int $compression | bool',
\ 'Imagick::setImageCompressionQuality(': 'int $quality | bool',
\ 'Imagick::setImageDelay(': 'int $delay | bool',
\ 'Imagick::setImageDepth(': 'int $depth | bool',
\ 'Imagick::setImageDispose(': 'int $dispose | bool',
\ 'Imagick::setImageExtent(': 'int $columns, int $rows | bool',
\ 'Imagick::setImageFilename(': 'string $filename | bool',
\ 'Imagick::setImageFormat(': 'string $format | bool',
\ 'Imagick::setImageGamma(': 'float $gamma | bool',
\ 'Imagick::setImageGravity(': 'int $gravity | bool',
\ 'Imagick::setImageGreenPrimary(': 'float $x, float $y | bool',
\ 'Imagick::setImageIndex(': 'int $index | bool',
\ 'Imagick::setImageInterlaceScheme(': 'int $interlace_scheme | bool',
\ 'Imagick::setImageInterpolateMethod(': 'int $method | bool',
\ 'Imagick::setImageIterations(': 'int $iterations | bool',
\ 'Imagick::setImageMatte(': 'bool $matte | bool',
\ 'Imagick::setImageMatteColor(': 'mixed $matte | bool',
\ 'Imagick::setImageOpacity(': 'float $opacity | bool',
\ 'Imagick::setImageOrientation(': 'int $orientation | bool',
\ 'Imagick::setImagePage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::setImageProfile(': 'string $name, string $profile | bool',
\ 'Imagick::setImageProperty(': 'string $name, string $value | bool',
\ 'Imagick::setImageRedPrimary(': 'float $x, float $y | bool',
\ 'Imagick::setImageRenderingIntent(': 'int $rendering_intent | bool',
\ 'Imagick::setImageResolution(': 'float $x_resolution, float $y_resolution | bool',
\ 'Imagick::setImageScene(': 'int $scene | bool',
\ 'Imagick::setImageTicksPerSecond(': 'int $ticks_per-second | bool',
\ 'Imagick::setImageType(': 'int $image_type | bool',
\ 'Imagick::setImageUnits(': 'int $units | bool',
\ 'Imagick::setImageVirtualPixelMethod(': 'int $method | bool',
\ 'Imagick::setImageWhitePoint(': 'float $x, float $y | bool',
\ 'Imagick::setInterlaceScheme(': 'int $interlace_scheme | bool',
\ 'Imagick::setIteratorIndex(': 'int $index | bool',
\ 'Imagick::setLastIterator(': 'void | bool',
\ 'Imagick::setOption(': 'string $key, string $value | bool',
\ 'Imagick::setPage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::setPointSize(': 'float $point_size | bool',
\ 'Imagick::setResolution(': 'float $x_resolution, float $y_resolution | bool',
\ 'Imagick::setResourceLimit(': 'int $type, int $limit | bool',
\ 'Imagick::setSamplingFactors(': 'array $factors | bool',
\ 'Imagick::setSize(': 'int $columns, int $rows | bool',
\ 'Imagick::setSizeOffset(': 'int $columns, int $rows, int $offset | bool',
\ 'Imagick::setType(': 'int $image_type | bool',
\ 'Imagick::shadeImage(': 'bool $gray, float $azimuth, float $elevation | bool',
\ 'Imagick::shadowImage(': 'float $opacity, float $sigma, int $x, int $y | bool',
\ 'Imagick::sharpenImage(': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::shaveImage(': 'int $columns, int $rows | bool',
\ 'Imagick::shearImage(': 'mixed $background, float $x_shear, float $y_shear | bool',
\ 'Imagick::sigmoidalContrastImage(': 'bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::sketchImage(': 'float $radius, float $sigma, float $angle | bool',
\ 'Imagick::solarizeImage(': 'int $threshold | bool',
\ 'Imagick::sparseColorImage(': 'int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool',
\ 'Imagick::spliceImage(': 'int $width, int $height, int $x, int $y | bool',
\ 'Imagick::spreadImage(': 'float $radius | bool',
\ 'Imagick::steganoImage(': 'Imagick $watermark_wand, int $offset | Imagick',
\ 'Imagick::stereoImage(': 'Imagick $offset_wand | bool',
\ 'Imagick::stripImage(': 'void | bool',
\ 'Imagick::swirlImage(': 'float $degrees | bool',
\ 'Imagick::textureImage(': 'Imagick $texture_wand | bool',
\ 'Imagick::thresholdImage(': 'float $threshold [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::thumbnailImage(': 'int $columns, int $rows [, bool $bestfit = false [, bool $fill = false]] | bool',
\ 'Imagick::tintImage(': 'mixed $tint, mixed $opacity | bool',
\ 'Imagick::transformImage(': 'string $crop, string $geometry | Imagick',
\ 'Imagick::transparentPaintImage(': 'mixed $target, float $alpha, float $fuzz, bool $invert | bool',
\ 'Imagick::transposeImage(': 'void | bool',
\ 'Imagick::transverseImage(': 'void | bool',
\ 'Imagick::trimImage(': 'float $fuzz | bool',
\ 'Imagick::uniqueImageColors(': 'void | bool',
\ 'Imagick::unsharpMaskImage(': 'float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_ALL] | bool',
\ 'Imagick::valid(': 'void | bool',
\ 'Imagick::vignetteImage(': 'float $blackPoint, float $whitePoint, int $x, int $y | bool',
\ 'Imagick::waveImage(': 'float $amplitude, float $length | bool',
\ 'Imagick::whiteThresholdImage(': 'mixed $threshold | bool',
\ 'Imagick::writeImage(': '[ string $filename] | bool',
\ 'Imagick::writeImageFile(': 'resource $filehandle | bool',
\ 'Imagick::writeImages(': 'string $filename, bool $adjoin | bool',
\ 'Imagick::writeImagesFile(': 'resource $filehandle | bool',
\ 'ImagickDraw::affine(': 'array $affine | bool',
\ 'ImagickDraw::annotation(': 'float $x, float $y, string $text | bool',
\ 'ImagickDraw::arc(': 'float $sx, float $sy, float $ex, float $ey, float $sd, float $ed | bool',
\ 'ImagickDraw::bezier(': 'array $coordinates | bool',
\ 'ImagickDraw::circle(': 'float $ox, float $oy, float $px, float $py | bool',
\ 'ImagickDraw::clear(': 'void | bool',
\ 'ImagickDraw::clone(': 'void | ImagickDraw',
\ 'ImagickDraw::color(': 'float $x, float $y, int $paintMethod | bool',
\ 'ImagickDraw::comment(': 'string $comment | bool',
\ 'ImagickDraw::composite(': 'int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand | bool',
\ 'ImagickDraw::__construct(': 'void',
\ 'ImagickDraw::destroy(': 'void | bool',
\ 'ImagickDraw::ellipse(': 'float $ox, float $oy, float $rx, float $ry, float $start, float $end | bool',
\ 'ImagickDraw::getClipPath(': 'void | string',
\ 'ImagickDraw::getClipRule(': 'void | int',
\ 'ImagickDraw::getClipUnits(': 'void | int',
\ 'ImagickDraw::getFillColor(': 'void | ImagickPixel',
\ 'ImagickDraw::getFillOpacity(': 'void | float',
\ 'ImagickDraw::getFillRule(': 'void | int',
\ 'ImagickDraw::getFont(': 'void | string',
\ 'ImagickDraw::getFontFamily(': 'void | string',
\ 'ImagickDraw::getFontSize(': 'void | float',
\ 'ImagickDraw::getFontStyle(': 'void | int',
\ 'ImagickDraw::getFontWeight(': 'void | int',
\ 'ImagickDraw::getGravity(': 'void | int',
\ 'ImagickDraw::getStrokeAntialias(': 'void | bool',
\ 'ImagickDraw::getStrokeColor(': 'void | ImagickPixel',
\ 'ImagickDraw::getStrokeDashArray(': 'void | array',
\ 'ImagickDraw::getStrokeDashOffset(': 'void | float',
\ 'ImagickDraw::getStrokeLineCap(': 'void | int',
\ 'ImagickDraw::getStrokeLineJoin(': 'void | int',
\ 'ImagickDraw::getStrokeMiterLimit(': 'void | int',
\ 'ImagickDraw::getStrokeOpacity(': 'void | float',
\ 'ImagickDraw::getStrokeWidth(': 'void | float',
\ 'ImagickDraw::getTextAlignment(': 'void | int',
\ 'ImagickDraw::getTextAntialias(': 'void | bool',
\ 'ImagickDraw::getTextDecoration(': 'void | int',
\ 'ImagickDraw::getTextEncoding(': 'void | string',
\ 'ImagickDraw::getTextUnderColor(': 'void | ImagickPixel',
\ 'ImagickDraw::getVectorGraphics(': 'void | string',
\ 'ImagickDraw::line(': 'float $sx, float $sy, float $ex, float $ey | bool',
\ 'ImagickDraw::matte(': 'float $x, float $y, int $paintMethod | bool',
\ 'ImagickDraw::pathClose(': 'void | bool',
\ 'ImagickDraw::pathCurveToAbsolute(': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToQuadraticBezierAbsolute(': 'float $x1, float $y1, float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToQuadraticBezierRelative(': 'float $x1, float $y1, float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToQuadraticBezierSmoothRelative(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToRelative(': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToSmoothAbsolute(': 'float $x2, float $y2, float $x, float $y | bool',
\ 'ImagickDraw::pathCurveToSmoothRelative(': 'float $x2, float $y2, float $x, float $y | bool',
\ 'ImagickDraw::pathEllipticArcAbsolute(': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool',
\ 'ImagickDraw::pathEllipticArcRelative(': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool',
\ 'ImagickDraw::pathFinish(': 'void | bool',
\ 'ImagickDraw::pathLineToAbsolute(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathLineToHorizontalAbsolute(': 'float $x | bool',
\ 'ImagickDraw::pathLineToHorizontalRelative(': 'float $x | bool',
\ 'ImagickDraw::pathLineToRelative(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathLineToVerticalAbsolute(': 'float $y | bool',
\ 'ImagickDraw::pathLineToVerticalRelative(': 'float $y | bool',
\ 'ImagickDraw::pathMoveToAbsolute(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathMoveToRelative(': 'float $x, float $y | bool',
\ 'ImagickDraw::pathStart(': 'void | bool',
\ 'ImagickDraw::point(': 'float $x, float $y | bool',
\ 'ImagickDraw::polygon(': 'array $coordinates | bool',
\ 'ImagickDraw::polyline(': 'array $coordinates | bool',
\ 'ImagickDraw::pop(': 'void | bool',
\ 'ImagickDraw::popClipPath(': 'void | bool',
\ 'ImagickDraw::popDefs(': 'void | bool',
\ 'ImagickDraw::popPattern(': 'void | bool',
\ 'ImagickDraw::push(': 'void | bool',
\ 'ImagickDraw::pushClipPath(': 'string $clip_mask_id | bool',
\ 'ImagickDraw::pushDefs(': 'void | bool',
\ 'ImagickDraw::pushPattern(': 'string $pattern_id, float $x, float $y, float $width, float $height | bool',
\ 'ImagickDraw::rectangle(': 'float $x1, float $y1, float $x2, float $y2 | bool',
\ 'ImagickDraw::render(': 'void | bool',
\ 'ImagickDraw::rotate(': 'float $degrees | bool',
\ 'ImagickDraw::roundRectangle(': 'float $x1, float $y1, float $x2, float $y2, float $rx, float $ry | bool',
\ 'ImagickDraw::scale(': 'float $x, float $y | bool',
\ 'ImagickDraw::setClipPath(': 'string $clip_mask | bool',
\ 'ImagickDraw::setClipRule(': 'int $fill_rule | bool',
\ 'ImagickDraw::setClipUnits(': 'int $clip_units | bool',
\ 'ImagickDraw::setFillAlpha(': 'float $opacity | bool',
\ 'ImagickDraw::setFillColor(': 'ImagickPixel $fill_pixel | bool',
\ 'ImagickDraw::setFillOpacity(': 'float $fillOpacity | bool',
\ 'ImagickDraw::setFillPatternURL(': 'string $fill_url | bool',
\ 'ImagickDraw::setFillRule(': 'int $fill_rule | bool',
\ 'ImagickDraw::setFont(': 'string $font_name | bool',
\ 'ImagickDraw::setFontFamily(': 'string $font_family | bool',
\ 'ImagickDraw::setFontSize(': 'float $pointsize | bool',
\ 'ImagickDraw::setFontStretch(': 'int $fontStretch | bool',
\ 'ImagickDraw::setFontStyle(': 'int $style | bool',
\ 'ImagickDraw::setFontWeight(': 'int $font_weight | bool',
\ 'ImagickDraw::setGravity(': 'int $gravity | bool',
\ 'ImagickDraw::setStrokeAlpha(': 'float $opacity | bool',
\ 'ImagickDraw::setStrokeAntialias(': 'bool $stroke_antialias | bool',
\ 'ImagickDraw::setStrokeColor(': 'ImagickPixel $stroke_pixel | bool',
\ 'ImagickDraw::setStrokeDashArray(': 'array $dashArray | bool',
\ 'ImagickDraw::setStrokeDashOffset(': 'float $dash_offset | bool',
\ 'ImagickDraw::setStrokeLineCap(': 'int $linecap | bool',
\ 'ImagickDraw::setStrokeLineJoin(': 'int $linejoin | bool',
\ 'ImagickDraw::setStrokeMiterLimit(': 'int $miterlimit | bool',
\ 'ImagickDraw::setStrokeOpacity(': 'float $stroke_opacity | bool',
\ 'ImagickDraw::setStrokePatternURL(': 'string $stroke_url | bool',
\ 'ImagickDraw::setStrokeWidth(': 'float $stroke_width | bool',
\ 'ImagickDraw::setTextAlignment(': 'int $alignment | bool',
\ 'ImagickDraw::setTextAntialias(': 'bool $antiAlias | bool',
\ 'ImagickDraw::setTextDecoration(': 'int $decoration | bool',
\ 'ImagickDraw::setTextEncoding(': 'string $encoding | bool',
\ 'ImagickDraw::setTextUnderColor(': 'ImagickPixel $under_color | bool',
\ 'ImagickDraw::setVectorGraphics(': 'string $xml | bool',
\ 'ImagickDraw::setViewbox(': 'int $x1, int $y1, int $x2, int $y2 | bool',
\ 'ImagickDraw::skewX(': 'float $degrees | bool',
\ 'ImagickDraw::skewY(': 'float $degrees | bool',
\ 'ImagickDraw::translate(': 'float $x, float $y | bool',
\ 'ImagickPixel::clear(': 'void | bool',
\ 'ImagickPixel::__construct(': '[ string $color]',
\ 'ImagickPixel::destroy(': 'void | bool',
\ 'ImagickPixel::getColor(': '[ bool $normalized = false] | array',
\ 'ImagickPixel::getColorAsString(': 'void | string',
\ 'ImagickPixel::getColorCount(': 'void | int',
\ 'ImagickPixel::getColorValue(': 'int $color | float',
\ 'ImagickPixel::getHSL(': 'void | array',
\ 'ImagickPixel::isSimilar(': 'ImagickPixel $color, float $fuzz | bool',
\ 'ImagickPixel::setColor(': 'string $color | bool',
\ 'ImagickPixel::setColorValue(': 'int $color, float $value | bool',
\ 'ImagickPixel::setHSL(': 'float $hue, float $saturation, float $luminosity | bool',
\ 'ImagickPixelIterator::clear(': 'void | bool',
\ 'ImagickPixelIterator::__construct(': 'Imagick $wand',
\ 'ImagickPixelIterator::destroy(': 'void | bool',
\ 'ImagickPixelIterator::getCurrentIteratorRow(': 'void | array',
\ 'ImagickPixelIterator::getIteratorRow(': 'void | int',
\ 'ImagickPixelIterator::getNextIteratorRow(': 'void | array',
\ 'ImagickPixelIterator::getPreviousIteratorRow(': 'void | array',
\ 'ImagickPixelIterator::newPixelIterator(': 'Imagick $wand | bool',
\ 'ImagickPixelIterator::newPixelRegionIterator(': 'Imagick $wand, int $x, int $y, int $columns, int $rows | bool',
\ 'ImagickPixelIterator::resetIterator(': 'void | bool',
\ 'ImagickPixelIterator::setIteratorFirstRow(': 'void | bool',
\ 'ImagickPixelIterator::setIteratorLastRow(': 'void | bool',
\ 'ImagickPixelIterator::setIteratorRow(': 'int $row | bool',
\ 'ImagickPixelIterator::syncIterator(': 'void | bool',
\ 'InfiniteIterator::__construct(': 'Iterator $iterator',
\ 'InfiniteIterator::next(': 'void | void',
\ 'InfiniteIterator::current(': 'void | mixed',
\ 'InfiniteIterator::getInnerIterator(': 'void | Traversable',
\ 'InfiniteIterator::key(': 'void | scalar',
\ 'InfiniteIterator::rewind(': 'void | void',
\ 'InfiniteIterator::valid(': 'void | bool',
\ 'IntlDateFormatter::__construct(': 'string $locale, int $datetype, int $timetype [, string $timezone [, int $calendar [, string $pattern]]]',
\ 'IntlDateFormatter::create(': 'string $locale, int $datetype, int $timetype [, string $timezone [, int $calendar [, string $pattern]]] | IntlDateFormatter',
\ 'IntlDateFormatter::format(': 'mixed $value | string',
\ 'IntlDateFormatter::formatObject(': 'object $object [, mixed $format [, string $locale]] | string',
\ 'IntlDateFormatter::getCalendar(': 'void | int',
\ 'IntlDateFormatter::getDateType(': 'void | int',
\ 'IntlDateFormatter::getErrorCode(': 'void | int',
\ 'IntlDateFormatter::getErrorMessage(': 'void | string',
\ 'IntlDateFormatter::getLocale(': '[ int $which] | string',
\ 'IntlDateFormatter::getPattern(': 'void | string',
\ 'IntlDateFormatter::getTimeType(': 'void | int',
\ 'IntlDateFormatter::getTimeZoneId(': 'void | string',
\ 'IntlDateFormatter::getCalendarObject(': 'void | IntlCalendar',
\ 'IntlDateFormatter::getTimeZone(': 'void | IntlTimeZone',
\ 'IntlDateFormatter::isLenient(': 'void | bool',
\ 'IntlDateFormatter::localtime(': 'string $value [, int &$position] | array',
\ 'IntlDateFormatter::parse(': 'string $value [, int &$position] | int',
\ 'IntlDateFormatter::setCalendar(': 'int $which | bool',
\ 'IntlDateFormatter::setLenient(': 'bool $lenient | bool',
\ 'IntlDateFormatter::setPattern(': 'string $pattern | bool',
\ 'IntlDateFormatter::setTimeZoneId(': 'string $zone | bool',
\ 'IntlDateFormatter::setTimeZone(': 'mixed $zone | boolean',
\ 'InvalidArgumentException::getMessage(': 'void | string',
\ 'InvalidArgumentException::getPrevious(': 'void | Exception',
\ 'InvalidArgumentException::getCode(': 'void | mixed',
\ 'InvalidArgumentException::getFile(': 'void | string',
\ 'InvalidArgumentException::getLine(': 'void | int',
\ 'InvalidArgumentException::getTrace(': 'void | array',
\ 'InvalidArgumentException::getTraceAsString(': 'void | string',
\ 'InvalidArgumentException::__toString(': 'void | string',
\ 'InvalidArgumentException::__clone(': 'void | void',
\ 'Iterator::current(': 'void | mixed',
\ 'Iterator::key(': 'void | scalar',
\ 'Iterator::next(': 'void | void',
\ 'Iterator::rewind(': 'void | void',
\ 'Iterator::valid(': 'void | boolean',
\ 'IteratorAggregate::getIterator(': 'void | Traversable',
\ 'IteratorIterator::__construct(': 'Traversable $iterator',
\ 'IteratorIterator::current(': 'void | mixed',
\ 'IteratorIterator::getInnerIterator(': 'void | Traversable',
\ 'IteratorIterator::key(': 'void | scalar',
\ 'IteratorIterator::next(': 'void | void',
\ 'IteratorIterator::rewind(': 'void | void',
\ 'IteratorIterator::valid(': 'void | bool',
\ 'JsonSerializable::jsonSerialize(': 'void | mixed',
\ 'Judy::byCount(': 'int $nth_index | int',
\ 'Judy::__construct(': 'int $judy_type',
\ 'Judy::count(': '[ int $index_start = 0 [, int $index_end = -1]] | int',
\ 'Judy::__destruct(': 'void | void',
\ 'Judy::first(': '[ mixed $index] | mixed',
\ 'Judy::firstEmpty(': '[ mixed $index = 0] | int',
\ 'Judy::free(': 'void | int',
\ 'Judy::getType(': 'void | int',
\ 'Judy::last(': '[ string $index] | void',
\ 'Judy::lastEmpty(': '[ int $index = -1] | int',
\ 'Judy::memoryUsage(': 'void | int',
\ 'Judy::next(': 'mixed $index | mixed',
\ 'Judy::nextEmpty(': 'int $index | int',
\ 'Judy::offsetExists(': 'mixed $offset | bool',
\ 'Judy::offsetGet(': 'mixed $offset | mixed',
\ 'Judy::offsetSet(': 'mixed $offset, mixed $value | bool',
\ 'Judy::offsetUnset(': 'mixed $offset | bool',
\ 'Judy::prev(': 'mixed $index | mixed',
\ 'Judy::prevEmpty(': 'mixed $index | int',
\ 'Judy::size(': 'void | void',
\ 'KTaglib_ID3v2_Frame::getDescription(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getMimeType(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getType(': 'void | int',
\ 'KTaglib_ID3v2_Frame::savePicture(': 'string $filename | bool',
\ 'KTaglib_ID3v2_Frame::setPicture(': 'string $filename | void',
\ 'KTaglib_ID3v2_Frame::setType(': 'int $type | void',
\ 'KTaglib_ID3v2_Frame::getSize(': 'void | int',
\ 'KTaglib_ID3v2_Frame::__toString(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getAlbum(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getArtist(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getComment(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getGenre(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getTitle(': 'void | string',
\ 'KTaglib_ID3v2_Frame::getTrack(': 'void | int',
\ 'KTaglib_ID3v2_Frame::getYear(': 'void | int',
\ 'KTaglib_ID3v2_Frame::isEmpty(': 'void | bool',
\ 'KTaglib_Tag::getSize(': 'void | int',
\ 'KTaglib_Tag::__toString(': 'void | string',
\ 'KTaglib_Tag::getAlbum(': 'void | string',
\ 'KTaglib_Tag::getArtist(': 'void | string',
\ 'KTaglib_Tag::getComment(': 'void | string',
\ 'KTaglib_Tag::getGenre(': 'void | string',
\ 'KTaglib_Tag::getTitle(': 'void | string',
\ 'KTaglib_Tag::getTrack(': 'void | int',
\ 'KTaglib_Tag::getYear(': 'void | int',
\ 'KTaglib_Tag::isEmpty(': 'void | bool',
\ 'KTaglib_Tag::addFrame(': 'KTaglib_ID3v2_Frame $frame | bool',
\ 'KTaglib_Tag::getFrameList(': 'void | array',
\ 'KTaglib_MPEG_AudioProperties::getBitrate(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::getChannels(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::getLayer(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::getLength(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::getSampleBitrate(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::getVersion(': 'void | int',
\ 'KTaglib_MPEG_AudioProperties::isCopyrighted(': 'void | bool',
\ 'KTaglib_MPEG_AudioProperties::isOriginal(': 'void | bool',
\ 'KTaglib_MPEG_AudioProperties::isProtectionEnabled(': 'void | bool',
\ 'KTaglib_MPEG_File::getAudioProperties(': 'void | KTaglib_MPEG_File',
\ 'KTaglib_MPEG_File::getID3v1Tag(': '[ bool $create = false] | KTaglib_ID3v1_Tag',
\ 'KTaglib_MPEG_File::getID3v2Tag(': '[ bool $create = false] | KTaglib_ID3v2_Tag',
\ 'Lapack::eigenValues(': 'array $a [, array $left [, array $right]] | array',
\ 'Lapack::identity(': 'int $n | array',
\ 'Lapack::leastSquaresByFactorisation(': 'array $a, array $b | array',
\ 'Lapack::leastSquaresBySVD(': 'array $a, array $b | array',
\ 'Lapack::pseudoInverse(': 'array $a | array',
\ 'Lapack::singularValues(': 'array $a | array',
\ 'Lapack::solveLinearEquation(': 'array $a, array $b | array',
\ 'lapackexception::getMessage(': 'void | string',
\ 'lapackexception::getPrevious(': 'void | Exception',
\ 'lapackexception::getCode(': 'void | mixed',
\ 'lapackexception::getFile(': 'void | string',
\ 'lapackexception::getLine(': 'void | int',
\ 'lapackexception::getTrace(': 'void | array',
\ 'lapackexception::getTraceAsString(': 'void | string',
\ 'lapackexception::__toString(': 'void | string',
\ 'lapackexception::__clone(': 'void | void',
\ 'LengthException::getMessage(': 'void | string',
\ 'LengthException::getPrevious(': 'void | Exception',
\ 'LengthException::getCode(': 'void | mixed',
\ 'LengthException::getFile(': 'void | string',
\ 'LengthException::getLine(': 'void | int',
\ 'LengthException::getTrace(': 'void | array',
\ 'LengthException::getTraceAsString(': 'void | string',
\ 'LengthException::__toString(': 'void | string',
\ 'LengthException::__clone(': 'void | void',
\ 'LimitIterator::__construct(': 'Iterator $iterator [, int $offset = 0 [, int $count = -1]]',
\ 'LimitIterator::current(': 'void | mixed',
\ 'LimitIterator::getInnerIterator(': 'void | Iterator',
\ 'LimitIterator::getPosition(': 'void | int',
\ 'LimitIterator::key(': 'void | mixed',
\ 'LimitIterator::next(': 'void | void',
\ 'LimitIterator::rewind(': 'void | void',
\ 'LimitIterator::seek(': 'int $position | int',
\ 'LimitIterator::valid(': 'void | bool',
\ 'Locale::acceptFromHttp(': 'string $header | string',
\ 'Locale::composeLocale(': 'array $subtags | string',
\ 'Locale::filterMatches(': 'string $langtag, string $locale [, bool $canonicalize = false] | bool',
\ 'Locale::getAllVariants(': 'string $locale | array',
\ 'Locale::getDefault(': 'void | string',
\ 'Locale::getDisplayLanguage(': 'string $locale [, string $in_locale] | string',
\ 'Locale::getDisplayName(': 'string $locale [, string $in_locale] | string',
\ 'Locale::getDisplayRegion(': 'string $locale [, string $in_locale] | string',
\ 'Locale::getDisplayScript(': 'string $locale [, string $in_locale] | string',
\ 'Locale::getDisplayVariant(': 'string $locale [, string $in_locale] | string',
\ 'Locale::getKeywords(': 'string $locale | array',
\ 'Locale::getPrimaryLanguage(': 'string $locale | string',
\ 'Locale::getRegion(': 'string $locale | string',
\ 'Locale::getScript(': 'string $locale | string',
\ 'Locale::lookup(': 'array $langtag, string $locale [, bool $canonicalize = false [, string $default]] | string',
\ 'Locale::parseLocale(': 'string $locale | array',
\ 'Locale::setDefault(': 'string $locale | bool',
\ 'LogicException::getMessage(': 'void | string',
\ 'LogicException::getPrevious(': 'void | Exception',
\ 'LogicException::getCode(': 'void | mixed',
\ 'LogicException::getFile(': 'void | string',
\ 'LogicException::getLine(': 'void | int',
\ 'LogicException::getTrace(': 'void | array',
\ 'LogicException::getTraceAsString(': 'void | string',
\ 'LogicException::__toString(': 'void | string',
\ 'LogicException::__clone(': 'void | void',
\ 'Lua::assign(': 'string $name, string $value | mixed',
\ 'Lua::call(': 'callable $lua_func [, array $args [, int $use_self = 0]] | mixed',
\ 'Lua::__call(': 'callable $lua_func [, array $args [, int $use_self = 0]] | mixed',
\ 'Lua::__construct(': '[ string $lua_script_file = NULL]',
\ 'Lua::eval(': 'string $statements | mixed',
\ 'Lua::getVersion(': 'void | string',
\ 'Lua::include(': 'string $file | mixed',
\ 'Lua::registerCallback(': 'string $name, callable $function | mixed',
\ 'LuaClosure::__invoke(': 'mixed $arg [, mixed $...] | void',
\ 'Memcache::add(': 'string $key, mixed $var [, int $flag [, int $expire]] | bool',
\ 'Memcache::addServer(': 'string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms]]]]]]]] | bool',
\ 'Memcache::close(': 'void | bool',
\ 'Memcache::connect(': 'string $host [, int $port [, int $timeout]] | bool',
\ 'Memcache::decrement(': 'string $key [, int $value = 1] | int',
\ 'Memcache::delete(': 'string $key [, int $timeout = 0] | bool',
\ 'Memcache::flush(': 'void | bool',
\ 'Memcache::get(': 'string $key [, int &$flags] | string',
\ 'Memcache::getExtendedStats(': '[ string $type [, int $slabid [, int $limit = 100]]] | array',
\ 'Memcache::getServerStatus(': 'string $host [, int $port = 11211] | int',
\ 'Memcache::getStats(': '[ string $type [, int $slabid [, int $limit = 100]]] | array',
\ 'Memcache::getVersion(': 'void | string',
\ 'Memcache::increment(': 'string $key [, int $value = 1] | int',
\ 'Memcache::pconnect(': 'string $host [, int $port [, int $timeout]] | mixed',
\ 'Memcache::replace(': 'string $key, mixed $var [, int $flag [, int $expire]] | bool',
\ 'Memcache::set(': 'string $key, mixed $var [, int $flag [, int $expire]] | bool',
\ 'Memcache::setCompressThreshold(': 'int $threshold [, float $min_savings] | bool',
\ 'Memcache::setServerParams(': 'string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = false [, bool $status [, callable $failure_callback]]]]] | bool',
\ 'Memcached::__construct(': '[ string $persistent_id]',
\ 'Memcached::add(': 'string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::addByKey(': 'string $server_key, string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::addServer(': 'string $host, int $port [, int $weight = 0] | bool',
\ 'Memcached::addServers(': 'array $servers | bool',
\ 'Memcached::append(': 'string $key, string $value | bool',
\ 'Memcached::appendByKey(': 'string $server_key, string $key, string $value | bool',
\ 'Memcached::cas(': 'float $cas_token, string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::casByKey(': 'float $cas_token, string $server_key, string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::decrement(': 'string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int',
\ 'Memcached::decrementByKey(': 'string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int',
\ 'Memcached::delete(': 'string $key [, int $time = 0] | bool',
\ 'Memcached::deleteByKey(': 'string $server_key, string $key [, int $time = 0] | bool',
\ 'Memcached::deleteMulti(': 'array $keys [, int $time = 0] | bool',
\ 'Memcached::deleteMultiByKey(': 'string $server_key, array $keys [, int $time = 0] | bool',
\ 'Memcached::fetch(': 'void | array',
\ 'Memcached::fetchAll(': 'void | array',
\ 'Memcached::flush(': '[ int $delay = 0] | bool',
\ 'Memcached::get(': 'string $key [, callable $cache_cb [, float &$cas_token]] | mixed',
\ 'Memcached::getAllKeys(': 'void | array',
\ 'Memcached::getByKey(': 'string $server_key, string $key [, callable $cache_cb [, float &$cas_token]] | mixed',
\ 'Memcached::getDelayed(': 'array $keys [, bool $with_cas [, callable $value_cb]] | bool',
\ 'Memcached::getDelayedByKey(': 'string $server_key, array $keys [, bool $with_cas [, callable $value_cb]] | bool',
\ 'Memcached::getMulti(': 'array $keys [, array &$cas_tokens [, int $flags]] | mixed',
\ 'Memcached::getMultiByKey(': 'string $server_key, array $keys [, string &$cas_tokens [, int $flags]] | array',
\ 'Memcached::getOption(': 'int $option | mixed',
\ 'Memcached::getResultCode(': 'void | int',
\ 'Memcached::getResultMessage(': 'void | string',
\ 'Memcached::getServerByKey(': 'string $server_key | array',
\ 'Memcached::getServerList(': 'void | array',
\ 'Memcached::getStats(': 'void | array',
\ 'Memcached::getVersion(': 'void | array',
\ 'Memcached::increment(': 'string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int',
\ 'Memcached::incrementByKey(': 'string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int',
\ 'Memcached::isPersistent(': 'void | bool',
\ 'Memcached::isPristine(': 'void | bool',
\ 'Memcached::prepend(': 'string $key, string $value | bool',
\ 'Memcached::prependByKey(': 'string $server_key, string $key, string $value | bool',
\ 'Memcached::quit(': 'void | bool',
\ 'Memcached::replace(': 'string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::replaceByKey(': 'string $server_key, string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::resetServerList(': 'void | bool',
\ 'Memcached::set(': 'string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::setByKey(': 'string $server_key, string $key, mixed $value [, int $expiration] | bool',
\ 'Memcached::setMulti(': 'array $items [, int $expiration] | bool',
\ 'Memcached::setMultiByKey(': 'string $server_key, array $items [, int $expiration] | bool',
\ 'Memcached::setOption(': 'int $option, mixed $value | bool',
\ 'Memcached::setOptions(': 'array $options | bool',
\ 'Memcached::setSaslAuthData(': 'string $username, string $password | void',
\ 'Memcached::touch(': 'string $key, int $expiration | bool',
\ 'Memcached::touchByKey(': 'string $server_key, string $key, int $expiration | bool',
\ 'MessageFormatter::__construct(': 'string $locale, string $pattern',
\ 'MessageFormatter::create(': 'string $locale, string $pattern | MessageFormatter',
\ 'MessageFormatter::formatMessage(': 'string $locale, string $pattern, array $args | string',
\ 'MessageFormatter::format(': 'array $args | string',
\ 'MessageFormatter::getErrorCode(': 'void | int',
\ 'MessageFormatter::getErrorMessage(': 'void | string',
\ 'MessageFormatter::getLocale(': 'void | string',
\ 'MessageFormatter::getPattern(': 'void | string',
\ 'MessageFormatter::parseMessage(': 'string $locale, string $pattern, string $source | array',
\ 'MessageFormatter::parse(': 'string $value | array',
\ 'MessageFormatter::setPattern(': 'string $pattern | bool',
\ 'Mongo::connectUtil(': 'void | bool',
\ 'Mongo::getPoolSize(': 'void | int',
\ 'Mongo::getSlave(': 'void | string',
\ 'Mongo::getSlaveOkay(': 'void | bool',
\ 'Mongo::poolDebug(': 'void | array',
\ 'Mongo::setPoolSize(': 'int $size | bool',
\ 'Mongo::setSlaveOkay(': '[ bool $ok = true] | bool',
\ 'Mongo::switchSlave(': 'void | string',
\ 'Mongo::close(': '[ boolean|string $connection] | bool',
\ 'Mongo::connect(': 'void | bool',
\ 'Mongo::dropDB(': 'mixed $db | array',
\ 'Mongo::__get(': 'string $dbname | MongoDB',
\ 'Mongo::getConnections(': 'void | void',
\ 'Mongo::getHosts(': 'void | array',
\ 'Mongo::getReadPreference(': 'void | array',
\ 'Mongo::listDBs(': 'void | array',
\ 'Mongo::selectCollection(': 'string $db, string $collection | MongoCollection',
\ 'Mongo::selectDB(': 'string $name | MongoDB',
\ 'Mongo::setReadPreference(': 'string $read_preference [, array $tags] | bool',
\ 'Mongo::__toString(': 'void | string',
\ 'MongoBinData::__construct(': 'string $data [, int $type = 2]',
\ 'MongoBinData::__toString(': 'void | string',
\ 'MongoClient::__construct(': '[ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE)]]',
\ 'MongoClient::close(': '[ boolean|string $connection] | bool',
\ 'MongoClient::connect(': 'void | bool',
\ 'MongoClient::dropDB(': 'mixed $db | array',
\ 'MongoClient::__get(': 'string $dbname | MongoDB',
\ 'MongoClient::getConnections(': 'void | void',
\ 'MongoClient::getHosts(': 'void | array',
\ 'MongoClient::getReadPreference(': 'void | array',
\ 'MongoClient::listDBs(': 'void | array',
\ 'MongoClient::selectCollection(': 'string $db, string $collection | MongoCollection',
\ 'MongoClient::selectDB(': 'string $name | MongoDB',
\ 'MongoClient::setReadPreference(': 'string $read_preference [, array $tags] | bool',
\ 'MongoClient::__toString(': 'void | string',
\ 'MongoCode::__construct(': 'string $code [, array $scope = array()]',
\ 'MongoCode::__toString(': 'void | string',
\ 'MongoCollection::aggregate(': 'array $pipeline [, array $op [, array $...]] | array',
\ 'MongoCollection::batchInsert(': 'array $a [, array $options = array()] | mixed',
\ 'MongoCollection::__construct(': 'MongoDB $db, string $name',
\ 'MongoCollection::count(': '[ array $query = array() [, int $limit = 0 [, int $skip = 0]]] | int',
\ 'MongoCollection::createDBRef(': 'array $a | array',
\ 'MongoCollection::deleteIndex(': 'string|array $keys | array',
\ 'MongoCollection::deleteIndexes(': 'void | array',
\ 'MongoCollection::distinct(': 'string $key [, array $query] | array',
\ 'MongoCollection::drop(': 'void | array',
\ 'MongoCollection::ensureIndex(': 'string|array $key|keys [, array $options = array()] | bool',
\ 'MongoCollection::find(': '[ array $query = array() [, array $fields = array()]] | MongoCursor',
\ 'MongoCollection::findAndModify(': 'array $query [, array $update [, array $fields [, array $options]]] | void',
\ 'MongoCollection::findOne(': '[ array $query = array() [, array $fields = array()]] | array',
\ 'MongoCollection::__get(': 'string $name | MongoCollection',
\ 'MongoCollection::getDBRef(': 'array $ref | array',
\ 'MongoCollection::getIndexInfo(': 'void | array',
\ 'MongoCollection::getName(': 'void | string',
\ 'MongoCollection::getReadPreference(': 'void | array',
\ 'MongoCollection::getSlaveOkay(': 'void | bool',
\ 'MongoCollection::group(': 'mixed $keys, array $initial, MongoCode $reduce [, array $options = array()] | array',
\ 'MongoCollection::insert(': 'array|object $a [, array $options = array()] | bool|array',
\ 'MongoCollection::remove(': '[ array $criteria = array() [, array $options = array()]] | bool|array',
\ 'MongoCollection::save(': 'array|object $a [, array $options = array()] | mixed',
\ 'MongoCollection::setReadPreference(': 'string $read_preference [, array $tags] | bool',
\ 'MongoCollection::setSlaveOkay(': '[ bool $ok = true] | bool',
\ 'MongoCollection::toIndexString(': 'mixed $keys | string',
\ 'MongoCollection::__toString(': 'void | string',
\ 'MongoCollection::update(': 'array $criteria, array $new_object [, array $options = array()] | bool|array',
\ 'MongoCollection::validate(': '[ bool $scan_data = FALSE] | array',
\ 'MongoCursor::addOption(': 'string $key, mixed $value | MongoCursor',
\ 'MongoCursor::awaitData(': '[ bool $wait = true] | MongoCursor',
\ 'MongoCursor::batchSize(': 'int $batchSize | MongoCursor',
\ 'MongoCursor::__construct(': 'MongoClient $connection, string $ns [, array $query = array() [, array $fields = array()]]',
\ 'MongoCursor::count(': '[ bool $foundOnly = FALSE] | int',
\ 'MongoCursor::current(': 'void | array',
\ 'MongoCursor::dead(': 'void | bool',
\ 'MongoCursor::doQuery(': 'void | void',
\ 'MongoCursor::explain(': 'void | array',
\ 'MongoCursor::fields(': 'array $f | MongoCursor',
\ 'MongoCursor::getNext(': 'void | array',
\ 'MongoCursor::getReadPreference(': 'void | array',
\ 'MongoCursor::hasNext(': 'void | bool',
\ 'MongoCursor::hint(': 'array $key_pattern | MongoCursor',
\ 'MongoCursor::immortal(': '[ bool $liveForever = true] | MongoCursor',
\ 'MongoCursor::info(': 'void | array',
\ 'MongoCursor::key(': 'void | string',
\ 'MongoCursor::limit(': 'int $num | MongoCursor',
\ 'MongoCursor::next(': 'void | void',
\ 'MongoCursor::partial(': '[ bool $okay = true] | MongoCursor',
\ 'MongoCursor::reset(': 'void | void',
\ 'MongoCursor::rewind(': 'void | void',
\ 'MongoCursor::setFlag(': 'bool $flag [, bool $set = true] | MongoCursor',
\ 'MongoCursor::setReadPreference(': 'string $read_preference [, array $tags] | bool',
\ 'MongoCursor::skip(': 'int $num | MongoCursor',
\ 'MongoCursor::slaveOkay(': '[ bool $okay = true] | MongoCursor',
\ 'MongoCursor::snapshot(': 'void | MongoCursor',
\ 'MongoCursor::sort(': 'array $fields | MongoCursor',
\ 'MongoCursor::tailable(': '[ bool $tail = true] | MongoCursor',
\ 'MongoCursor::timeout(': 'int $ms | MongoCursor',
\ 'MongoCursor::valid(': 'void | bool',
\ 'MongoDate::__construct(': '[ int $sec = time() [, int $usec = 0]]',
\ 'MongoDate::__toString(': 'void | string',
\ 'MongoDB::authenticate(': 'string $username, string $password | array',
\ 'MongoDB::command(': 'array $command [, array $options = array()] | array',
\ 'MongoDB::__construct(': 'MongoClient $conn, string $name',
\ 'MongoDB::createCollection(': 'string $name [, bool $capped = FALSE [, int $size = 0 [, int $max = 0]]] | MongoCollection',
\ 'MongoDB::createDBRef(': 'string $collection, mixed $a | array',
\ 'MongoDB::drop(': 'void | array',
\ 'MongoDB::dropCollection(': 'mixed $coll | array',
\ 'MongoDB::execute(': 'mixed $code [, array $args = array()] | array',
\ 'MongoDB::forceError(': 'void | bool',
\ 'MongoDB::__get(': 'string $name | MongoCollection',
\ 'MongoDB::getCollectionNames(': '[ bool $includeSystemCollections = false] | array',
\ 'MongoDB::getDBRef(': 'array $ref | array',
\ 'MongoDB::getGridFS(': '[ string $prefix = "fs"] | MongoGridFS',
\ 'MongoDB::getProfilingLevel(': 'void | int',
\ 'MongoDB::getReadPreference(': 'void | array',
\ 'MongoDB::getSlaveOkay(': 'void | bool',
\ 'MongoDB::lastError(': 'void | array',
\ 'MongoDB::listCollections(': '[ bool $includeSystemCollections = false] | array',
\ 'MongoDB::prevError(': 'void | array',
\ 'MongoDB::repair(': '[ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE]] | array',
\ 'MongoDB::resetError(': 'void | array',
\ 'MongoDB::selectCollection(': 'string $name | MongoCollection',
\ 'MongoDB::setProfilingLevel(': 'int $level | int',
\ 'MongoDB::setReadPreference(': 'string $read_preference [, array $tags] | bool',
\ 'MongoDB::setSlaveOkay(': '[ bool $ok = true] | bool',
\ 'MongoDB::__toString(': 'void | string',
\ 'MongoDBRef::create(': 'string $collection, mixed $id [, string $database] | array',
\ 'MongoDBRef::get(': 'MongoDB $db, array $ref | array',
\ 'MongoDBRef::isRef(': 'mixed $ref | bool',
\ 'MongoCollection::delete(': 'mixed $id | bool',
\ 'MongoCollection::get(': 'mixed $id | MongoGridFSFile',
\ 'MongoCollection::put(': 'string $filename [, array $metadata = array()] | mixed',
\ 'MongoCollection::storeBytes(': 'string $bytes [, array $metadata = array() [, array $options = array()]] | mixed',
\ 'MongoCollection::storeFile(': 'string $filename [, array $metadata = array() [, array $options = array()]] | mixed',
\ 'MongoCollection::storeUpload(': 'string $name [, array $metadata] | mixed',
\ 'MongoGridFSFile::__construct(': 'MongoGridFS $gridfs, array $file',
\ 'MongoGridFSFile::getBytes(': 'void | string',
\ 'MongoGridFSFile::getFilename(': 'void | string',
\ 'MongoGridFSFile::getResource(': 'void | stream',
\ 'MongoGridFSFile::getSize(': 'void | int',
\ 'MongoGridFSFile::write(': '[ string $filename = NULL] | int',
\ 'MongoId::__construct(': '[ string $id = NULL]',
\ 'MongoId::getHostname(': 'void | string',
\ 'MongoId::getInc(': 'void | int',
\ 'MongoId::getPID(': 'void | int',
\ 'MongoId::getTimestamp(': 'void | int',
\ 'MongoId::__set_state(': 'array $props | MongoId',
\ 'MongoId::__toString(': 'void | string',
\ 'MongoInt32::__construct(': 'string $value',
\ 'MongoInt32::__toString(': 'void | string',
\ 'MongoInt64::__construct(': 'string $value',
\ 'MongoInt64::__toString(': 'void | string',
\ 'MongoLog::getCallback(': 'void | void',
\ 'MongoLog::getLevel(': 'void | int',
\ 'MongoLog::getModule(': 'void | int',
\ 'MongoLog::setCallback(': 'callable $log_function | void',
\ 'MongoLog::setLevel(': 'int $level | void',
\ 'MongoLog::setModule(': 'int $module | void',
\ 'MongoPool::getSize(': 'void | int',
\ 'MongoPool::info(': 'void | array',
\ 'MongoPool::setSize(': 'int $size | bool',
\ 'MongoRegex::__construct(': 'string $regex',
\ 'MongoRegex::__toString(': 'void | string',
\ 'MongoResultException::getDocument(': 'void | array',
\ 'MongoTimestamp::__construct(': '[ int $sec = time() [, int $inc]]',
\ 'MongoTimestamp::__toString(': 'void | string',
\ 'MultipleIterator::__construct(': '[ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC]',
\ 'MultipleIterator::attachIterator(': 'Iterator $iterator [, string $infos] | void',
\ 'MultipleIterator::containsIterator(': 'Iterator $iterator | void',
\ 'MultipleIterator::countIterators(': 'void | void',
\ 'MultipleIterator::current(': 'void | array',
\ 'MultipleIterator::detachIterator(': 'Iterator $iterator | void',
\ 'MultipleIterator::getFlags(': 'void | void',
\ 'MultipleIterator::key(': 'void | array',
\ 'MultipleIterator::next(': 'void | void',
\ 'MultipleIterator::rewind(': 'void | void',
\ 'MultipleIterator::setFlags(': 'int $flags | void',
\ 'MultipleIterator::valid(': 'void | void',
\ 'Mutex::create(': '[ boolean $lock] | long',
\ 'Mutex::destroy(': 'long $mutex | boolean',
\ 'Mutex::lock(': 'long $mutex | boolean',
\ 'Mutex::trylock(': 'long $mutex | boolean',
\ 'Mutex::unlock(': 'long $mutex [, boolean $destroy] | boolean',
\ 'mysqli_driver::embedded_server_end(': 'void | void',
\ 'mysqli_driver::embedded_server_start(': 'bool $start, array $arguments, array $groups | bool',
\ 'mysqli_result::data_seek(': 'int $offset | bool',
\ 'mysqli_result::fetch_all(': '[ int $resulttype = MYSQLI_NUM] | mixed',
\ 'mysqli_result::fetch_array(': '[ int $resulttype = MYSQLI_BOTH] | mixed',
\ 'mysqli_result::fetch_assoc(': 'void | array',
\ 'mysqli_result::fetch_field_direct(': 'int $fieldnr | object',
\ 'mysqli_result::fetch_field(': 'void | object',
\ 'mysqli_result::fetch_fields(': 'void | array',
\ 'mysqli_result::fetch_object(': '[ string $class_name [, array $params]] | object',
\ 'mysqli_result::fetch_row(': 'void | mixed',
\ 'mysqli_result::field_seek(': 'int $fieldnr | bool',
\ 'mysqli_result::free(': 'void | void',
\ 'mysqli_stmt::attr_get(': 'int $attr | int',
\ 'mysqli_stmt::attr_set(': 'int $attr, int $mode | bool',
\ 'mysqli_stmt::bind_param(': 'string $types, mixed &$var1 [, mixed &$...] | bool',
\ 'mysqli_stmt::bind_result(': 'mixed &$var1 [, mixed &$...] | bool',
\ 'mysqli_stmt::close(': 'void | bool',
\ 'mysqli_stmt::data_seek(': 'int $offset | void',
\ 'mysqli_stmt::execute(': 'void | bool',
\ 'mysqli_stmt::fetch(': 'void | bool',
\ 'mysqli_stmt::free_result(': 'void | void',
\ 'mysqli_stmt::get_result(': 'void | mysqli_result',
\ 'mysqli_stmt::get_warnings(': 'mysqli_stmt $stmt | object',
\ 'mysqli_stmt::prepare(': 'string $query | mixed',
\ 'mysqli_stmt::reset(': 'void | bool',
\ 'mysqli_stmt::result_metadata(': 'void | mysqli_result',
\ 'mysqli_stmt::send_long_data(': 'int $param_nr, string $data | bool',
\ 'mysqli_stmt::store_result(': 'void | bool',
\ 'mysqli_warning::__construct(': 'void',
\ 'mysqli_warning::next(': 'void | void',
\ 'mysqli::__construct(': '[ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]]',
\ 'mysqli::autocommit(': 'bool $mode | bool',
\ 'mysqli::change_user(': 'string $user, string $password, string $database | bool',
\ 'mysqli::character_set_name(': 'void | string',
\ 'mysqli::close(': 'void | bool',
\ 'mysqli::commit(': 'void | bool',
\ 'mysqli::debug(': 'string $message | bool',
\ 'mysqli::dump_debug_info(': 'void | bool',
\ 'mysqli::get_charset(': 'void | object',
\ 'mysqli::get_client_info(': 'void | string',
\ 'mysqli::get_connection_stats(': 'void | bool',
\ 'mysqli::get_warnings(': 'void | mysqli_warning',
\ 'mysqli::init(': 'void | mysqli',
\ 'mysqli::kill(': 'int $processid | bool',
\ 'mysqli::more_results(': 'void | bool',
\ 'mysqli::multi_query(': 'string $query | bool',
\ 'mysqli::next_result(': 'void | bool',
\ 'mysqli::options(': 'int $option, mixed $value | bool',
\ 'mysqli::ping(': 'void | bool',
\ 'mysqli::poll(': 'array &$read, array &$error, array &$reject, int $sec [, int $usec] | int',
\ 'mysqli::prepare(': 'string $query | mysqli_stmt',
\ 'mysqli::query(': 'string $query [, int $resultmode = MYSQLI_STORE_RESULT] | mixed',
\ 'mysqli::real_connect(': '[ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]] | bool',
\ 'mysqli::escape_string(': 'string $escapestr | string',
\ 'mysqli::real_query(': 'string $query | bool',
\ 'mysqli::reap_async_query(': 'void | mysqli_result',
\ 'mysqli::refresh(': 'int $options | bool',
\ 'mysqli::rollback(': 'void | bool',
\ 'mysqli::rpl_query_type(': 'string $query | int',
\ 'mysqli::select_db(': 'string $dbname | bool',
\ 'mysqli::send_query(': 'string $query | bool',
\ 'mysqli::set_charset(': 'string $charset | bool',
\ 'mysqli::set_local_infile_handler(': 'mysqli $link, callable $read_func | bool',
\ 'mysqli::ssl_set(': 'string $key, string $cert, string $ca, string $capath, string $cipher | bool',
\ 'mysqli::stat(': 'void | string',
\ 'mysqli::stmt_init(': 'void | mysqli_stmt',
\ 'mysqli::store_result(': 'void | mysqli_result',
\ 'mysqli::use_result(': 'void | mysqli_result',
\ 'MysqlndUhConnection::changeUser(': 'mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len | bool',
\ 'MysqlndUhConnection::charsetName(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::close(': 'mysqlnd_connection $connection, int $close_type | bool',
\ 'MysqlndUhConnection::connect(': 'mysqlnd_connection $connection, string $host, string $use", string $password, string $database, int $port, string $socket, int $mysql_flags | bool',
\ 'MysqlndUhConnection::__construct(': 'void',
\ 'MysqlndUhConnection::endPSession(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::escapeString(': 'mysqlnd_connection $connection, string $escape_string | string',
\ 'MysqlndUhConnection::getAffectedRows(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getErrorNumber(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getErrorString(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getFieldCount(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getHostInformation(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getLastInsertId(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getLastMessage(': 'mysqlnd_connection $connection | void',
\ 'MysqlndUhConnection::getProtocolInformation(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getServerInformation(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getServerStatistics(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getServerVersion(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getSqlstate(': 'mysqlnd_connection $connection | string',
\ 'MysqlndUhConnection::getStatistics(': 'mysqlnd_connection $connection | array',
\ 'MysqlndUhConnection::getThreadId(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::getWarningCount(': 'mysqlnd_connection $connection | int',
\ 'MysqlndUhConnection::init(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::killConnection(': 'mysqlnd_connection $connection, int $pid | bool',
\ 'MysqlndUhConnection::listFields(': 'mysqlnd_connection $connection, string $table, string $achtung_wild | array',
\ 'MysqlndUhConnection::listMethod(': 'mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1 | void',
\ 'MysqlndUhConnection::moreResults(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::nextResult(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::ping(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::query(': 'mysqlnd_connection $connection, string $query | bool',
\ 'MysqlndUhConnection::queryReadResultsetHeader(': 'mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt | bool',
\ 'MysqlndUhConnection::reapQuery(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::refreshServer(': 'mysqlnd_connection $connection, int $options | bool',
\ 'MysqlndUhConnection::restartPSession(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::selectDb(': 'mysqlnd_connection $connection, string $database | bool',
\ 'MysqlndUhConnection::sendClose(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::sendQuery(': 'mysqlnd_connection $connection, string $query | bool',
\ 'MysqlndUhConnection::serverDumpDebugInformation(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::setAutocommit(': 'mysqlnd_connection $connection, int $mode | bool',
\ 'MysqlndUhConnection::setCharset(': 'mysqlnd_connection $connection, string $charset | bool',
\ 'MysqlndUhConnection::setClientOption(': 'mysqlnd_connection $connection, int $option, int $value | bool',
\ 'MysqlndUhConnection::setServerOption(': 'mysqlnd_connection $connection, int $option | void',
\ 'MysqlndUhConnection::shutdownServer(': 'string $MYSQLND_UH_RES_MYSQLND_NAME, string $"level" | void',
\ 'MysqlndUhConnection::simpleCommand(': 'mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status | bool',
\ 'MysqlndUhConnection::simpleCommandHandleResponse(': 'mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status | bool',
\ 'MysqlndUhConnection::sslSet(': 'mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher | bool',
\ 'MysqlndUhConnection::stmtInit(': 'mysqlnd_connection $connection | resource',
\ 'MysqlndUhConnection::storeResult(': 'mysqlnd_connection $connection | resource',
\ 'MysqlndUhConnection::txCommit(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::txRollback(': 'mysqlnd_connection $connection | bool',
\ 'MysqlndUhConnection::useResult(': 'mysqlnd_connection $connection | resource',
\ 'MysqlndUhPreparedStatement::__construct(': 'void',
\ 'MysqlndUhPreparedStatement::execute(': 'mysqlnd_prepared_statement $statement | bool',
\ 'MysqlndUhPreparedStatement::prepare(': 'mysqlnd_prepared_statement $statement, string $query | bool',
\ 'NoRewindIterator::__construct(': 'Iterator $iterator',
\ 'NoRewindIterator::current(': 'void | mixed',
\ 'NoRewindIterator::getInnerIterator(': 'void | iterator',
\ 'NoRewindIterator::key(': 'void | mixed',
\ 'NoRewindIterator::next(': 'void | void',
\ 'NoRewindIterator::rewind(': 'void | void',
\ 'NoRewindIterator::valid(': 'void | bool',
\ 'Normalizer::isNormalized(': 'string $input [, string $form = Normalizer::FORM_C] | bool',
\ 'Normalizer::normalize(': 'string $input [, string $form = Normalizer::FORM_C] | string',
\ 'NumberFormatter::__construct(': 'string $locale, int $style [, string $pattern]',
\ 'NumberFormatter::create(': 'string $locale, int $style [, string $pattern] | NumberFormatter',
\ 'NumberFormatter::formatCurrency(': 'float $value, string $currency | string',
\ 'NumberFormatter::format(': 'number $value [, int $type] | string',
\ 'NumberFormatter::getAttribute(': 'int $attr | int',
\ 'NumberFormatter::getErrorCode(': 'void | int',
\ 'NumberFormatter::getErrorMessage(': 'void | string',
\ 'NumberFormatter::getLocale(': '[ int $type] | string',
\ 'NumberFormatter::getPattern(': 'void | string',
\ 'NumberFormatter::getSymbol(': 'int $attr | string',
\ 'NumberFormatter::getTextAttribute(': 'int $attr | string',
\ 'NumberFormatter::parseCurrency(': 'string $value, string &$currency [, int &$position] | float',
\ 'NumberFormatter::parse(': 'string $value [, int $type [, int &$position]] | mixed',
\ 'NumberFormatter::setAttribute(': 'int $attr, int $value | bool',
\ 'NumberFormatter::setPattern(': 'string $pattern | bool',
\ 'NumberFormatter::setSymbol(': 'int $attr, string $value | bool',
\ 'NumberFormatter::setTextAttribute(': 'int $attr, string $value | bool',
\ 'OAuth::__construct(': 'string $consumer_key, string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0]]',
\ 'OAuth::__destruct(': 'void | void',
\ 'OAuth::disableDebug(': 'void | bool',
\ 'OAuth::disableRedirects(': 'void | bool',
\ 'OAuth::disableSSLChecks(': 'void | bool',
\ 'OAuth::enableDebug(': 'void | bool',
\ 'OAuth::enableRedirects(': 'void | bool',
\ 'OAuth::enableSSLChecks(': 'void | bool',
\ 'OAuth::fetch(': 'string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers]]] | mixed',
\ 'OAuth::generateSignature(': 'string $http_method, string $url [, mixed $extra_parameters] | string',
\ 'OAuth::getAccessToken(': 'string $access_token_url [, string $auth_session_handle [, string $verifier_token]] | array',
\ 'OAuth::getCAPath(': 'void | array',
\ 'OAuth::getLastResponse(': 'void | string',
\ 'OAuth::getLastResponseHeaders(': 'void | string',
\ 'OAuth::getLastResponseInfo(': 'void | array',
\ 'OAuth::getRequestHeader(': 'string $http_method, string $url [, mixed $extra_parameters] | string',
\ 'OAuth::getRequestToken(': 'string $request_token_url [, string $callback_url] | array',
\ 'OAuth::setAuthType(': 'int $auth_type | mixed',
\ 'OAuth::setCAPath(': '[ string $ca_path [, string $ca_info]] | mixed',
\ 'OAuth::setNonce(': 'string $nonce | mixed',
\ 'OAuth::setRequestEngine(': 'int $reqengine | void',
\ 'OAuth::setRSACertificate(': 'string $cert | mixed',
\ 'OAuth::setSSLChecks(': 'int $sslcheck | bool',
\ 'OAuth::setTimestamp(': 'string $timestamp | mixed',
\ 'OAuth::setToken(': 'string $token, string $token_secret | bool',
\ 'OAuth::setVersion(': 'string $version | bool',
\ 'OAuthException::getMessage(': 'void | string',
\ 'OAuthException::getPrevious(': 'void | Exception',
\ 'OAuthException::getCode(': 'void | mixed',
\ 'OAuthException::getFile(': 'void | string',
\ 'OAuthException::getLine(': 'void | int',
\ 'OAuthException::getTrace(': 'void | array',
\ 'OAuthException::getTraceAsString(': 'void | string',
\ 'OAuthException::__toString(': 'void | string',
\ 'OAuthException::__clone(': 'void | void',
\ 'OAuthProvider::addRequiredParameter(': 'string $req_params | bool',
\ 'OAuthProvider::callconsumerHandler(': 'void | void',
\ 'OAuthProvider::callTimestampNonceHandler(': 'void | void',
\ 'OAuthProvider::calltokenHandler(': 'void | void',
\ 'OAuthProvider::checkOAuthRequest(': '[ string $uri [, string $method]] | void',
\ 'OAuthProvider::__construct(': '[ array $params_array]',
\ 'OAuthProvider::consumerHandler(': 'callable $callback_function | void',
\ 'OAuthProvider::generateToken(': 'int $size [, bool $strong = false] | string',
\ 'OAuthProvider::is2LeggedEndpoint(': 'mixed $params_array | void',
\ 'OAuthProvider::isRequestTokenEndpoint(': 'bool $will_issue_request_token | void',
\ 'OAuthProvider::removeRequiredParameter(': 'string $req_params | bool',
\ 'OAuthProvider::reportProblem(': 'string $oauthexception [, bool $send_headers = true] | string',
\ 'OAuthProvider::setParam(': 'string $param_key [, mixed $param_val] | bool',
\ 'OAuthProvider::setRequestTokenPath(': 'string $path | bool',
\ 'OAuthProvider::timestampNonceHandler(': 'callable $callback_function | void',
\ 'OAuthProvider::tokenHandler(': 'callable $callback_function | void',
\ 'OuterIterator::getInnerIterator(': 'void | Iterator',
\ 'OuterIterator::current(': 'void | mixed',
\ 'OuterIterator::key(': 'void | scalar',
\ 'OuterIterator::next(': 'void | void',
\ 'OuterIterator::rewind(': 'void | void',
\ 'OuterIterator::valid(': 'void | boolean',
\ 'OutOfBoundsException::getMessage(': 'void | string',
\ 'OutOfBoundsException::getPrevious(': 'void | Exception',
\ 'OutOfBoundsException::getCode(': 'void | mixed',
\ 'OutOfBoundsException::getFile(': 'void | string',
\ 'OutOfBoundsException::getLine(': 'void | int',
\ 'OutOfBoundsException::getTrace(': 'void | array',
\ 'OutOfBoundsException::getTraceAsString(': 'void | string',
\ 'OutOfBoundsException::__toString(': 'void | string',
\ 'OutOfBoundsException::__clone(': 'void | void',
\ 'OutOfRangeException::getMessage(': 'void | string',
\ 'OutOfRangeException::getPrevious(': 'void | Exception',
\ 'OutOfRangeException::getCode(': 'void | mixed',
\ 'OutOfRangeException::getFile(': 'void | string',
\ 'OutOfRangeException::getLine(': 'void | int',
\ 'OutOfRangeException::getTrace(': 'void | array',
\ 'OutOfRangeException::getTraceAsString(': 'void | string',
\ 'OutOfRangeException::__toString(': 'void | string',
\ 'OutOfRangeException::__clone(': 'void | void',
\ 'OverflowException::getMessage(': 'void | string',
\ 'OverflowException::getPrevious(': 'void | Exception',
\ 'OverflowException::getCode(': 'void | mixed',
\ 'OverflowException::getFile(': 'void | string',
\ 'OverflowException::getLine(': 'void | int',
\ 'OverflowException::getTrace(': 'void | array',
\ 'OverflowException::getTraceAsString(': 'void | string',
\ 'OverflowException::__toString(': 'void | string',
\ 'OverflowException::__clone(': 'void | void',
\ 'ParentIterator::accept(': 'void | bool',
\ 'ParentIterator::__construct(': 'RecursiveIterator $iterator',
\ 'ParentIterator::getChildren(': 'void | ParentIterator',
\ 'ParentIterator::hasChildren(': 'void | bool',
\ 'ParentIterator::next(': 'void | void',
\ 'ParentIterator::rewind(': 'void | void',
\ 'PDO::__construct(': 'string $dsn [, string $username [, string $password [, array $driver_options]]]',
\ 'PDO::beginTransaction(': 'void | bool',
\ 'PDO::commit(': 'void | bool',
\ 'PDO::errorCode(': 'void | mixed',
\ 'PDO::errorInfo(': 'void | array',
\ 'PDO::exec(': 'string $statement | int',
\ 'PDO::getAttribute(': 'int $attribute | mixed',
\ 'PDO::getAvailableDrivers(': 'void | array',
\ 'PDO::inTransaction(': 'void | bool',
\ 'PDO::lastInsertId(': '[ string $name = NULL] | string',
\ 'PDO::prepare(': 'string $statement [, array $driver_options = array()] | PDOStatement',
\ 'PDO::query(': 'string $statement | PDOStatement',
\ 'PDO::quote(': 'string $string [, int $parameter_type = PDO::PARAM_STR] | string',
\ 'PDO::rollBack(': 'void | bool',
\ 'PDO::setAttribute(': 'int $attribute, mixed $value | bool',
\ 'PDOException::getMessage(': 'void | string',
\ 'PDOException::getPrevious(': 'void | Exception',
\ 'PDOException::getCode(': 'void | mixed',
\ 'PDOException::getFile(': 'void | string',
\ 'PDOException::getLine(': 'void | int',
\ 'PDOException::getTrace(': 'void | array',
\ 'PDOException::getTraceAsString(': 'void | string',
\ 'PDOException::__toString(': 'void | string',
\ 'PDOException::__clone(': 'void | void',
\ 'PDOStatement::bindColumn(': 'mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]] | bool',
\ 'PDOStatement::bindParam(': 'mixed $parameter, mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options]]] | bool',
\ 'PDOStatement::bindValue(': 'mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR] | bool',
\ 'PDOStatement::closeCursor(': 'void | bool',
\ 'PDOStatement::columnCount(': 'void | int',
\ 'PDOStatement::debugDumpParams(': 'void | bool',
\ 'PDOStatement::errorCode(': 'void | string',
\ 'PDOStatement::errorInfo(': 'void | array',
\ 'PDOStatement::execute(': '[ array $input_parameters] | bool',
\ 'PDOStatement::fetch(': '[ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0]]] | mixed',
\ 'PDOStatement::fetchAll(': '[ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array()]]] | array',
\ 'PDOStatement::fetchColumn(': '[ int $column_number = 0] | string',
\ 'PDOStatement::fetchObject(': '[ string $class_name = "stdClass" [, array $ctor_args]] | mixed',
\ 'PDOStatement::getAttribute(': 'int $attribute | mixed',
\ 'PDOStatement::getColumnMeta(': 'int $column | array',
\ 'PDOStatement::nextRowset(': 'void | bool',
\ 'PDOStatement::rowCount(': 'void | int',
\ 'PDOStatement::setAttribute(': 'int $attribute, mixed $value | bool',
\ 'PDOStatement::setFetchMode(': 'int $mode | bool',
\ 'Phar::addEmptyDir(': 'string $dirname | void',
\ 'Phar::addFile(': 'string $file [, string $localname] | void',
\ 'Phar::addFromString(': 'string $localname, string $contents | void',
\ 'Phar::apiVersion(': 'void | string',
\ 'Phar::buildFromDirectory(': 'string $base_dir [, string $regex] | array',
\ 'Phar::buildFromIterator(': 'Iterator $iter [, string $base_directory] | array',
\ 'Phar::canCompress(': '[ int $type = 0] | bool',
\ 'Phar::canWrite(': 'void | bool',
\ 'Phar::compress(': 'int $compression [, string $extension] | object',
\ 'Phar::compressAllFilesBZIP2(': 'void | bool',
\ 'Phar::compressAllFilesGZ(': 'void | bool',
\ 'Phar::compressFiles(': 'int $compression | void',
\ 'Phar::__construct(': 'string $fname [, int $flags [, string $alias]]',
\ 'Phar::convertToData(': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | PharData',
\ 'Phar::convertToExecutable(': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | Phar',
\ 'Phar::copy(': 'string $oldfile, string $newfile | bool',
\ 'Phar::count(': 'void | int',
\ 'Phar::createDefaultStub(': '[ string $indexfile [, string $webindexfile]] | string',
\ 'Phar::decompress(': '[ string $extension] | object',
\ 'Phar::decompressFiles(': 'void | bool',
\ 'Phar::delMetadata(': 'void | bool',
\ 'Phar::delete(': 'string $entry | bool',
\ 'Phar::extractTo(': 'string $pathto [, string|array $files [, bool $overwrite = false]] | bool',
\ 'Phar::getMetadata(': 'void | mixed',
\ 'Phar::getModified(': 'void | bool',
\ 'Phar::getSignature(': 'void | array',
\ 'Phar::getStub(': 'void | string',
\ 'Phar::getSupportedCompression(': 'void | array',
\ 'Phar::getSupportedSignatures(': 'void | array',
\ 'Phar::getVersion(': 'void | string',
\ 'Phar::hasMetadata(': 'void | bool',
\ 'Phar::interceptFileFuncs(': 'void | void',
\ 'Phar::isBuffering(': 'void | bool',
\ 'Phar::isCompressed(': 'void | mixed',
\ 'Phar::isFileFormat(': 'int $format | bool',
\ 'Phar::isValidPharFilename(': 'string $filename [, bool $executable = true] | bool',
\ 'Phar::isWritable(': 'void | bool',
\ 'Phar::loadPhar(': 'string $filename [, string $alias] | bool',
\ 'Phar::mapPhar(': '[ string $alias [, int $dataoffset = 0]] | bool',
\ 'Phar::mount(': 'string $pharpath, string $externalpath | void',
\ 'Phar::mungServer(': 'array $munglist | void',
\ 'Phar::offsetExists(': 'string $offset | bool',
\ 'Phar::offsetGet(': 'string $offset | int',
\ 'Phar::offsetSet(': 'string $offset, string $value | void',
\ 'Phar::offsetUnset(': 'string $offset | bool',
\ 'Phar::running(': '[ bool $retphar = true] | string',
\ 'Phar::setAlias(': 'string $alias | bool',
\ 'Phar::setDefaultStub(': '[ string $index [, string $webindex]] | bool',
\ 'Phar::setMetadata(': 'mixed $metadata | void',
\ 'Phar::setSignatureAlgorithm(': 'int $sigtype [, string $privatekey] | void',
\ 'Phar::setStub(': 'string $stub | bool',
\ 'Phar::startBuffering(': 'void | void',
\ 'Phar::stopBuffering(': 'void | void',
\ 'Phar::uncompressAllFiles(': 'void | bool',
\ 'Phar::unlinkArchive(': 'string $archive | bool',
\ 'Phar::webPhar(': '[ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]] | void',
\ 'PharData::addEmptyDir(': 'string $dirname | bool',
\ 'PharData::addFile(': 'string $file [, string $localname] | void',
\ 'PharData::addFromString(': 'string $localname, string $contents | bool',
\ 'PharData::buildFromDirectory(': 'string $base_dir [, string $regex] | array',
\ 'PharData::buildFromIterator(': 'Iterator $iter [, string $base_directory] | array',
\ 'PharData::compress(': 'int $compression [, string $extension] | object',
\ 'PharData::compressFiles(': 'int $compression | bool',
\ 'PharData::__construct(': 'string $fname [, int $flags [, string $alias [, int $format = Phar::TAR]]]',
\ 'PharData::convertToData(': '[ int $format [, int $compression [, string $extension]]] | PharData',
\ 'PharData::convertToExecutable(': '[ int $format [, int $compression [, string $extension]]] | Phar',
\ 'PharData::copy(': 'string $oldfile, string $newfile | bool',
\ 'PharData::decompress(': '[ string $extension] | object',
\ 'PharData::decompressFiles(': 'void | bool',
\ 'PharData::delMetadata(': 'void | bool',
\ 'PharData::delete(': 'string $entry | bool',
\ 'PharData::extractTo(': 'string $pathto [, string|array $files [, bool $overwrite = false]] | bool',
\ 'PharData::isWritable(': 'void | bool',
\ 'PharData::offsetSet(': 'string $offset, string $value | void',
\ 'PharData::offsetUnset(': 'string $offset | bool',
\ 'PharData::setAlias(': 'string $alias | bool',
\ 'PharData::setDefaultStub(': '[ string $index [, string $webindex]] | bool',
\ 'PharData::setMetadata(': 'mixed $metadata | void',
\ 'PharData::setSignatureAlgorithm(': 'int $sigtype | void',
\ 'PharData::setStub(': 'string $stub | bool',
\ 'PharData::apiVersion(': 'void | string',
\ 'PharData::canCompress(': '[ int $type = 0] | bool',
\ 'PharData::canWrite(': 'void | bool',
\ 'PharData::compressAllFilesBZIP2(': 'void | bool',
\ 'PharData::compressAllFilesGZ(': 'void | bool',
\ 'PharData::count(': 'void | int',
\ 'PharData::createDefaultStub(': '[ string $indexfile [, string $webindexfile]] | string',
\ 'PharData::getMetadata(': 'void | mixed',
\ 'PharData::getModified(': 'void | bool',
\ 'PharData::getSignature(': 'void | array',
\ 'PharData::getStub(': 'void | string',
\ 'PharData::getSupportedCompression(': 'void | array',
\ 'PharData::getSupportedSignatures(': 'void | array',
\ 'PharData::getVersion(': 'void | string',
\ 'PharData::hasMetadata(': 'void | bool',
\ 'PharData::interceptFileFuncs(': 'void | void',
\ 'PharData::isBuffering(': 'void | bool',
\ 'PharData::isCompressed(': 'void | mixed',
\ 'PharData::isFileFormat(': 'int $format | bool',
\ 'PharData::isValidPharFilename(': 'string $filename [, bool $executable = true] | bool',
\ 'PharData::loadPhar(': 'string $filename [, string $alias] | bool',
\ 'PharData::mapPhar(': '[ string $alias [, int $dataoffset = 0]] | bool',
\ 'PharData::mount(': 'string $pharpath, string $externalpath | void',
\ 'PharData::mungServer(': 'array $munglist | void',
\ 'PharData::offsetExists(': 'string $offset | bool',
\ 'PharData::offsetGet(': 'string $offset | int',
\ 'PharData::running(': '[ bool $retphar = true] | string',
\ 'PharData::startBuffering(': 'void | void',
\ 'PharData::stopBuffering(': 'void | void',
\ 'PharData::uncompressAllFiles(': 'void | bool',
\ 'PharData::unlinkArchive(': 'string $archive | bool',
\ 'PharData::webPhar(': '[ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]] | void',
\ 'PharFileInfo::chmod(': 'int $permissions | void',
\ 'PharFileInfo::compress(': 'int $compression | bool',
\ 'PharFileInfo::__construct(': 'string $entry',
\ 'PharFileInfo::decompress(': 'void | bool',
\ 'PharFileInfo::delMetadata(': 'void | bool',
\ 'PharFileInfo::getCRC32(': 'void | int',
\ 'PharFileInfo::getCompressedSize(': 'void | int',
\ 'PharFileInfo::getMetadata(': 'void | mixed',
\ 'PharFileInfo::getPharFlags(': 'void | int',
\ 'PharFileInfo::hasMetadata(': 'void | bool',
\ 'PharFileInfo::isCRCChecked(': 'void | bool',
\ 'PharFileInfo::isCompressed(': '[ int $compression_type = 9021976] | bool',
\ 'PharFileInfo::isCompressedBZIP2(': 'void | bool',
\ 'PharFileInfo::isCompressedGZ(': 'void | bool',
\ 'PharFileInfo::setCompressedBZIP2(': 'void | bool',
\ 'PharFileInfo::setCompressedGZ(': 'void | bool',
\ 'PharFileInfo::setMetadata(': 'mixed $metadata | void',
\ 'PharFileInfo::setUncompressed(': 'void | bool',
\ 'php_user_filter::filter(': 'resource $in, resource $out, int &$consumed, bool $closing | int',
\ 'php_user_filter::onClose(': 'void | void',
\ 'php_user_filter::onCreate(': 'void | bool',
\ 'QuickHashIntHash::add(': 'int $key [, int $value] | bool',
\ 'QuickHashIntHash::__construct(': 'int $size [, int $options]',
\ 'QuickHashIntHash::delete(': 'int $key | bool',
\ 'QuickHashIntHash::exists(': 'int $key | bool',
\ 'QuickHashIntHash::get(': 'int $key | int',
\ 'QuickHashIntHash::getSize(': 'void | int',
\ 'QuickHashIntHash::loadFromFile(': 'string $filename [, int $options] | QuickHashIntHash',
\ 'QuickHashIntHash::loadFromString(': 'string $contents [, int $options] | QuickHashIntHash',
\ 'QuickHashIntHash::saveToFile(': 'string $filename | void',
\ 'QuickHashIntHash::saveToString(': 'void | string',
\ 'QuickHashIntHash::set(': 'int $key, int $value | bool',
\ 'QuickHashIntHash::update(': 'int $key, int $value | bool',
\ 'QuickHashIntSet::add(': 'int $key | bool',
\ 'QuickHashIntSet::__construct(': 'int $size [, int $options]',
\ 'QuickHashIntSet::delete(': 'int $key | bool',
\ 'QuickHashIntSet::exists(': 'int $key | bool',
\ 'QuickHashIntSet::getSize(': 'void | int',
\ 'QuickHashIntSet::loadFromFile(': 'string $filename [, int $size [, int $options]] | QuickHashIntSet',
\ 'QuickHashIntSet::loadFromString(': 'string $contents [, int $size [, int $options]] | QuickHashIntSet',
\ 'QuickHashIntSet::saveToFile(': 'string $filename | void',
\ 'QuickHashIntSet::saveToString(': 'void | string',
\ 'QuickHashIntStringHash::add(': 'int $key, string $value | bool',
\ 'QuickHashIntStringHash::__construct(': 'int $size [, int $options = 0]',
\ 'QuickHashIntStringHash::delete(': 'int $key | bool',
\ 'QuickHashIntStringHash::exists(': 'int $key | bool',
\ 'QuickHashIntStringHash::get(': 'int $key | mixed',
\ 'QuickHashIntStringHash::getSize(': 'void | int',
\ 'QuickHashIntStringHash::loadFromFile(': 'string $filename [, int $size = 0 [, int $options = 0]] | QuickHashIntStringHash',
\ 'QuickHashIntStringHash::loadFromString(': 'string $contents [, int $size = 0 [, int $options = 0]] | QuickHashIntStringHash',
\ 'QuickHashIntStringHash::saveToFile(': 'string $filename | void',
\ 'QuickHashIntStringHash::saveToString(': 'void | string',
\ 'QuickHashIntStringHash::set(': 'int $key, string $value | int',
\ 'QuickHashIntStringHash::update(': 'int $key, string $value | bool',
\ 'QuickHashStringIntHash::add(': 'string $key, int $value | bool',
\ 'QuickHashStringIntHash::__construct(': 'int $size [, int $options = 0]',
\ 'QuickHashStringIntHash::delete(': 'string $key | bool',
\ 'QuickHashStringIntHash::exists(': 'string $key | bool',
\ 'QuickHashStringIntHash::get(': 'string $key | mixed',
\ 'QuickHashStringIntHash::getSize(': 'void | int',
\ 'QuickHashStringIntHash::loadFromFile(': 'string $filename [, int $size = 0 [, int $options = 0]] | QuickHashStringIntHash',
\ 'QuickHashStringIntHash::loadFromString(': 'string $contents [, int $size = 0 [, int $options = 0]] | QuickHashStringIntHash',
\ 'QuickHashStringIntHash::saveToFile(': 'string $filename | void',
\ 'QuickHashStringIntHash::saveToString(': 'void | string',
\ 'QuickHashStringIntHash::set(': 'string $key, int $value | int',
\ 'QuickHashStringIntHash::update(': 'string $key, int $value | bool',
\ 'RangeException::getMessage(': 'void | string',
\ 'RangeException::getPrevious(': 'void | Exception',
\ 'RangeException::getCode(': 'void | mixed',
\ 'RangeException::getFile(': 'void | string',
\ 'RangeException::getLine(': 'void | int',
\ 'RangeException::getTrace(': 'void | array',
\ 'RangeException::getTraceAsString(': 'void | string',
\ 'RangeException::__toString(': 'void | string',
\ 'RangeException::__clone(': 'void | void',
\ 'RarArchive::close(': 'void | bool',
\ 'RarArchive::getComment(': 'void | string',
\ 'RarArchive::getEntries(': 'void | array',
\ 'RarArchive::getEntry(': 'string $entryname | RarEntry',
\ 'RarArchive::isBroken(': 'void | bool',
\ 'RarArchive::isSolid(': 'void | bool',
\ 'RarArchive::open(': 'string $filename [, string $password = NULL [, callable $volume_callback = NULL]] | RarArchive',
\ 'RarArchive::setAllowBroken(': 'bool $allow_broken | bool',
\ 'RarArchive::__toString(': 'void | string',
\ 'RarEntry::extract(': 'string $dir [, string $filepath = '''' [, string $password = NULL [, bool $extended_data = false]]] | bool',
\ 'RarEntry::getAttr(': 'void | int',
\ 'RarEntry::getCrc(': 'void | string',
\ 'RarEntry::getFileTime(': 'void | string',
\ 'RarEntry::getHostOs(': 'void | int',
\ 'RarEntry::getMethod(': 'void | int',
\ 'RarEntry::getName(': 'void | string',
\ 'RarEntry::getPackedSize(': 'void | int',
\ 'RarEntry::getStream(': '[ string $password] | resource',
\ 'RarEntry::getUnpackedSize(': 'void | int',
\ 'RarEntry::getVersion(': 'void | int',
\ 'RarEntry::isDirectory(': 'void | bool',
\ 'RarEntry::isEncrypted(': 'void | bool',
\ 'RarEntry::__toString(': 'void | string',
\ 'RarException::isUsingExceptions(': 'void | bool',
\ 'RarException::setUsingExceptions(': 'bool $using_exceptions | void',
\ 'RarException::getMessage(': 'void | string',
\ 'RarException::getPrevious(': 'void | Exception',
\ 'RarException::getCode(': 'void | mixed',
\ 'RarException::getFile(': 'void | string',
\ 'RarException::getLine(': 'void | int',
\ 'RarException::getTrace(': 'void | array',
\ 'RarException::getTraceAsString(': 'void | string',
\ 'RarException::__toString(': 'void | string',
\ 'RarException::__clone(': 'void | void',
\ 'RecursiveArrayIterator::getChildren(': 'void | RecursiveArrayIterator',
\ 'RecursiveArrayIterator::hasChildren(': 'void | bool',
\ 'RecursiveArrayIterator::append(': 'mixed $value | void',
\ 'RecursiveArrayIterator::asort(': 'void | void',
\ 'RecursiveArrayIterator::__construct(': '[ mixed $array = array() [, int $flags = 0]]',
\ 'RecursiveArrayIterator::count(': 'void | int',
\ 'RecursiveArrayIterator::current(': 'void | mixed',
\ 'RecursiveArrayIterator::getArrayCopy(': 'void | array',
\ 'RecursiveArrayIterator::getFlags(': 'void | void',
\ 'RecursiveArrayIterator::key(': 'void | mixed',
\ 'RecursiveArrayIterator::ksort(': 'void | void',
\ 'RecursiveArrayIterator::natcasesort(': 'void | void',
\ 'RecursiveArrayIterator::natsort(': 'void | void',
\ 'RecursiveArrayIterator::next(': 'void | void',
\ 'RecursiveArrayIterator::offsetExists(': 'string $index | void',
\ 'RecursiveArrayIterator::offsetGet(': 'string $index | mixed',
\ 'RecursiveArrayIterator::offsetSet(': 'string $index, string $newval | void',
\ 'RecursiveArrayIterator::offsetUnset(': 'string $index | void',
\ 'RecursiveArrayIterator::rewind(': 'void | void',
\ 'RecursiveArrayIterator::seek(': 'int $position | void',
\ 'RecursiveArrayIterator::serialize(': 'void | string',
\ 'RecursiveArrayIterator::setFlags(': 'string $flags | void',
\ 'RecursiveArrayIterator::uasort(': 'string $cmp_function | void',
\ 'RecursiveArrayIterator::uksort(': 'string $cmp_function | void',
\ 'RecursiveArrayIterator::unserialize(': 'string $serialized | string',
\ 'RecursiveArrayIterator::valid(': 'void | bool',
\ 'RecursiveCachingIterator::__construct(': 'Iterator $iterator [, string $flags = self::CALL_TOSTRING]',
\ 'RecursiveCachingIterator::getChildren(': 'void | RecursiveCachingIterator',
\ 'RecursiveCachingIterator::hasChildren(': 'void | bool',
\ 'RecursiveCachingIterator::count(': 'void | int',
\ 'RecursiveCachingIterator::current(': 'void | void',
\ 'RecursiveCachingIterator::getCache(': 'void | void',
\ 'RecursiveCachingIterator::getFlags(': 'void | void',
\ 'RecursiveCachingIterator::getInnerIterator(': 'void | Iterator',
\ 'RecursiveCachingIterator::hasNext(': 'void | void',
\ 'RecursiveCachingIterator::key(': 'void | scalar',
\ 'RecursiveCachingIterator::next(': 'void | void',
\ 'RecursiveCachingIterator::offsetExists(': 'string $index | void',
\ 'RecursiveCachingIterator::offsetGet(': 'string $index | void',
\ 'RecursiveCachingIterator::offsetSet(': 'string $index, string $newval | void',
\ 'RecursiveCachingIterator::offsetUnset(': 'string $index | void',
\ 'RecursiveCachingIterator::rewind(': 'void | void',
\ 'RecursiveCachingIterator::setFlags(': 'bitmask $flags | void',
\ 'RecursiveCachingIterator::__toString(': 'void | void',
\ 'RecursiveCachingIterator::valid(': 'void | void',
\ 'RecursiveCallbackFilterIterator::__construct(': 'RecursiveIterator $iterator, string $callback',
\ 'RecursiveCallbackFilterIterator::getChildren(': 'void | RecursiveCallbackFilterIterator',
\ 'RecursiveCallbackFilterIterator::hasChildren(': 'void | void',
\ 'RecursiveCallbackFilterIterator::accept(': 'void | string',
\ 'RecursiveDirectoryIterator::__construct(': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]',
\ 'RecursiveDirectoryIterator::getChildren(': 'void | mixed',
\ 'RecursiveDirectoryIterator::getSubPath(': 'void | string',
\ 'RecursiveDirectoryIterator::getSubPathname(': 'void | string',
\ 'RecursiveDirectoryIterator::hasChildren(': '[ bool $allow_links = false] | bool',
\ 'RecursiveDirectoryIterator::key(': 'void | string',
\ 'RecursiveDirectoryIterator::next(': 'void | void',
\ 'RecursiveDirectoryIterator::rewind(': 'void | void',
\ 'RecursiveDirectoryIterator::current(': 'void | mixed',
\ 'RecursiveDirectoryIterator::getFlags(': 'void | int',
\ 'RecursiveDirectoryIterator::setFlags(': '[ int $flags] | void',
\ 'RecursiveFilterIterator::__construct(': 'RecursiveIterator $iterator',
\ 'RecursiveFilterIterator::getChildren(': 'void | void',
\ 'RecursiveFilterIterator::hasChildren(': 'void | void',
\ 'RecursiveFilterIterator::accept(': 'void | bool',
\ 'RecursiveFilterIterator::current(': 'void | mixed',
\ 'RecursiveFilterIterator::getInnerIterator(': 'void | Iterator',
\ 'RecursiveFilterIterator::key(': 'void | mixed',
\ 'RecursiveFilterIterator::next(': 'void | void',
\ 'RecursiveFilterIterator::rewind(': 'void | void',
\ 'RecursiveFilterIterator::valid(': 'void | bool',
\ 'RecursiveIterator::getChildren(': 'void | RecursiveIterator',
\ 'RecursiveIterator::hasChildren(': 'void | bool',
\ 'RecursiveIterator::current(': 'void | mixed',
\ 'RecursiveIterator::key(': 'void | scalar',
\ 'RecursiveIterator::next(': 'void | void',
\ 'RecursiveIterator::rewind(': 'void | void',
\ 'RecursiveIterator::valid(': 'void | boolean',
\ 'RecursiveIteratorIterator::beginChildren(': 'void | void',
\ 'RecursiveIteratorIterator::beginIteration(': 'void | void',
\ 'RecursiveIteratorIterator::callGetChildren(': 'void | RecursiveIterator',
\ 'RecursiveIteratorIterator::callHasChildren(': 'void | bool',
\ 'RecursiveIteratorIterator::__construct(': 'Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0]]',
\ 'RecursiveIteratorIterator::current(': 'void | mixed',
\ 'RecursiveIteratorIterator::endChildren(': 'void | void',
\ 'RecursiveIteratorIterator::endIteration(': 'void | void',
\ 'RecursiveIteratorIterator::getDepth(': 'void | int',
\ 'RecursiveIteratorIterator::getInnerIterator(': 'void | iterator',
\ 'RecursiveIteratorIterator::getMaxDepth(': 'void | mixed',
\ 'RecursiveIteratorIterator::getSubIterator(': 'void | RecursiveIterator',
\ 'RecursiveIteratorIterator::key(': 'void | mixed',
\ 'RecursiveIteratorIterator::next(': 'void | void',
\ 'RecursiveIteratorIterator::nextElement(': 'void | void',
\ 'RecursiveIteratorIterator::rewind(': 'void | void',
\ 'RecursiveIteratorIterator::setMaxDepth(': '[ string $max_depth = -1] | void',
\ 'RecursiveIteratorIterator::valid(': 'void | bool',
\ 'RecursiveRegexIterator::__construct(': 'RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]',
\ 'RecursiveRegexIterator::getChildren(': 'void | RecursiveRegexIterator',
\ 'RecursiveRegexIterator::hasChildren(': 'void | bool',
\ 'RecursiveRegexIterator::accept(': 'void | bool',
\ 'RecursiveRegexIterator::getFlags(': 'void | int',
\ 'RecursiveRegexIterator::getMode(': 'void | int',
\ 'RecursiveRegexIterator::getPregFlags(': 'void | int',
\ 'RecursiveRegexIterator::getRegex(': 'void | string',
\ 'RecursiveRegexIterator::setFlags(': 'int $flags | void',
\ 'RecursiveRegexIterator::setMode(': 'int $mode | void',
\ 'RecursiveRegexIterator::setPregFlags(': 'int $preg_flags | void',
\ 'RecursiveTreeIterator::beginChildren(': 'void | void',
\ 'RecursiveTreeIterator::beginIteration(': 'void | RecursiveIterator',
\ 'RecursiveTreeIterator::callGetChildren(': 'void | RecursiveIterator',
\ 'RecursiveTreeIterator::callHasChildren(': 'void | bool',
\ 'RecursiveTreeIterator::__construct(': 'RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST]]]',
\ 'RecursiveTreeIterator::current(': 'void | string',
\ 'RecursiveTreeIterator::endChildren(': 'void | void',
\ 'RecursiveTreeIterator::endIteration(': 'void | void',
\ 'RecursiveTreeIterator::getEntry(': 'void | string',
\ 'RecursiveTreeIterator::getPostfix(': 'void | void',
\ 'RecursiveTreeIterator::getPrefix(': 'void | string',
\ 'RecursiveTreeIterator::key(': 'void | string',
\ 'RecursiveTreeIterator::next(': 'void | void',
\ 'RecursiveTreeIterator::nextElement(': 'void | void',
\ 'RecursiveTreeIterator::rewind(': 'void | void',
\ 'RecursiveTreeIterator::setPrefixPart(': 'int $part, string $value | void',
\ 'RecursiveTreeIterator::valid(': 'void | bool',
\ 'RecursiveTreeIterator::getDepth(': 'void | int',
\ 'RecursiveTreeIterator::getInnerIterator(': 'void | iterator',
\ 'RecursiveTreeIterator::getMaxDepth(': 'void | mixed',
\ 'RecursiveTreeIterator::getSubIterator(': 'void | RecursiveIterator',
\ 'RecursiveTreeIterator::setMaxDepth(': '[ string $max_depth = -1] | void',
\ 'Reflection::export(': 'Reflector $reflector [, bool $return = false] | string',
\ 'Reflection::getModifierNames(': 'int $modifiers | array',
\ 'ReflectionClass::__construct(': 'mixed $argument',
\ 'ReflectionClass::export(': 'mixed $argument [, bool $return = false] | string',
\ 'ReflectionClass::getConstant(': 'string $name | mixed',
\ 'ReflectionClass::getConstants(': 'void | array',
\ 'ReflectionClass::getConstructor(': 'void | ReflectionMethod',
\ 'ReflectionClass::getDefaultProperties(': 'void | array',
\ 'ReflectionClass::getDocComment(': 'void | string',
\ 'ReflectionClass::getEndLine(': 'void | int',
\ 'ReflectionClass::getExtension(': 'void | ReflectionExtension',
\ 'ReflectionClass::getExtensionName(': 'void | string',
\ 'ReflectionClass::getFileName(': 'void | string',
\ 'ReflectionClass::getInterfaceNames(': 'void | array',
\ 'ReflectionClass::getInterfaces(': 'void | array',
\ 'ReflectionClass::getMethod(': 'string $name | ReflectionMethod',
\ 'ReflectionClass::getMethods(': '[ string $filter] | array',
\ 'ReflectionClass::getModifiers(': 'void | int',
\ 'ReflectionClass::getName(': 'void | string',
\ 'ReflectionClass::getNamespaceName(': 'void | string',
\ 'ReflectionClass::getParentClass(': 'void | object',
\ 'ReflectionClass::getProperties(': '[ int $filter] | array',
\ 'ReflectionClass::getProperty(': 'string $name | ReflectionProperty',
\ 'ReflectionClass::getShortName(': 'void | string',
\ 'ReflectionClass::getStartLine(': 'void | int',
\ 'ReflectionClass::getStaticProperties(': 'void | array',
\ 'ReflectionClass::getStaticPropertyValue(': 'string $name | mixed',
\ 'ReflectionClass::getTraitAliases(': 'void | array',
\ 'ReflectionClass::getTraitNames(': 'void | array',
\ 'ReflectionClass::getTraits(': 'void | array',
\ 'ReflectionClass::hasConstant(': 'string $name | bool',
\ 'ReflectionClass::hasMethod(': 'string $name | bool',
\ 'ReflectionClass::hasProperty(': 'string $name | bool',
\ 'ReflectionClass::implementsInterface(': 'string $interface | bool',
\ 'ReflectionClass::inNamespace(': 'void | bool',
\ 'ReflectionClass::isAbstract(': 'void | bool',
\ 'ReflectionClass::isCloneable(': 'void | bool',
\ 'ReflectionClass::isFinal(': 'void | bool',
\ 'ReflectionClass::isInstance(': 'object $object | bool',
\ 'ReflectionClass::isInstantiable(': 'void | bool',
\ 'ReflectionClass::isInterface(': 'void | bool',
\ 'ReflectionClass::isInternal(': 'void | bool',
\ 'ReflectionClass::isIterateable(': 'void | bool',
\ 'ReflectionClass::isSubclassOf(': 'string $class | bool',
\ 'ReflectionClass::isTrait(': 'void | bool',
\ 'ReflectionClass::isUserDefined(': 'void | bool',
\ 'ReflectionClass::newInstance(': 'mixed $args [, mixed $...] | object',
\ 'ReflectionClass::newInstanceArgs(': '[ array $args] | object',
\ 'ReflectionClass::newInstanceWithoutConstructor(': 'void | object',
\ 'ReflectionClass::setStaticPropertyValue(': 'string $name, string $value | void',
\ 'ReflectionClass::__toString(': 'void | string',
\ 'ReflectionException::getMessage(': 'void | string',
\ 'ReflectionException::getPrevious(': 'void | Exception',
\ 'ReflectionException::getCode(': 'void | mixed',
\ 'ReflectionException::getFile(': 'void | string',
\ 'ReflectionException::getLine(': 'void | int',
\ 'ReflectionException::getTrace(': 'void | array',
\ 'ReflectionException::getTraceAsString(': 'void | string',
\ 'ReflectionException::__toString(': 'void | string',
\ 'ReflectionException::__clone(': 'void | void',
\ 'ReflectionExtension::__clone(': 'void | void',
\ 'ReflectionExtension::__construct(': 'string $name',
\ 'ReflectionExtension::export(': 'string $name [, string $return = false] | string',
\ 'ReflectionExtension::getClasses(': 'void | array',
\ 'ReflectionExtension::getClassNames(': 'void | array',
\ 'ReflectionExtension::getConstants(': 'void | array',
\ 'ReflectionExtension::getDependencies(': 'void | array',
\ 'ReflectionExtension::getFunctions(': 'void | array',
\ 'ReflectionExtension::getINIEntries(': 'void | array',
\ 'ReflectionExtension::getName(': 'void | string',
\ 'ReflectionExtension::getVersion(': 'void | string',
\ 'ReflectionExtension::info(': 'void | void',
\ 'ReflectionExtension::isPersistent(': 'void | void',
\ 'ReflectionExtension::isTemporary(': 'void | void',
\ 'ReflectionExtension::__toString(': 'void | string',
\ 'ReflectionFunction::__construct(': 'mixed $name',
\ 'ReflectionFunction::export(': 'string $name [, string $return] | string',
\ 'ReflectionFunction::getClosure(': 'void | Closure',
\ 'ReflectionFunction::invoke(': '[ mixed $parameter [, mixed $...]] | mixed',
\ 'ReflectionFunction::invokeArgs(': 'array $args | mixed',
\ 'ReflectionFunction::isDisabled(': 'void | bool',
\ 'ReflectionFunction::__toString(': 'void | string',
\ 'ReflectionFunction::__clone(': 'void | void',
\ 'ReflectionFunction::getClosureThis(': 'void | object',
\ 'ReflectionFunction::getDocComment(': 'void | string',
\ 'ReflectionFunction::getEndLine(': 'void | int',
\ 'ReflectionFunction::getExtension(': 'void | ReflectionExtension',
\ 'ReflectionFunction::getExtensionName(': 'void | string',
\ 'ReflectionFunction::getFileName(': 'void | string',
\ 'ReflectionFunction::getName(': 'void | string',
\ 'ReflectionFunction::getNamespaceName(': 'void | string',
\ 'ReflectionFunction::getNumberOfParameters(': 'void | int',
\ 'ReflectionFunction::getNumberOfRequiredParameters(': 'void | int',
\ 'ReflectionFunction::getParameters(': 'void | array',
\ 'ReflectionFunction::getShortName(': 'void | string',
\ 'ReflectionFunction::getStartLine(': 'void | int',
\ 'ReflectionFunction::getStaticVariables(': 'void | array',
\ 'ReflectionFunction::inNamespace(': 'void | bool',
\ 'ReflectionFunction::isClosure(': 'void | bool',
\ 'ReflectionFunction::isDeprecated(': 'void | bool',
\ 'ReflectionFunction::isInternal(': 'void | bool',
\ 'ReflectionFunction::isUserDefined(': 'void | bool',
\ 'ReflectionFunction::returnsReference(': 'void | bool',
\ 'ReflectionFunctionAbstract::__clone(': 'void | void',
\ 'ReflectionFunctionAbstract::getClosureThis(': 'void | object',
\ 'ReflectionFunctionAbstract::getDocComment(': 'void | string',
\ 'ReflectionFunctionAbstract::getEndLine(': 'void | int',
\ 'ReflectionFunctionAbstract::getExtension(': 'void | ReflectionExtension',
\ 'ReflectionFunctionAbstract::getExtensionName(': 'void | string',
\ 'ReflectionFunctionAbstract::getFileName(': 'void | string',
\ 'ReflectionFunctionAbstract::getName(': 'void | string',
\ 'ReflectionFunctionAbstract::getNamespaceName(': 'void | string',
\ 'ReflectionFunctionAbstract::getNumberOfParameters(': 'void | int',
\ 'ReflectionFunctionAbstract::getNumberOfRequiredParameters(': 'void | int',
\ 'ReflectionFunctionAbstract::getParameters(': 'void | array',
\ 'ReflectionFunctionAbstract::getShortName(': 'void | string',
\ 'ReflectionFunctionAbstract::getStartLine(': 'void | int',
\ 'ReflectionFunctionAbstract::getStaticVariables(': 'void | array',
\ 'ReflectionFunctionAbstract::inNamespace(': 'void | bool',
\ 'ReflectionFunctionAbstract::isClosure(': 'void | bool',
\ 'ReflectionFunctionAbstract::isDeprecated(': 'void | bool',
\ 'ReflectionFunctionAbstract::isInternal(': 'void | bool',
\ 'ReflectionFunctionAbstract::isUserDefined(': 'void | bool',
\ 'ReflectionFunctionAbstract::returnsReference(': 'void | bool',
\ 'ReflectionFunctionAbstract::__toString(': 'void | void',
\ 'ReflectionMethod::__construct(': 'mixed $class, string $name',
\ 'ReflectionMethod::export(': 'string $class, string $name [, bool $return = false] | string',
\ 'ReflectionMethod::getClosure(': 'string $object | Closure',
\ 'ReflectionMethod::getDeclaringClass(': 'void | ReflectionClass',
\ 'ReflectionMethod::getModifiers(': 'void | int',
\ 'ReflectionMethod::getPrototype(': 'void | ReflectionMethod',
\ 'ReflectionMethod::invoke(': 'object $object [, mixed $parameter [, mixed $...]] | mixed',
\ 'ReflectionMethod::invokeArgs(': 'object $object, array $args | mixed',
\ 'ReflectionMethod::isAbstract(': 'void | bool',
\ 'ReflectionMethod::isConstructor(': 'void | bool',
\ 'ReflectionMethod::isDestructor(': 'void | bool',
\ 'ReflectionMethod::isFinal(': 'void | bool',
\ 'ReflectionMethod::isPrivate(': 'void | bool',
\ 'ReflectionMethod::isProtected(': 'void | bool',
\ 'ReflectionMethod::isPublic(': 'void | bool',
\ 'ReflectionMethod::isStatic(': 'void | bool',
\ 'ReflectionMethod::setAccessible(': 'bool $accessible | void',
\ 'ReflectionMethod::__toString(': 'void | string',
\ 'ReflectionMethod::__clone(': 'void | void',
\ 'ReflectionMethod::getClosureThis(': 'void | object',
\ 'ReflectionMethod::getDocComment(': 'void | string',
\ 'ReflectionMethod::getEndLine(': 'void | int',
\ 'ReflectionMethod::getExtension(': 'void | ReflectionExtension',
\ 'ReflectionMethod::getExtensionName(': 'void | string',
\ 'ReflectionMethod::getFileName(': 'void | string',
\ 'ReflectionMethod::getName(': 'void | string',
\ 'ReflectionMethod::getNamespaceName(': 'void | string',
\ 'ReflectionMethod::getNumberOfParameters(': 'void | int',
\ 'ReflectionMethod::getNumberOfRequiredParameters(': 'void | int',
\ 'ReflectionMethod::getParameters(': 'void | array',
\ 'ReflectionMethod::getShortName(': 'void | string',
\ 'ReflectionMethod::getStartLine(': 'void | int',
\ 'ReflectionMethod::getStaticVariables(': 'void | array',
\ 'ReflectionMethod::inNamespace(': 'void | bool',
\ 'ReflectionMethod::isClosure(': 'void | bool',
\ 'ReflectionMethod::isDeprecated(': 'void | bool',
\ 'ReflectionMethod::isInternal(': 'void | bool',
\ 'ReflectionMethod::isUserDefined(': 'void | bool',
\ 'ReflectionMethod::returnsReference(': 'void | bool',
\ 'ReflectionObject::__construct(': 'object $argument',
\ 'ReflectionObject::export(': 'string $argument [, bool $return] | string',
\ 'ReflectionObject::getConstant(': 'string $name | mixed',
\ 'ReflectionObject::getConstants(': 'void | array',
\ 'ReflectionObject::getConstructor(': 'void | ReflectionMethod',
\ 'ReflectionObject::getDefaultProperties(': 'void | array',
\ 'ReflectionObject::getDocComment(': 'void | string',
\ 'ReflectionObject::getEndLine(': 'void | int',
\ 'ReflectionObject::getExtension(': 'void | ReflectionExtension',
\ 'ReflectionObject::getExtensionName(': 'void | string',
\ 'ReflectionObject::getFileName(': 'void | string',
\ 'ReflectionObject::getInterfaceNames(': 'void | array',
\ 'ReflectionObject::getInterfaces(': 'void | array',
\ 'ReflectionObject::getMethod(': 'string $name | ReflectionMethod',
\ 'ReflectionObject::getMethods(': '[ string $filter] | array',
\ 'ReflectionObject::getModifiers(': 'void | int',
\ 'ReflectionObject::getName(': 'void | string',
\ 'ReflectionObject::getNamespaceName(': 'void | string',
\ 'ReflectionObject::getParentClass(': 'void | object',
\ 'ReflectionObject::getProperties(': '[ int $filter] | array',
\ 'ReflectionObject::getProperty(': 'string $name | ReflectionProperty',
\ 'ReflectionObject::getShortName(': 'void | string',
\ 'ReflectionObject::getStartLine(': 'void | int',
\ 'ReflectionObject::getStaticProperties(': 'void | array',
\ 'ReflectionObject::getStaticPropertyValue(': 'string $name | mixed',
\ 'ReflectionObject::getTraitAliases(': 'void | array',
\ 'ReflectionObject::getTraitNames(': 'void | array',
\ 'ReflectionObject::getTraits(': 'void | array',
\ 'ReflectionObject::hasConstant(': 'string $name | bool',
\ 'ReflectionObject::hasMethod(': 'string $name | bool',
\ 'ReflectionObject::hasProperty(': 'string $name | bool',
\ 'ReflectionObject::implementsInterface(': 'string $interface | bool',
\ 'ReflectionObject::inNamespace(': 'void | bool',
\ 'ReflectionObject::isAbstract(': 'void | bool',
\ 'ReflectionObject::isCloneable(': 'void | bool',
\ 'ReflectionObject::isFinal(': 'void | bool',
\ 'ReflectionObject::isInstance(': 'object $object | bool',
\ 'ReflectionObject::isInstantiable(': 'void | bool',
\ 'ReflectionObject::isInterface(': 'void | bool',
\ 'ReflectionObject::isInternal(': 'void | bool',
\ 'ReflectionObject::isIterateable(': 'void | bool',
\ 'ReflectionObject::isSubclassOf(': 'string $class | bool',
\ 'ReflectionObject::isTrait(': 'void | bool',
\ 'ReflectionObject::isUserDefined(': 'void | bool',
\ 'ReflectionObject::newInstance(': 'mixed $args [, mixed $...] | object',
\ 'ReflectionObject::newInstanceArgs(': '[ array $args] | object',
\ 'ReflectionObject::newInstanceWithoutConstructor(': 'void | object',
\ 'ReflectionObject::setStaticPropertyValue(': 'string $name, string $value | void',
\ 'ReflectionObject::__toString(': 'void | string',
\ 'ReflectionParameter::allowsNull(': 'void | bool',
\ 'ReflectionParameter::canBePassedByValue(': 'void | bool',
\ 'ReflectionParameter::__clone(': 'void | void',
\ 'ReflectionParameter::__construct(': 'string $function, string $parameter',
\ 'ReflectionParameter::export(': 'string $function, string $parameter [, bool $return] | string',
\ 'ReflectionParameter::getClass(': 'void | ReflectionClass',
\ 'ReflectionParameter::getDeclaringClass(': 'void | ReflectionClass',
\ 'ReflectionParameter::getDeclaringFunction(': 'void | ReflectionFunction',
\ 'ReflectionParameter::getDefaultValue(': 'void | mixed',
\ 'ReflectionParameter::getName(': 'void | string',
\ 'ReflectionParameter::getPosition(': 'void | int',
\ 'ReflectionParameter::isArray(': 'void | bool',
\ 'ReflectionParameter::isDefaultValueAvailable(': 'void | bool',
\ 'ReflectionParameter::isOptional(': 'void | bool',
\ 'ReflectionParameter::isPassedByReference(': 'void | bool',
\ 'ReflectionParameter::__toString(': 'void | string',
\ 'ReflectionProperty::__clone(': 'void | void',
\ 'ReflectionProperty::__construct(': 'mixed $class, string $name',
\ 'ReflectionProperty::export(': 'mixed $class, string $name [, bool $return] | string',
\ 'ReflectionProperty::getDeclaringClass(': 'void | ReflectionClass',
\ 'ReflectionProperty::getDocComment(': 'void | string',
\ 'ReflectionProperty::getModifiers(': 'void | int',
\ 'ReflectionProperty::getName(': 'void | string',
\ 'ReflectionProperty::getValue(': 'object $object | mixed',
\ 'ReflectionProperty::isDefault(': 'void | bool',
\ 'ReflectionProperty::isPrivate(': 'void | bool',
\ 'ReflectionProperty::isProtected(': 'void | bool',
\ 'ReflectionProperty::isPublic(': 'void | bool',
\ 'ReflectionProperty::isStatic(': 'void | bool',
\ 'ReflectionProperty::setAccessible(': 'bool $accessible | void',
\ 'ReflectionProperty::setValue(': 'object $object, mixed $value | void',
\ 'ReflectionProperty::__toString(': 'void | string',
\ 'ReflectionZendExtension::__clone(': 'void | void',
\ 'ReflectionZendExtension::__construct(': 'string $name',
\ 'ReflectionZendExtension::export(': 'string $name [, string $return] | string',
\ 'ReflectionZendExtension::getAuthor(': 'void | string',
\ 'ReflectionZendExtension::getCopyright(': 'void | string',
\ 'ReflectionZendExtension::getName(': 'void | string',
\ 'ReflectionZendExtension::getURL(': 'void | string',
\ 'ReflectionZendExtension::getVersion(': 'void | string',
\ 'ReflectionZendExtension::__toString(': 'void | string',
\ 'Reflector::export(': 'void | string',
\ 'Reflector::__toString(': 'void | string',
\ 'RegexIterator::__construct(': 'Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]',
\ 'RegexIterator::accept(': 'void | bool',
\ 'RegexIterator::getFlags(': 'void | int',
\ 'RegexIterator::getMode(': 'void | int',
\ 'RegexIterator::getPregFlags(': 'void | int',
\ 'RegexIterator::getRegex(': 'void | string',
\ 'RegexIterator::setFlags(': 'int $flags | void',
\ 'RegexIterator::setMode(': 'int $mode | void',
\ 'RegexIterator::setPregFlags(': 'int $preg_flags | void',
\ 'RegexIterator::current(': 'void | mixed',
\ 'RegexIterator::getInnerIterator(': 'void | Iterator',
\ 'RegexIterator::key(': 'void | mixed',
\ 'RegexIterator::next(': 'void | void',
\ 'RegexIterator::rewind(': 'void | void',
\ 'RegexIterator::valid(': 'void | bool',
\ 'ResourceBundle::__construct(': 'string $locale, string $bundlename [, bool $fallback]',
\ 'ResourceBundle::count(': 'void | int',
\ 'ResourceBundle::create(': 'string $locale, string $bundlename [, bool $fallback] | ResourceBundle',
\ 'ResourceBundle::getErrorCode(': 'void | int',
\ 'ResourceBundle::getErrorMessage(': 'void | string',
\ 'ResourceBundle::get(': 'string|int $index | mixed',
\ 'ResourceBundle::getLocales(': 'string $bundlename | array',
\ 'RRDCreator::addArchive(': 'string $description | void',
\ 'RRDCreator::addDataSource(': 'string $description | void',
\ 'RRDCreator::__construct(': 'string $path [, string $startTime [, int $step = 0]]',
\ 'RRDCreator::save(': 'void | bool',
\ 'RRDGraph::__construct(': 'string $path',
\ 'RRDGraph::save(': 'void | array',
\ 'RRDGraph::saveVerbose(': 'void | array',
\ 'RRDGraph::setOptions(': 'array $options | void',
\ 'RRDUpdater::__construct(': 'string $path',
\ 'RRDUpdater::update(': 'array $values [, string $time = time()] | bool',
\ 'RuntimeException::getMessage(': 'void | string',
\ 'RuntimeException::getPrevious(': 'void | Exception',
\ 'RuntimeException::getCode(': 'void | mixed',
\ 'RuntimeException::getFile(': 'void | string',
\ 'RuntimeException::getLine(': 'void | int',
\ 'RuntimeException::getTrace(': 'void | array',
\ 'RuntimeException::getTraceAsString(': 'void | string',
\ 'RuntimeException::__toString(': 'void | string',
\ 'RuntimeException::__clone(': 'void | void',
\ 'SeekableIterator::seek(': 'int $position | void',
\ 'SeekableIterator::current(': 'void | mixed',
\ 'SeekableIterator::key(': 'void | scalar',
\ 'SeekableIterator::next(': 'void | void',
\ 'SeekableIterator::rewind(': 'void | void',
\ 'SeekableIterator::valid(': 'void | boolean',
\ 'Serializable::serialize(': 'void | string',
\ 'Serializable::unserialize(': 'string $serialized | void',
\ 'SessionHandler::close(': 'void | bool',
\ 'SessionHandler::destroy(': 'string $session_id | bool',
\ 'SessionHandler::gc(': 'int $maxlifetime | bool',
\ 'SessionHandler::open(': 'string $save_path, string $session_id | bool',
\ 'SessionHandler::read(': 'string $session_id | string',
\ 'SessionHandler::write(': 'string $session_id, string $session_data | bool',
\ 'SessionHandlerInterface::close(': 'void | bool',
\ 'SessionHandlerInterface::destroy(': 'string $session_id | bool',
\ 'SessionHandlerInterface::gc(': 'string $maxlifetime | bool',
\ 'SessionHandlerInterface::open(': 'string $save_path, string $name | bool',
\ 'SessionHandlerInterface::read(': 'string $session_id | string',
\ 'SessionHandlerInterface::write(': 'string $session_id, string $session_data | bool',
\ 'SimpleXMLElement::__construct(': 'string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns = "" [, bool $is_prefix = false]]]]',
\ 'SimpleXMLElement::addAttribute(': 'string $name [, string $value [, string $namespace]] | void',
\ 'SimpleXMLElement::addChild(': 'string $name [, string $value [, string $namespace]] | SimpleXMLElement',
\ 'SimpleXMLElement::asXML(': '[ string $filename] | mixed',
\ 'SimpleXMLElement::attributes(': '[ string $ns = NULL [, bool $is_prefix = false]] | SimpleXMLElement',
\ 'SimpleXMLElement::children(': '[ string $ns [, bool $is_prefix = false]] | SimpleXMLElement',
\ 'SimpleXMLElement::count(': 'void | int',
\ 'SimpleXMLElement::getDocNamespaces(': '[ bool $recursive = false] | array',
\ 'SimpleXMLElement::getName(': 'void | string',
\ 'SimpleXMLElement::getNamespaces(': '[ bool $recursive = false] | array',
\ 'SimpleXMLElement::registerXPathNamespace(': 'string $prefix, string $ns | bool',
\ 'SimpleXMLElement::xpath(': 'string $path | array',
\ 'SimpleXMLIterator::current(': 'void | mixed',
\ 'SimpleXMLIterator::getChildren(': 'void | SimpleXMLIterator',
\ 'SimpleXMLIterator::hasChildren(': 'void | bool',
\ 'SimpleXMLIterator::key(': 'void | mixed',
\ 'SimpleXMLIterator::next(': 'void | void',
\ 'SimpleXMLIterator::rewind(': 'void | void',
\ 'SimpleXMLIterator::valid(': 'void | bool',
\ 'SimpleXMLIterator::__construct(': 'string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns = "" [, bool $is_prefix = false]]]]',
\ 'SimpleXMLIterator::addAttribute(': 'string $name [, string $value [, string $namespace]] | void',
\ 'SimpleXMLIterator::addChild(': 'string $name [, string $value [, string $namespace]] | SimpleXMLElement',
\ 'SimpleXMLIterator::asXML(': '[ string $filename] | mixed',
\ 'SimpleXMLIterator::attributes(': '[ string $ns = NULL [, bool $is_prefix = false]] | SimpleXMLElement',
\ 'SimpleXMLIterator::children(': '[ string $ns [, bool $is_prefix = false]] | SimpleXMLElement',
\ 'SimpleXMLIterator::count(': 'void | int',
\ 'SimpleXMLIterator::getDocNamespaces(': '[ bool $recursive = false] | array',
\ 'SimpleXMLIterator::getName(': 'void | string',
\ 'SimpleXMLIterator::getNamespaces(': '[ bool $recursive = false] | array',
\ 'SimpleXMLIterator::registerXPathNamespace(': 'string $prefix, string $ns | bool',
\ 'SimpleXMLIterator::xpath(': 'string $path | array',
\ 'SNMP::__construct(': 'int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5]]',
\ 'SNMP::close(': 'void | bool',
\ 'SNMP::get(': 'mixed $object_id [, bool $preserve_keys = false] | mixed',
\ 'SNMP::getErrno(': 'void | int',
\ 'SNMP::getError(': 'void | string',
\ 'SNMP::getnext(': 'mixed $object_id | mixed',
\ 'SNMP::set(': 'mixed $object_id, mixed $type, mixed $value | bool',
\ 'SNMP::setSecurity(': 'string $sec_level [, string $auth_protocol = ] | bool',
\ 'SNMP::walk(': 'string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters]]] | array',
\ 'SNMPException::getMessage(': 'void | string',
\ 'SNMPException::getPrevious(': 'void | Exception',
\ 'SNMPException::getCode(': 'void | mixed',
\ 'SNMPException::getFile(': 'void | string',
\ 'SNMPException::getLine(': 'void | int',
\ 'SNMPException::getTrace(': 'void | array',
\ 'SNMPException::getTraceAsString(': 'void | string',
\ 'SNMPException::__toString(': 'void | string',
\ 'SNMPException::__clone(': 'void | void',
\ 'SoapClient::__call(': 'string $function_name, string $arguments | mixed',
\ 'SoapClient::SoapClient(': 'mixed $wsdl [, array $options]',
\ 'SoapClient::__doRequest(': 'string $request, string $location, string $action, int $version [, int $one_way = 0] | string',
\ 'SoapClient::__getFunctions(': 'void | array',
\ 'SoapClient::__getLastRequest(': 'void | string',
\ 'SoapClient::__getLastRequestHeaders(': 'void | string',
\ 'SoapClient::__getLastResponse(': 'void | string',
\ 'SoapClient::__getLastResponseHeaders(': 'void | string',
\ 'SoapClient::__getTypes(': 'void | array',
\ 'SoapClient::__setCookie(': 'string $name [, string $value] | void',
\ 'SoapClient::__setLocation(': '[ string $new_location] | string',
\ 'SoapClient::__setSoapHeaders(': '[ mixed $soapheaders] | bool',
\ 'SoapClient::__soapCall(': 'string $function_name, array $arguments [, array $options [, mixed $input_headers [, array &$output_headers]]] | mixed',
\ 'SoapFault::__construct(': 'string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]]',
\ 'SoapFault::SoapFault(': 'string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]]',
\ 'SoapFault::__toString(': 'void | string',
\ 'SoapFault::getMessage(': 'void | string',
\ 'SoapFault::getPrevious(': 'void | Exception',
\ 'SoapFault::getCode(': 'void | mixed',
\ 'SoapFault::getFile(': 'void | string',
\ 'SoapFault::getLine(': 'void | int',
\ 'SoapFault::getTrace(': 'void | array',
\ 'SoapFault::getTraceAsString(': 'void | string',
\ 'SoapFault::__clone(': 'void | void',
\ 'SoapHeader::__construct(': 'string $namespace, string $name [, mixed $data [, bool $mustunderstand [, string $actor]]]',
\ 'SoapHeader::SoapHeader(': 'string $namespace, string $name [, mixed $data [, bool $mustunderstand = false [, string $actor]]]',
\ 'SoapParam::__construct(': 'mixed $data, string $name',
\ 'SoapParam::SoapParam(': 'mixed $data, string $name',
\ 'SoapServer::addFunction(': 'mixed $functions | void',
\ 'SoapServer::addSoapHeader(': 'SoapHeader $object | void',
\ 'SoapServer::__construct(': 'mixed $wsdl [, array $options]',
\ 'SoapServer::fault(': 'string $code, string $string [, string $actor [, string $details [, string $name]]] | void',
\ 'SoapServer::getFunctions(': 'void | array',
\ 'SoapServer::handle(': '[ string $soap_request] | void',
\ 'SoapServer::setClass(': 'string $class_name [, mixed $args [, mixed $...]] | void',
\ 'SoapServer::setObject(': 'object $object | void',
\ 'SoapServer::setPersistence(': 'int $mode | void',
\ 'SoapServer::SoapServer(': 'mixed $wsdl [, array $options]',
\ 'SoapVar::__construct(': 'string $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]]',
\ 'SoapVar::SoapVar(': 'mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]]',
\ 'SolrClient::addDocument(': 'SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0]] | SolrUpdateResponse',
\ 'SolrClient::addDocuments(': 'array $docs [, bool $allowDups = false [, int $commitWithin = 0]] | void',
\ 'SolrClient::commit(': '[ int $maxSegments = "1" [, bool $waitFlush = true [, bool $waitSearcher = true]]] | SolrUpdateResponse',
\ 'SolrClient::__construct(': 'array $clientOptions',
\ 'SolrClient::deleteById(': 'string $id | SolrUpdateResponse',
\ 'SolrClient::deleteByIds(': 'array $ids | SolrUpdateResponse',
\ 'SolrClient::deleteByQueries(': 'array $queries | SolrUpdateResponse',
\ 'SolrClient::deleteByQuery(': 'string $query | SolrUpdateResponse',
\ 'SolrClient::__destruct(': 'void | void',
\ 'SolrClient::getDebug(': 'void | string',
\ 'SolrClient::getOptions(': 'void | array',
\ 'SolrClient::optimize(': '[ int $maxSegments = "1" [, bool $waitFlush = true [, bool $waitSearcher = true]]] | SolrUpdateResponse',
\ 'SolrClient::ping(': 'void | SolrPingResponse',
\ 'SolrClient::query(': 'SolrParams $query | SolrQueryResponse',
\ 'SolrClient::request(': 'string $raw_request | void',
\ 'SolrClient::rollback(': 'void | SolrUpdateResponse',
\ 'SolrClient::setResponseWriter(': 'string $responseWriter | void',
\ 'SolrClient::setServlet(': 'int $type, string $value | bool',
\ 'SolrClient::threads(': 'void | void',
\ 'SolrClientException::getInternalInfo(': 'void | array',
\ 'SolrDocument::addField(': 'string $fieldName, string $fieldValue | bool',
\ 'SolrDocument::clear(': 'void | bool',
\ 'SolrDocument::__clone(': 'void | void',
\ 'SolrDocument::__construct(': 'void',
\ 'SolrDocument::current(': 'void | SolrDocumentField',
\ 'SolrDocument::deleteField(': 'string $fieldName | bool',
\ 'SolrDocument::__destruct(': 'void | void',
\ 'SolrDocument::fieldExists(': 'string $fieldName | bool',
\ 'SolrDocument::__get(': 'string $fieldName | SolrDocumentField',
\ 'SolrDocument::getField(': 'string $fieldName | SolrDocumentField',
\ 'SolrDocument::getFieldCount(': 'void | int',
\ 'SolrDocument::getFieldNames(': 'void | array',
\ 'SolrDocument::getInputDocument(': 'void | SolrInputDocument',
\ 'SolrDocument::__isset(': 'string $fieldName | bool',
\ 'SolrDocument::key(': 'void | string',
\ 'SolrDocument::merge(': 'SolrDocument $sourceDoc [, bool $overwrite = true] | bool',
\ 'SolrDocument::next(': 'void | void',
\ 'SolrDocument::offsetExists(': 'string $fieldName | bool',
\ 'SolrDocument::offsetGet(': 'string $fieldName | SolrDocumentField',
\ 'SolrDocument::offsetSet(': 'string $fieldName, string $fieldValue | void',
\ 'SolrDocument::offsetUnset(': 'string $fieldName | void',
\ 'SolrDocument::reset(': 'void | bool',
\ 'SolrDocument::rewind(': 'void | void',
\ 'SolrDocument::serialize(': 'void | string',
\ 'SolrDocument::__set(': 'string $fieldName, string $fieldValue | bool',
\ 'SolrDocument::sort(': 'int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC] | bool',
\ 'SolrDocument::toArray(': 'void | array',
\ 'SolrDocument::unserialize(': 'string $serialized | void',
\ 'SolrDocument::__unset(': 'string $fieldName | bool',
\ 'SolrDocument::valid(': 'void | bool',
\ 'SolrDocumentField::__construct(': 'void',
\ 'SolrDocumentField::__destruct(': 'void | void',
\ 'SolrException::getInternalInfo(': 'void | array',
\ 'SolrException::getMessage(': 'void | string',
\ 'SolrException::getPrevious(': 'void | Exception',
\ 'SolrException::getCode(': 'void | mixed',
\ 'SolrException::getFile(': 'void | string',
\ 'SolrException::getLine(': 'void | int',
\ 'SolrException::getTrace(': 'void | array',
\ 'SolrException::getTraceAsString(': 'void | string',
\ 'SolrException::__toString(': 'void | string',
\ 'SolrException::__clone(': 'void | void',
\ 'SolrGenericResponse::__construct(': 'void',
\ 'SolrGenericResponse::__destruct(': 'void | void',
\ 'SolrGenericResponse::getDigestedResponse(': 'void | string',
\ 'SolrGenericResponse::getHttpStatus(': 'void | int',
\ 'SolrGenericResponse::getHttpStatusMessage(': 'void | string',
\ 'SolrGenericResponse::getRawRequest(': 'void | string',
\ 'SolrGenericResponse::getRawRequestHeaders(': 'void | string',
\ 'SolrGenericResponse::getRawResponse(': 'void | string',
\ 'SolrGenericResponse::getRawResponseHeaders(': 'void | string',
\ 'SolrGenericResponse::getRequestUrl(': 'void | string',
\ 'SolrGenericResponse::getResponse(': 'void | SolrObject',
\ 'SolrGenericResponse::setParseMode(': '[ int $parser_mode = 0] | bool',
\ 'SolrGenericResponse::success(': 'void | bool',
\ 'SolrIllegalArgumentException::getInternalInfo(': 'void | array',
\ 'SolrIllegalOperationException::getInternalInfo(': 'void | array',
\ 'SolrInputDocument::addField(': 'string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0] | bool',
\ 'SolrInputDocument::clear(': 'void | bool',
\ 'SolrInputDocument::__clone(': 'void | void',
\ 'SolrInputDocument::__construct(': 'void',
\ 'SolrInputDocument::deleteField(': 'string $fieldName | bool',
\ 'SolrInputDocument::__destruct(': 'void | void',
\ 'SolrInputDocument::fieldExists(': 'string $fieldName | bool',
\ 'SolrInputDocument::getBoost(': 'void | float',
\ 'SolrInputDocument::getField(': 'string $fieldName | SolrDocumentField',
\ 'SolrInputDocument::getFieldBoost(': 'string $fieldName | float',
\ 'SolrInputDocument::getFieldCount(': 'void | int',
\ 'SolrInputDocument::getFieldNames(': 'void | array',
\ 'SolrInputDocument::merge(': 'SolrInputDocument $sourceDoc [, bool $overwrite = true] | bool',
\ 'SolrInputDocument::reset(': 'void | bool',
\ 'SolrInputDocument::setBoost(': 'float $documentBoostValue | bool',
\ 'SolrInputDocument::setFieldBoost(': 'string $fieldName, float $fieldBoostValue | bool',
\ 'SolrInputDocument::sort(': 'int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC] | bool',
\ 'SolrInputDocument::toArray(': 'void | array',
\ 'SolrModifiableParams::__construct(': 'void',
\ 'SolrModifiableParams::__destruct(': 'void | void',
\ 'SolrModifiableParams::add(': 'string $name, string $value | SolrParams',
\ 'SolrModifiableParams::addParam(': 'string $name, string $value | SolrParams',
\ 'SolrModifiableParams::get(': 'string $param_name | mixed',
\ 'SolrModifiableParams::getParam(': '[ string $param_name] | mixed',
\ 'SolrModifiableParams::getParams(': 'void | array',
\ 'SolrModifiableParams::getPreparedParams(': 'void | array',
\ 'SolrModifiableParams::serialize(': 'void | string',
\ 'SolrModifiableParams::set(': 'string $name, string $value | void',
\ 'SolrModifiableParams::setParam(': 'string $name, string $value | SolrParams',
\ 'SolrModifiableParams::toString(': '[ bool $url_encode = false] | string',
\ 'SolrModifiableParams::unserialize(': 'string $serialized | void',
\ 'SolrObject::__construct(': 'void',
\ 'SolrObject::__destruct(': 'void | void',
\ 'SolrObject::getPropertyNames(': 'void | array',
\ 'SolrObject::offsetExists(': 'string $property_name | bool',
\ 'SolrObject::offsetGet(': 'string $property_name | mixed',
\ 'SolrObject::offsetSet(': 'string $property_name, string $property_value | void',
\ 'SolrObject::offsetUnset(': 'string $property_name | void',
\ 'SolrParams::add(': 'string $name, string $value | SolrParams',
\ 'SolrParams::addParam(': 'string $name, string $value | SolrParams',
\ 'SolrParams::get(': 'string $param_name | mixed',
\ 'SolrParams::getParam(': '[ string $param_name] | mixed',
\ 'SolrParams::getParams(': 'void | array',
\ 'SolrParams::getPreparedParams(': 'void | array',
\ 'SolrParams::serialize(': 'void | string',
\ 'SolrParams::set(': 'string $name, string $value | void',
\ 'SolrParams::setParam(': 'string $name, string $value | SolrParams',
\ 'SolrParams::toString(': '[ bool $url_encode = false] | string',
\ 'SolrParams::unserialize(': 'string $serialized | void',
\ 'SolrPingResponse::__construct(': 'void',
\ 'SolrPingResponse::__destruct(': 'void | void',
\ 'SolrPingResponse::getResponse(': 'void | string',
\ 'SolrPingResponse::getDigestedResponse(': 'void | string',
\ 'SolrPingResponse::getHttpStatus(': 'void | int',
\ 'SolrPingResponse::getHttpStatusMessage(': 'void | string',
\ 'SolrPingResponse::getRawRequest(': 'void | string',
\ 'SolrPingResponse::getRawRequestHeaders(': 'void | string',
\ 'SolrPingResponse::getRawResponse(': 'void | string',
\ 'SolrPingResponse::getRawResponseHeaders(': 'void | string',
\ 'SolrPingResponse::getRequestUrl(': 'void | string',
\ 'SolrPingResponse::setParseMode(': '[ int $parser_mode = 0] | bool',
\ 'SolrPingResponse::success(': 'void | bool',
\ 'SolrQuery::addFacetDateField(': 'string $dateField | SolrQuery',
\ 'SolrQuery::addFacetDateOther(': 'string $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::addFacetField(': 'string $field | SolrQuery',
\ 'SolrQuery::addFacetQuery(': 'string $facetQuery | SolrQuery',
\ 'SolrQuery::addField(': 'string $field | SolrQuery',
\ 'SolrQuery::addFilterQuery(': 'string $fq | SolrQuery',
\ 'SolrQuery::addHighlightField(': 'string $field | SolrQuery',
\ 'SolrQuery::addMltField(': 'string $field | SolrQuery',
\ 'SolrQuery::addMltQueryField(': 'string $field, float $boost | SolrQuery',
\ 'SolrQuery::addSortField(': 'string $field [, int $order = SolrQuery::ORDER_DESC] | SolrQuery',
\ 'SolrQuery::addStatsFacet(': 'string $field | SolrQuery',
\ 'SolrQuery::addStatsField(': 'string $field | SolrQuery',
\ 'SolrQuery::__construct(': '[ string $q]',
\ 'SolrQuery::__destruct(': 'void | void',
\ 'SolrQuery::getFacet(': 'void | bool',
\ 'SolrQuery::getFacetDateEnd(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetDateFields(': 'void | array',
\ 'SolrQuery::getFacetDateGap(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetDateHardEnd(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetDateOther(': '[ string $field_override] | array',
\ 'SolrQuery::getFacetDateStart(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetFields(': 'void | array',
\ 'SolrQuery::getFacetLimit(': '[ string $field_override] | int',
\ 'SolrQuery::getFacetMethod(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetMinCount(': '[ string $field_override] | int',
\ 'SolrQuery::getFacetMissing(': '[ string $field_override] | bool',
\ 'SolrQuery::getFacetOffset(': '[ string $field_override] | int',
\ 'SolrQuery::getFacetPrefix(': '[ string $field_override] | string',
\ 'SolrQuery::getFacetQueries(': 'void | array',
\ 'SolrQuery::getFacetSort(': '[ string $field_override] | int',
\ 'SolrQuery::getFields(': 'void | array',
\ 'SolrQuery::getFilterQueries(': 'void | array',
\ 'SolrQuery::getHighlight(': 'void | bool',
\ 'SolrQuery::getHighlightAlternateField(': '[ string $field_override] | string',
\ 'SolrQuery::getHighlightFields(': 'void | array',
\ 'SolrQuery::getHighlightFormatter(': '[ string $field_override] | string',
\ 'SolrQuery::getHighlightFragmenter(': '[ string $field_override] | string',
\ 'SolrQuery::getHighlightFragsize(': '[ string $field_override] | int',
\ 'SolrQuery::getHighlightHighlightMultiTerm(': 'void | bool',
\ 'SolrQuery::getHighlightMaxAlternateFieldLength(': '[ string $field_override] | int',
\ 'SolrQuery::getHighlightMaxAnalyzedChars(': 'void | int',
\ 'SolrQuery::getHighlightMergeContiguous(': '[ string $field_override] | bool',
\ 'SolrQuery::getHighlightRegexMaxAnalyzedChars(': 'void | int',
\ 'SolrQuery::getHighlightRegexPattern(': 'void | string',
\ 'SolrQuery::getHighlightRegexSlop(': 'void | float',
\ 'SolrQuery::getHighlightRequireFieldMatch(': 'void | bool',
\ 'SolrQuery::getHighlightSimplePost(': '[ string $field_override] | string',
\ 'SolrQuery::getHighlightSimplePre(': '[ string $field_override] | string',
\ 'SolrQuery::getHighlightSnippets(': '[ string $field_override] | int',
\ 'SolrQuery::getHighlightUsePhraseHighlighter(': 'void | bool',
\ 'SolrQuery::getMlt(': 'void | bool',
\ 'SolrQuery::getMltBoost(': 'void | bool',
\ 'SolrQuery::getMltCount(': 'void | int',
\ 'SolrQuery::getMltFields(': 'void | array',
\ 'SolrQuery::getMltMaxNumQueryTerms(': 'void | int',
\ 'SolrQuery::getMltMaxNumTokens(': 'void | int',
\ 'SolrQuery::getMltMaxWordLength(': 'void | int',
\ 'SolrQuery::getMltMinDocFrequency(': 'void | int',
\ 'SolrQuery::getMltMinTermFrequency(': 'void | int',
\ 'SolrQuery::getMltMinWordLength(': 'void | int',
\ 'SolrQuery::getMltQueryFields(': 'void | array',
\ 'SolrQuery::getQuery(': 'void | string',
\ 'SolrQuery::getRows(': 'void | int',
\ 'SolrQuery::getSortFields(': 'void | array',
\ 'SolrQuery::getStart(': 'void | int',
\ 'SolrQuery::getStats(': 'void | bool',
\ 'SolrQuery::getStatsFacets(': 'void | array',
\ 'SolrQuery::getStatsFields(': 'void | array',
\ 'SolrQuery::getTerms(': 'void | bool',
\ 'SolrQuery::getTermsField(': 'void | string',
\ 'SolrQuery::getTermsIncludeLowerBound(': 'void | bool',
\ 'SolrQuery::getTermsIncludeUpperBound(': 'void | bool',
\ 'SolrQuery::getTermsLimit(': 'void | int',
\ 'SolrQuery::getTermsLowerBound(': 'void | string',
\ 'SolrQuery::getTermsMaxCount(': 'void | int',
\ 'SolrQuery::getTermsMinCount(': 'void | int',
\ 'SolrQuery::getTermsPrefix(': 'void | string',
\ 'SolrQuery::getTermsReturnRaw(': 'void | bool',
\ 'SolrQuery::getTermsSort(': 'void | int',
\ 'SolrQuery::getTermsUpperBound(': 'void | string',
\ 'SolrQuery::getTimeAllowed(': 'void | int',
\ 'SolrQuery::removeFacetDateField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeFacetDateOther(': 'string $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::removeFacetField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeFacetQuery(': 'string $value | SolrQuery',
\ 'SolrQuery::removeField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeFilterQuery(': 'string $fq | SolrQuery',
\ 'SolrQuery::removeHighlightField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeMltField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeMltQueryField(': 'string $queryField | SolrQuery',
\ 'SolrQuery::removeSortField(': 'string $field | SolrQuery',
\ 'SolrQuery::removeStatsFacet(': 'string $value | SolrQuery',
\ 'SolrQuery::removeStatsField(': 'string $field | SolrQuery',
\ 'SolrQuery::setEchoHandler(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setEchoParams(': 'string $type | SolrQuery',
\ 'SolrQuery::setExplainOther(': 'string $query | SolrQuery',
\ 'SolrQuery::setFacet(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setFacetDateEnd(': 'string $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetDateGap(': 'string $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetDateHardEnd(': 'bool $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetDateStart(': 'string $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetEnumCacheMinDefaultFrequency(': 'int $frequency [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetLimit(': 'int $limit [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetMethod(': 'string $method [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetMinCount(': 'int $mincount [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetMissing(': 'bool $flag [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetOffset(': 'int $offset [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetPrefix(': 'string $prefix [, string $field_override] | SolrQuery',
\ 'SolrQuery::setFacetSort(': 'int $facetSort [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlight(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setHighlightAlternateField(': 'string $field [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightFormatter(': 'string $formatter [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightFragmenter(': 'string $fragmenter [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightFragsize(': 'int $size [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightHighlightMultiTerm(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setHighlightMaxAlternateFieldLength(': 'int $fieldLength [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightMaxAnalyzedChars(': 'int $value | SolrQuery',
\ 'SolrQuery::setHighlightMergeContiguous(': 'bool $flag [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightRegexMaxAnalyzedChars(': 'int $maxAnalyzedChars | SolrQuery',
\ 'SolrQuery::setHighlightRegexPattern(': 'string $value | SolrQuery',
\ 'SolrQuery::setHighlightRegexSlop(': 'float $factor | SolrQuery',
\ 'SolrQuery::setHighlightRequireFieldMatch(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setHighlightSimplePost(': 'string $simplePost [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightSimplePre(': 'string $simplePre [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightSnippets(': 'int $value [, string $field_override] | SolrQuery',
\ 'SolrQuery::setHighlightUsePhraseHighlighter(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setMlt(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setMltBoost(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setMltCount(': 'int $count | SolrQuery',
\ 'SolrQuery::setMltMaxNumQueryTerms(': 'int $value | SolrQuery',
\ 'SolrQuery::setMltMaxNumTokens(': 'int $value | SolrQuery',
\ 'SolrQuery::setMltMaxWordLength(': 'int $maxWordLength | SolrQuery',
\ 'SolrQuery::setMltMinDocFrequency(': 'int $minDocFrequency | SolrQuery',
\ 'SolrQuery::setMltMinTermFrequency(': 'int $minTermFrequency | SolrQuery',
\ 'SolrQuery::setMltMinWordLength(': 'int $minWordLength | SolrQuery',
\ 'SolrQuery::setOmitHeader(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setQuery(': 'string $query | SolrQuery',
\ 'SolrQuery::setRows(': 'int $rows | SolrQuery',
\ 'SolrQuery::setShowDebugInfo(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setStart(': 'int $start | SolrQuery',
\ 'SolrQuery::setStats(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setTerms(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setTermsField(': 'string $fieldname | SolrQuery',
\ 'SolrQuery::setTermsIncludeLowerBound(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setTermsIncludeUpperBound(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setTermsLimit(': 'int $limit | SolrQuery',
\ 'SolrQuery::setTermsLowerBound(': 'string $lowerBound | SolrQuery',
\ 'SolrQuery::setTermsMaxCount(': 'int $frequency | SolrQuery',
\ 'SolrQuery::setTermsMinCount(': 'int $frequency | SolrQuery',
\ 'SolrQuery::setTermsPrefix(': 'string $prefix | SolrQuery',
\ 'SolrQuery::setTermsReturnRaw(': 'bool $flag | SolrQuery',
\ 'SolrQuery::setTermsSort(': 'int $sortType | SolrQuery',
\ 'SolrQuery::setTermsUpperBound(': 'string $upperBound | SolrQuery',
\ 'SolrQuery::setTimeAllowed(': 'int $timeAllowed | SolrQuery',
\ 'SolrQueryResponse::__construct(': 'void',
\ 'SolrQueryResponse::__destruct(': 'void | void',
\ 'SolrQueryResponse::getDigestedResponse(': 'void | string',
\ 'SolrQueryResponse::getHttpStatus(': 'void | int',
\ 'SolrQueryResponse::getHttpStatusMessage(': 'void | string',
\ 'SolrQueryResponse::getRawRequest(': 'void | string',
\ 'SolrQueryResponse::getRawRequestHeaders(': 'void | string',
\ 'SolrQueryResponse::getRawResponse(': 'void | string',
\ 'SolrQueryResponse::getRawResponseHeaders(': 'void | string',
\ 'SolrQueryResponse::getRequestUrl(': 'void | string',
\ 'SolrQueryResponse::getResponse(': 'void | SolrObject',
\ 'SolrQueryResponse::setParseMode(': '[ int $parser_mode = 0] | bool',
\ 'SolrQueryResponse::success(': 'void | bool',
\ 'SolrResponse::getDigestedResponse(': 'void | string',
\ 'SolrResponse::getHttpStatus(': 'void | int',
\ 'SolrResponse::getHttpStatusMessage(': 'void | string',
\ 'SolrResponse::getRawRequest(': 'void | string',
\ 'SolrResponse::getRawRequestHeaders(': 'void | string',
\ 'SolrResponse::getRawResponse(': 'void | string',
\ 'SolrResponse::getRawResponseHeaders(': 'void | string',
\ 'SolrResponse::getRequestUrl(': 'void | string',
\ 'SolrResponse::getResponse(': 'void | SolrObject',
\ 'SolrResponse::setParseMode(': '[ int $parser_mode = 0] | bool',
\ 'SolrResponse::success(': 'void | bool',
\ 'SolrUpdateResponse::__construct(': 'void',
\ 'SolrUpdateResponse::__destruct(': 'void | void',
\ 'SolrUpdateResponse::getDigestedResponse(': 'void | string',
\ 'SolrUpdateResponse::getHttpStatus(': 'void | int',
\ 'SolrUpdateResponse::getHttpStatusMessage(': 'void | string',
\ 'SolrUpdateResponse::getRawRequest(': 'void | string',
\ 'SolrUpdateResponse::getRawRequestHeaders(': 'void | string',
\ 'SolrUpdateResponse::getRawResponse(': 'void | string',
\ 'SolrUpdateResponse::getRawResponseHeaders(': 'void | string',
\ 'SolrUpdateResponse::getRequestUrl(': 'void | string',
\ 'SolrUpdateResponse::getResponse(': 'void | SolrObject',
\ 'SolrUpdateResponse::setParseMode(': '[ int $parser_mode = 0] | bool',
\ 'SolrUpdateResponse::success(': 'void | bool',
\ 'SolrUtils::digestXmlResponse(': 'string $xmlresponse [, int $parse_mode = 0] | SolrObject',
\ 'SolrUtils::escapeQueryChars(': 'string $str | string',
\ 'SolrUtils::getSolrVersion(': 'void | string',
\ 'SolrUtils::queryPhrase(': 'string $str | string',
\ 'SphinxClient::addQuery(': 'string $query [, string $index = "*" [, string $comment = ""]] | int',
\ 'SphinxClient::buildExcerpts(': 'array $docs, string $index, string $words [, array $opts] | array',
\ 'SphinxClient::buildKeywords(': 'string $query, string $index, bool $hits | array',
\ 'SphinxClient::close(': 'void | bool',
\ 'SphinxClient::__construct(': 'void',
\ 'SphinxClient::escapeString(': 'string $string | string',
\ 'SphinxClient::getLastError(': 'void | string',
\ 'SphinxClient::getLastWarning(': 'void | string',
\ 'SphinxClient::open(': 'void | bool',
\ 'SphinxClient::query(': 'string $query [, string $index = "*" [, string $comment = ""]] | array',
\ 'SphinxClient::resetFilters(': 'void | void',
\ 'SphinxClient::resetGroupBy(': 'void | void',
\ 'SphinxClient::runQueries(': 'void | array',
\ 'SphinxClient::setArrayResult(': '[ bool $array_result = false] | bool',
\ 'SphinxClient::setConnectTimeout(': 'float $timeout | bool',
\ 'SphinxClient::setFieldWeights(': 'array $weights | bool',
\ 'SphinxClient::setFilter(': 'string $attribute, array $values [, bool $exclude = false] | bool',
\ 'SphinxClient::setFilterFloatRange(': 'string $attribute, float $min, float $max [, bool $exclude = false] | bool',
\ 'SphinxClient::setFilterRange(': 'string $attribute, int $min, int $max [, bool $exclude = false] | bool',
\ 'SphinxClient::setGeoAnchor(': 'string $attrlat, string $attrlong, float $latitude, float $longitude | bool',
\ 'SphinxClient::setGroupBy(': 'string $attribute, int $func [, string $groupsort = "@group desc"] | bool',
\ 'SphinxClient::setGroupDistinct(': 'string $attribute | bool',
\ 'SphinxClient::setIDRange(': 'int $min, int $max | bool',
\ 'SphinxClient::setIndexWeights(': 'array $weights | bool',
\ 'SphinxClient::setLimits(': 'int $offset, int $limit [, int $max_matches = 0 [, int $cutoff = 0]] | bool',
\ 'SphinxClient::setMatchMode(': 'int $mode | bool',
\ 'SphinxClient::setMaxQueryTime(': 'int $qtime | bool',
\ 'SphinxClient::setOverride(': 'string $attribute, int $type, array $values | bool',
\ 'SphinxClient::setRankingMode(': 'int $ranker | bool',
\ 'SphinxClient::setRetries(': 'int $count [, int $delay = 0] | bool',
\ 'SphinxClient::setSelect(': 'string $clause | bool',
\ 'SphinxClient::setServer(': 'string $server, int $port | bool',
\ 'SphinxClient::setSortMode(': 'int $mode [, string $sortby] | bool',
\ 'SphinxClient::status(': 'void | array',
\ 'SphinxClient::updateAttributes(': 'string $index, array $attributes, array $values [, bool $mva = false] | int',
\ 'SplBool::getConstList(': '[ bool $include_default = false] | array',
\ 'SplDoublyLinkedList::__construct(': 'void',
\ 'SplDoublyLinkedList::bottom(': 'void | mixed',
\ 'SplDoublyLinkedList::count(': 'void | int',
\ 'SplDoublyLinkedList::current(': 'void | mixed',
\ 'SplDoublyLinkedList::getIteratorMode(': 'void | int',
\ 'SplDoublyLinkedList::isEmpty(': 'void | bool',
\ 'SplDoublyLinkedList::key(': 'void | mixed',
\ 'SplDoublyLinkedList::next(': 'void | void',
\ 'SplDoublyLinkedList::offsetExists(': 'mixed $index | bool',
\ 'SplDoublyLinkedList::offsetGet(': 'mixed $index | mixed',
\ 'SplDoublyLinkedList::offsetSet(': 'mixed $index, mixed $newval | void',
\ 'SplDoublyLinkedList::offsetUnset(': 'mixed $index | void',
\ 'SplDoublyLinkedList::pop(': 'void | mixed',
\ 'SplDoublyLinkedList::prev(': 'void | void',
\ 'SplDoublyLinkedList::push(': 'mixed $value | void',
\ 'SplDoublyLinkedList::rewind(': 'void | void',
\ 'SplDoublyLinkedList::serialize(': 'void | string',
\ 'SplDoublyLinkedList::setIteratorMode(': 'int $mode | void',
\ 'SplDoublyLinkedList::shift(': 'void | mixed',
\ 'SplDoublyLinkedList::top(': 'void | mixed',
\ 'SplDoublyLinkedList::unserialize(': 'string $serialized | void',
\ 'SplDoublyLinkedList::unshift(': 'mixed $value | void',
\ 'SplDoublyLinkedList::valid(': 'void | bool',
\ 'SplEnum::getConstList(': '[ bool $include_default = false] | array',
\ 'SplEnum::__construct(': '[ mixed $initial_value [, bool $strict]]',
\ 'SplFileInfo::__construct(': 'string $file_name',
\ 'SplFileInfo::getATime(': 'void | int',
\ 'SplFileInfo::getBasename(': '[ string $suffix] | string',
\ 'SplFileInfo::getCTime(': 'void | int',
\ 'SplFileInfo::getExtension(': 'void | string',
\ 'SplFileInfo::getFileInfo(': '[ string $class_name] | SplFileInfo',
\ 'SplFileInfo::getFilename(': 'void | string',
\ 'SplFileInfo::getGroup(': 'void | int',
\ 'SplFileInfo::getInode(': 'void | int',
\ 'SplFileInfo::getLinkTarget(': 'void | string',
\ 'SplFileInfo::getMTime(': 'void | int',
\ 'SplFileInfo::getOwner(': 'void | int',
\ 'SplFileInfo::getPath(': 'void | string',
\ 'SplFileInfo::getPathInfo(': '[ string $class_name] | SplFileInfo',
\ 'SplFileInfo::getPathname(': 'void | string',
\ 'SplFileInfo::getPerms(': 'void | int',
\ 'SplFileInfo::getRealPath(': 'void | string',
\ 'SplFileInfo::getSize(': 'void | int',
\ 'SplFileInfo::getType(': 'void | string',
\ 'SplFileInfo::isDir(': 'void | bool',
\ 'SplFileInfo::isExecutable(': 'void | bool',
\ 'SplFileInfo::isFile(': 'void | bool',
\ 'SplFileInfo::isLink(': 'void | bool',
\ 'SplFileInfo::isReadable(': 'void | bool',
\ 'SplFileInfo::isWritable(': 'void | bool',
\ 'SplFileInfo::openFile(': '[ string $open_mode = r [, bool $use_include_path = false [, resource $context = NULL]]] | SplFileObject',
\ 'SplFileInfo::setFileClass(': '[ string $class_name] | void',
\ 'SplFileInfo::setInfoClass(': '[ string $class_name] | void',
\ 'SplFileInfo::__toString(': 'void | void',
\ 'SplFileObject::__construct(': 'string $filename [, string $open_mode = "r" [, bool $use_include_path = false [, resource $context]]]',
\ 'SplFileObject::current(': 'void | string|array',
\ 'SplFileObject::eof(': 'void | bool',
\ 'SplFileObject::fflush(': 'void | bool',
\ 'SplFileObject::fgetc(': 'void | string',
\ 'SplFileObject::fgetcsv(': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | array',
\ 'SplFileObject::fgets(': 'void | string',
\ 'SplFileObject::fgetss(': '[ string $allowable_tags] | string',
\ 'SplFileObject::flock(': 'int $operation [, int &$wouldblock] | bool',
\ 'SplFileObject::fpassthru(': 'void | int',
\ 'SplFileObject::fputcsv(': 'array $fields [, string $delimiter = '','' [, string $enclosure = ''"'']] | int',
\ 'SplFileObject::fscanf(': 'string $format [, mixed &$...] | mixed',
\ 'SplFileObject::fseek(': 'int $offset [, int $whence = SEEK_SET] | int',
\ 'SplFileObject::fstat(': 'void | array',
\ 'SplFileObject::ftell(': 'void | int',
\ 'SplFileObject::ftruncate(': 'int $size | bool',
\ 'SplFileObject::fwrite(': 'string $str [, int $length] | int',
\ 'SplFileObject::getChildren(': 'void | void',
\ 'SplFileObject::getCsvControl(': 'void | array',
\ 'SplFileObject::getFlags(': 'void | int',
\ 'SplFileObject::getMaxLineLen(': 'void | int',
\ 'SplFileObject::hasChildren(': 'void | bool',
\ 'SplFileObject::key(': 'void | int',
\ 'SplFileObject::next(': 'void | void',
\ 'SplFileObject::rewind(': 'void | void',
\ 'SplFileObject::seek(': 'int $line_pos | void',
\ 'SplFileObject::setCsvControl(': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | void',
\ 'SplFileObject::setFlags(': 'int $flags | void',
\ 'SplFileObject::setMaxLineLen(': 'int $max_len | void',
\ 'SplFileObject::__toString(': 'void | void',
\ 'SplFileObject::valid(': 'void | bool',
\ 'SplFileObject::getATime(': 'void | int',
\ 'SplFileObject::getBasename(': '[ string $suffix] | string',
\ 'SplFileObject::getCTime(': 'void | int',
\ 'SplFileObject::getExtension(': 'void | string',
\ 'SplFileObject::getFileInfo(': '[ string $class_name] | SplFileInfo',
\ 'SplFileObject::getFilename(': 'void | string',
\ 'SplFileObject::getGroup(': 'void | int',
\ 'SplFileObject::getInode(': 'void | int',
\ 'SplFileObject::getLinkTarget(': 'void | string',
\ 'SplFileObject::getMTime(': 'void | int',
\ 'SplFileObject::getOwner(': 'void | int',
\ 'SplFileObject::getPath(': 'void | string',
\ 'SplFileObject::getPathInfo(': '[ string $class_name] | SplFileInfo',
\ 'SplFileObject::getPathname(': 'void | string',
\ 'SplFileObject::getPerms(': 'void | int',
\ 'SplFileObject::getRealPath(': 'void | string',
\ 'SplFileObject::getSize(': 'void | int',
\ 'SplFileObject::getType(': 'void | string',
\ 'SplFileObject::isDir(': 'void | bool',
\ 'SplFileObject::isExecutable(': 'void | bool',
\ 'SplFileObject::isFile(': 'void | bool',
\ 'SplFileObject::isLink(': 'void | bool',
\ 'SplFileObject::isReadable(': 'void | bool',
\ 'SplFileObject::isWritable(': 'void | bool',
\ 'SplFileObject::openFile(': '[ string $open_mode = r [, bool $use_include_path = false [, resource $context = NULL]]] | SplFileObject',
\ 'SplFileObject::setFileClass(': '[ string $class_name] | void',
\ 'SplFileObject::setInfoClass(': '[ string $class_name] | void',
\ 'SplFixedArray::__construct(': '[ int $size = 0]',
\ 'SplFixedArray::count(': 'void | int',
\ 'SplFixedArray::current(': 'void | mixed',
\ 'SplFixedArray::fromArray(': 'array $array [, bool $save_indexes = true] | SplFixedArray',
\ 'SplFixedArray::getSize(': 'void | int',
\ 'SplFixedArray::key(': 'void | int',
\ 'SplFixedArray::next(': 'void | void',
\ 'SplFixedArray::offsetExists(': 'int $index | bool',
\ 'SplFixedArray::offsetGet(': 'int $index | mixed',
\ 'SplFixedArray::offsetSet(': 'int $index, mixed $newval | void',
\ 'SplFixedArray::offsetUnset(': 'int $index | void',
\ 'SplFixedArray::rewind(': 'void | void',
\ 'SplFixedArray::setSize(': 'int $size | int',
\ 'SplFixedArray::toArray(': 'void | array',
\ 'SplFixedArray::valid(': 'void | bool',
\ 'SplFixedArray::__wakeup(': 'void | void',
\ 'SplFloat::__construct(': '[ mixed $initial_value [, bool $strict]]',
\ 'SplHeap::__construct(': 'void',
\ 'SplHeap::compare(': 'mixed $value1, mixed $value2 | int',
\ 'SplHeap::count(': 'void | int',
\ 'SplHeap::current(': 'void | mixed',
\ 'SplHeap::extract(': 'void | mixed',
\ 'SplHeap::insert(': 'mixed $value | void',
\ 'SplHeap::isEmpty(': 'void | bool',
\ 'SplHeap::key(': 'void | mixed',
\ 'SplHeap::next(': 'void | void',
\ 'SplHeap::recoverFromCorruption(': 'void | void',
\ 'SplHeap::rewind(': 'void | void',
\ 'SplHeap::top(': 'void | mixed',
\ 'SplHeap::valid(': 'void | bool',
\ 'SplInt::__construct(': '[ mixed $initial_value [, bool $strict]]',
\ 'SplMaxHeap::compare(': 'mixed $value1, mixed $value2 | int',
\ 'SplMaxHeap::count(': 'void | int',
\ 'SplMaxHeap::current(': 'void | mixed',
\ 'SplMaxHeap::extract(': 'void | mixed',
\ 'SplMaxHeap::insert(': 'mixed $value | void',
\ 'SplMaxHeap::isEmpty(': 'void | bool',
\ 'SplMaxHeap::key(': 'void | mixed',
\ 'SplMaxHeap::next(': 'void | void',
\ 'SplMaxHeap::recoverFromCorruption(': 'void | void',
\ 'SplMaxHeap::rewind(': 'void | void',
\ 'SplMaxHeap::top(': 'void | mixed',
\ 'SplMaxHeap::valid(': 'void | bool',
\ 'SplMinHeap::compare(': 'mixed $value1, mixed $value2 | int',
\ 'SplMinHeap::count(': 'void | int',
\ 'SplMinHeap::current(': 'void | mixed',
\ 'SplMinHeap::extract(': 'void | mixed',
\ 'SplMinHeap::insert(': 'mixed $value | void',
\ 'SplMinHeap::isEmpty(': 'void | bool',
\ 'SplMinHeap::key(': 'void | mixed',
\ 'SplMinHeap::next(': 'void | void',
\ 'SplMinHeap::recoverFromCorruption(': 'void | void',
\ 'SplMinHeap::rewind(': 'void | void',
\ 'SplMinHeap::top(': 'void | mixed',
\ 'SplMinHeap::valid(': 'void | bool',
\ 'SplObjectStorage::addAll(': 'SplObjectStorage $storage | void',
\ 'SplObjectStorage::attach(': 'object $object [, mixed $data = NULL] | void',
\ 'SplObjectStorage::contains(': 'object $object | bool',
\ 'SplObjectStorage::count(': 'void | int',
\ 'SplObjectStorage::current(': 'void | object',
\ 'SplObjectStorage::detach(': 'object $object | void',
\ 'SplObjectStorage::getHash(': 'object $object | string',
\ 'SplObjectStorage::getInfo(': 'void | mixed',
\ 'SplObjectStorage::key(': 'void | int',
\ 'SplObjectStorage::next(': 'void | void',
\ 'SplObjectStorage::offsetExists(': 'object $object | bool',
\ 'SplObjectStorage::offsetGet(': 'object $object | mixed',
\ 'SplObjectStorage::offsetSet(': 'object $object [, mixed $data = NULL] | void',
\ 'SplObjectStorage::offsetUnset(': 'object $object | void',
\ 'SplObjectStorage::removeAll(': 'SplObjectStorage $storage | void',
\ 'SplObjectStorage::removeAllExcept(': 'SplObjectStorage $storage | void',
\ 'SplObjectStorage::rewind(': 'void | void',
\ 'SplObjectStorage::serialize(': 'void | string',
\ 'SplObjectStorage::setInfo(': 'mixed $data | void',
\ 'SplObjectStorage::unserialize(': 'string $serialized | void',
\ 'SplObjectStorage::valid(': 'void | bool',
\ 'SplObserver::update(': 'SplSubject $subject | void',
\ 'SplPriorityQueue::__construct(': 'void',
\ 'SplPriorityQueue::compare(': 'mixed $priority1, mixed $priority2 | int',
\ 'SplPriorityQueue::count(': 'void | int',
\ 'SplPriorityQueue::current(': 'void | mixed',
\ 'SplPriorityQueue::extract(': 'void | mixed',
\ 'SplPriorityQueue::insert(': 'mixed $value, mixed $priority | void',
\ 'SplPriorityQueue::isEmpty(': 'void | bool',
\ 'SplPriorityQueue::key(': 'void | mixed',
\ 'SplPriorityQueue::next(': 'void | void',
\ 'SplPriorityQueue::recoverFromCorruption(': 'void | void',
\ 'SplPriorityQueue::rewind(': 'void | void',
\ 'SplPriorityQueue::setExtractFlags(': 'int $flags | void',
\ 'SplPriorityQueue::top(': 'void | mixed',
\ 'SplPriorityQueue::valid(': 'void | bool',
\ 'SplQueue::__construct(': 'void',
\ 'SplQueue::dequeue(': 'void | mixed',
\ 'SplQueue::enqueue(': 'mixed $value | void',
\ 'SplQueue::setIteratorMode(': 'int $mode | void',
\ 'SplQueue::bottom(': 'void | mixed',
\ 'SplQueue::count(': 'void | int',
\ 'SplQueue::current(': 'void | mixed',
\ 'SplQueue::getIteratorMode(': 'void | int',
\ 'SplQueue::isEmpty(': 'void | bool',
\ 'SplQueue::key(': 'void | mixed',
\ 'SplQueue::next(': 'void | void',
\ 'SplQueue::offsetExists(': 'mixed $index | bool',
\ 'SplQueue::offsetGet(': 'mixed $index | mixed',
\ 'SplQueue::offsetSet(': 'mixed $index, mixed $newval | void',
\ 'SplQueue::offsetUnset(': 'mixed $index | void',
\ 'SplQueue::pop(': 'void | mixed',
\ 'SplQueue::prev(': 'void | void',
\ 'SplQueue::push(': 'mixed $value | void',
\ 'SplQueue::rewind(': 'void | void',
\ 'SplQueue::serialize(': 'void | string',
\ 'SplQueue::shift(': 'void | mixed',
\ 'SplQueue::top(': 'void | mixed',
\ 'SplQueue::unserialize(': 'string $serialized | void',
\ 'SplQueue::unshift(': 'mixed $value | void',
\ 'SplQueue::valid(': 'void | bool',
\ 'SplStack::__construct(': 'void',
\ 'SplStack::setIteratorMode(': 'int $mode | void',
\ 'SplStack::bottom(': 'void | mixed',
\ 'SplStack::count(': 'void | int',
\ 'SplStack::current(': 'void | mixed',
\ 'SplStack::getIteratorMode(': 'void | int',
\ 'SplStack::isEmpty(': 'void | bool',
\ 'SplStack::key(': 'void | mixed',
\ 'SplStack::next(': 'void | void',
\ 'SplStack::offsetExists(': 'mixed $index | bool',
\ 'SplStack::offsetGet(': 'mixed $index | mixed',
\ 'SplStack::offsetSet(': 'mixed $index, mixed $newval | void',
\ 'SplStack::offsetUnset(': 'mixed $index | void',
\ 'SplStack::pop(': 'void | mixed',
\ 'SplStack::prev(': 'void | void',
\ 'SplStack::push(': 'mixed $value | void',
\ 'SplStack::rewind(': 'void | void',
\ 'SplStack::serialize(': 'void | string',
\ 'SplStack::shift(': 'void | mixed',
\ 'SplStack::top(': 'void | mixed',
\ 'SplStack::unserialize(': 'string $serialized | void',
\ 'SplStack::unshift(': 'mixed $value | void',
\ 'SplStack::valid(': 'void | bool',
\ 'SplString::__construct(': '[ mixed $initial_value [, bool $strict]]',
\ 'SplSubject::attach(': 'SplObserver $observer | void',
\ 'SplSubject::detach(': 'SplObserver $observer | void',
\ 'SplSubject::notify(': 'void | void',
\ 'SplTempFileObject::__construct(': '[ int $max_memory]',
\ 'SplTempFileObject::current(': 'void | string|array',
\ 'SplTempFileObject::eof(': 'void | bool',
\ 'SplTempFileObject::fflush(': 'void | bool',
\ 'SplTempFileObject::fgetc(': 'void | string',
\ 'SplTempFileObject::fgetcsv(': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | array',
\ 'SplTempFileObject::fgets(': 'void | string',
\ 'SplTempFileObject::fgetss(': '[ string $allowable_tags] | string',
\ 'SplTempFileObject::flock(': 'int $operation [, int &$wouldblock] | bool',
\ 'SplTempFileObject::fpassthru(': 'void | int',
\ 'SplTempFileObject::fputcsv(': 'array $fields [, string $delimiter = '','' [, string $enclosure = ''"'']] | int',
\ 'SplTempFileObject::fscanf(': 'string $format [, mixed &$...] | mixed',
\ 'SplTempFileObject::fseek(': 'int $offset [, int $whence = SEEK_SET] | int',
\ 'SplTempFileObject::fstat(': 'void | array',
\ 'SplTempFileObject::ftell(': 'void | int',
\ 'SplTempFileObject::ftruncate(': 'int $size | bool',
\ 'SplTempFileObject::fwrite(': 'string $str [, int $length] | int',
\ 'SplTempFileObject::getChildren(': 'void | void',
\ 'SplTempFileObject::getCsvControl(': 'void | array',
\ 'SplTempFileObject::getFlags(': 'void | int',
\ 'SplTempFileObject::getMaxLineLen(': 'void | int',
\ 'SplTempFileObject::hasChildren(': 'void | bool',
\ 'SplTempFileObject::key(': 'void | int',
\ 'SplTempFileObject::next(': 'void | void',
\ 'SplTempFileObject::rewind(': 'void | void',
\ 'SplTempFileObject::seek(': 'int $line_pos | void',
\ 'SplTempFileObject::setCsvControl(': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | void',
\ 'SplTempFileObject::setFlags(': 'int $flags | void',
\ 'SplTempFileObject::setMaxLineLen(': 'int $max_len | void',
\ 'SplTempFileObject::__toString(': 'void | void',
\ 'SplTempFileObject::valid(': 'void | bool',
\ 'SplType::__construct(': '[ mixed $initial_value [, bool $strict]]',
\ 'Spoofchecker::areConfusable(': 'string $s1, string $s2 [, string &$error] | bool',
\ 'Spoofchecker::__construct(': 'void',
\ 'Spoofchecker::isSuspicious(': 'string $text [, string &$error] | bool',
\ 'Spoofchecker::setAllowedLocales(': 'string $locale_list | void',
\ 'Spoofchecker::setChecks(': 'string $checks | void',
\ 'SQLite3::busyTimeout(': 'int $msecs | bool',
\ 'SQLite3::changes(': 'void | int',
\ 'SQLite3::close(': 'void | bool',
\ 'SQLite3::__construct(': 'string $filename [, int $flags [, string $encryption_key]]',
\ 'SQLite3::createAggregate(': 'string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1] | bool',
\ 'SQLite3::createFunction(': 'string $name, mixed $callback [, int $argument_count = -1] | bool',
\ 'SQLite3::escapeString(': 'string $value | string',
\ 'SQLite3::exec(': 'string $query | bool',
\ 'SQLite3::lastErrorCode(': 'void | int',
\ 'SQLite3::lastErrorMsg(': 'void | string',
\ 'SQLite3::lastInsertRowID(': 'void | int',
\ 'SQLite3::loadExtension(': 'string $shared_library | bool',
\ 'SQLite3::open(': 'string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key]] | void',
\ 'SQLite3::prepare(': 'string $query | SQLite3Stmt',
\ 'SQLite3::query(': 'string $query | SQLite3Result',
\ 'SQLite3::querySingle(': 'string $query [, bool $entire_row = false] | mixed',
\ 'SQLite3::version(': 'void | array',
\ 'SQLite3Result::columnName(': 'int $column_number | string',
\ 'SQLite3Result::columnType(': 'int $column_number | int',
\ 'SQLite3Result::fetchArray(': '[ int $mode = SQLITE3_BOTH] | array',
\ 'SQLite3Result::finalize(': 'void | bool',
\ 'SQLite3Result::numColumns(': 'void | int',
\ 'SQLite3Result::reset(': 'void | bool',
\ 'SQLite3Stmt::bindParam(': 'string $sql_param, mixed &$param [, int $type] | bool',
\ 'SQLite3Stmt::bindValue(': 'string $sql_param, mixed $value [, int $type] | bool',
\ 'SQLite3Stmt::clear(': 'void | bool',
\ 'SQLite3Stmt::close(': 'void | bool',
\ 'SQLite3Stmt::execute(': 'void | SQLite3Result',
\ 'SQLite3Stmt::paramCount(': 'void | int',
\ 'SQLite3Stmt::reset(': 'void | bool',
\ 'Stackable::isRunning(': 'void | boolean',
\ 'Stackable::isTerminated(': 'void | boolean',
\ 'Stackable::isWaiting(': 'void | boolean',
\ 'Stackable::lock(': 'void | boolean',
\ 'Stackable::notify(': 'void | boolean',
\ 'Stackable::run(': 'void | void',
\ 'Stackable::synchronized(': 'Closure $block [, mixed $...] | mixed',
\ 'Stackable::unlock(': 'void | boolean',
\ 'Stackable::wait(': '[ string $timeout] | boolean',
\ 'Stomp::abort(': 'string $transaction_id [, array $headers] | bool',
\ 'Stomp::ack(': 'mixed $msg [, array $headers] | bool',
\ 'Stomp::begin(': 'string $transaction_id [, array $headers] | bool',
\ 'Stomp::commit(': 'string $transaction_id [, array $headers] | bool',
\ 'Stomp::__construct(': '[ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]',
\ 'Stomp::__destruct(': 'void | bool',
\ 'Stomp::error(': 'void | string',
\ 'Stomp::getReadTimeout(': 'void | array',
\ 'Stomp::getSessionId(': 'void | string',
\ 'Stomp::hasFrame(': 'void | bool',
\ 'Stomp::readFrame(': '[ string $class_name = "stompFrame"] | stompframe',
\ 'Stomp::send(': 'string $destination, mixed $msg [, array $headers] | bool',
\ 'Stomp::setReadTimeout(': 'int $seconds [, int $microseconds] | void',
\ 'Stomp::subscribe(': 'string $destination [, array $headers] | bool',
\ 'Stomp::unsubscribe(': 'string $destination [, array $headers] | bool',
\ 'StompException::getMessage(': 'void | string',
\ 'StompException::getPrevious(': 'void | Exception',
\ 'StompException::getCode(': 'void | mixed',
\ 'StompException::getFile(': 'void | string',
\ 'StompException::getLine(': 'void | int',
\ 'StompException::getTrace(': 'void | array',
\ 'StompException::getTraceAsString(': 'void | string',
\ 'StompException::__toString(': 'void | string',
\ 'StompException::__clone(': 'void | void',
\ 'StompException::getDetails(': 'void | string',
\ 'StompFrame::__construct(': '[ string $command [, array $headers [, string $body]]]',
\ 'streamWrapper::__construct(': 'void',
\ 'streamWrapper::__destruct(': 'void',
\ 'streamWrapper::dir_closedir(': 'void | bool',
\ 'streamWrapper::dir_opendir(': 'string $path, int $options | bool',
\ 'streamWrapper::dir_readdir(': 'void | string',
\ 'streamWrapper::dir_rewinddir(': 'void | bool',
\ 'streamWrapper::mkdir(': 'string $path, int $mode, int $options | bool',
\ 'streamWrapper::rename(': 'string $path_from, string $path_to | bool',
\ 'streamWrapper::rmdir(': 'string $path, int $options | bool',
\ 'streamWrapper::stream_cast(': 'int $cast_as | resource',
\ 'streamWrapper::stream_close(': 'void | void',
\ 'streamWrapper::stream_eof(': 'void | bool',
\ 'streamWrapper::stream_flush(': 'void | bool',
\ 'streamWrapper::stream_lock(': 'int $operation | bool',
\ 'streamWrapper::stream_metadata(': 'string $path, int $option, mixed $value | bool',
\ 'streamWrapper::stream_open(': 'string $path, string $mode, int $options, string &$opened_path | bool',
\ 'streamWrapper::stream_read(': 'int $count | string',
\ 'streamWrapper::stream_seek(': 'int $offset [, int $whence = SEEK_SET] | bool',
\ 'streamWrapper::stream_set_option(': 'int $option, int $arg1, int $arg2 | bool',
\ 'streamWrapper::stream_stat(': 'void | array',
\ 'streamWrapper::stream_tell(': 'void | int',
\ 'streamWrapper::stream_truncate(': 'int $new_size | bool',
\ 'streamWrapper::stream_write(': 'string $data | int',
\ 'streamWrapper::unlink(': 'string $path | bool',
\ 'streamWrapper::url_stat(': 'string $path, int $flags | array',
\ 'SVM::__construct(': 'void',
\ 'SVM::crossvalidate(': 'array $problem, int $number_of_folds | float',
\ 'SVM::getOptions(': 'void | array',
\ 'SVM::setOptions(': 'array $params | bool',
\ 'SVM::train(': 'array $problem [, array $weights] | SVMModel',
\ 'SVMModel::checkProbabilityModel(': 'void | bool',
\ 'SVMModel::__construct(': '[ string $filename]',
\ 'SVMModel::getLabels(': 'void | array',
\ 'SVMModel::getNrClass(': 'void | int',
\ 'SVMModel::getSvmType(': 'void | int',
\ 'SVMModel::getSvrProbability(': 'void | float',
\ 'SVMModel::load(': 'string $filename | bool',
\ 'SVMModel::predict_probability(': 'array $data | float',
\ 'SVMModel::predict(': 'array $data | float',
\ 'SVMModel::save(': 'string $filename | bool',
\ 'SWFAction::__construct(': 'string $script',
\ 'SWFBitmap::__construct(': 'mixed $file [, mixed $alphafile]',
\ 'SWFBitmap::getHeight(': 'void | float',
\ 'SWFBitmap::getWidth(': 'void | float',
\ 'SWFButton::addAction(': 'SWFAction $action, int $flags | void',
\ 'SWFButton::addASound(': 'SWFSound $sound, int $flags | SWFSoundInstance',
\ 'SWFButton::addShape(': 'SWFShape $shape, int $flags | void',
\ 'SWFButton::__construct(': 'void',
\ 'SWFButton::setAction(': 'SWFAction $action | void',
\ 'SWFButton::setDown(': 'SWFShape $shape | void',
\ 'SWFButton::setHit(': 'SWFShape $shape | void',
\ 'SWFButton::setMenu(': 'int $flag | void',
\ 'SWFButton::setOver(': 'SWFShape $shape | void',
\ 'SWFButton::setUp(': 'SWFShape $shape | void',
\ 'SWFDisplayItem::addAction(': 'SWFAction $action, int $flags | void',
\ 'SWFDisplayItem::addColor(': 'int $red, int $green, int $blue [, int $a] | void',
\ 'SWFDisplayItem::endMask(': 'void | void',
\ 'SWFDisplayItem::getRot(': 'void | float',
\ 'SWFDisplayItem::getX(': 'void | float',
\ 'SWFDisplayItem::getXScale(': 'void | float',
\ 'SWFDisplayItem::getXSkew(': 'void | float',
\ 'SWFDisplayItem::getY(': 'void | float',
\ 'SWFDisplayItem::getYScale(': 'void | float',
\ 'SWFDisplayItem::getYSkew(': 'void | float',
\ 'SWFDisplayItem::move(': 'float $dx, float $dy | void',
\ 'SWFDisplayItem::moveTo(': 'float $x, float $y | void',
\ 'SWFDisplayItem::multColor(': 'float $red, float $green, float $blue [, float $a] | void',
\ 'SWFDisplayItem::remove(': 'void | void',
\ 'SWFDisplayItem::rotate(': 'float $angle | void',
\ 'SWFDisplayItem::rotateTo(': 'float $angle | void',
\ 'SWFDisplayItem::scale(': 'float $dx, float $dy | void',
\ 'SWFDisplayItem::scaleTo(': 'float $x [, float $y] | void',
\ 'SWFDisplayItem::setDepth(': 'int $depth | void',
\ 'SWFDisplayItem::setMaskLevel(': 'int $level | void',
\ 'SWFDisplayItem::setMatrix(': 'float $a, float $b, float $c, float $d, float $x, float $y | void',
\ 'SWFDisplayItem::setName(': 'string $name | void',
\ 'SWFDisplayItem::setRatio(': 'float $ratio | void',
\ 'SWFDisplayItem::skewX(': 'float $ddegrees | void',
\ 'SWFDisplayItem::skewXTo(': 'float $degrees | void',
\ 'SWFDisplayItem::skewY(': 'float $ddegrees | void',
\ 'SWFDisplayItem::skewYTo(': 'float $degrees | void',
\ 'SWFFill::moveTo(': 'float $x, float $y | void',
\ 'SWFFill::rotateTo(': 'float $angle | void',
\ 'SWFFill::scaleTo(': 'float $x [, float $y] | void',
\ 'SWFFill::skewXTo(': 'float $x | void',
\ 'SWFFill::skewYTo(': 'float $y | void',
\ 'SWFFont::__construct(': 'string $filename',
\ 'SWFFont::getAscent(': 'void | float',
\ 'SWFFont::getDescent(': 'void | float',
\ 'SWFFont::getLeading(': 'void | float',
\ 'SWFFont::getShape(': 'int $code | string',
\ 'SWFFont::getUTF8Width(': 'string $string | float',
\ 'SWFFont::getWidth(': 'string $string | float',
\ 'SWFFontChar::addChars(': 'string $char | void',
\ 'SWFFontChar::addUTF8Chars(': 'string $char | void',
\ 'SWFGradient::addEntry(': 'float $ratio, int $red, int $green, int $blue [, int $alpha = 255] | void',
\ 'SWFGradient::__construct(': 'void',
\ 'SWFMorph::__construct(': 'void',
\ 'SWFMorph::getShape1(': 'void | SWFShape',
\ 'SWFMorph::getShape2(': 'void | SWFShape',
\ 'SWFMovie::add(': 'object $instance | mixed',
\ 'SWFMovie::addExport(': 'SWFCharacter $char, string $name | void',
\ 'SWFMovie::addFont(': 'SWFFont $font | mixed',
\ 'SWFMovie::__construct(': '[ int $version]',
\ 'SWFMovie::importChar(': 'string $libswf, string $name | SWFSprite',
\ 'SWFMovie::importFont(': 'string $libswf, string $name | SWFFontChar',
\ 'SWFMovie::labelFrame(': 'string $label | void',
\ 'SWFMovie::nextFrame(': 'void | void',
\ 'SWFMovie::output(': '[ int $compression] | int',
\ 'SWFMovie::remove(': 'object $instance | void',
\ 'SWFMovie::save(': 'string $filename [, int $compression = -1] | int',
\ 'SWFMovie::saveToFile(': 'resource $x [, int $compression = -1] | int',
\ 'SWFMovie::setbackground(': 'int $red, int $green, int $blue | void',
\ 'SWFMovie::setDimension(': 'float $width, float $height | void',
\ 'SWFMovie::setFrames(': 'int $number | void',
\ 'SWFMovie::setRate(': 'float $rate | void',
\ 'SWFMovie::startSound(': 'SWFSound $sound | SWFSoundInstance',
\ 'SWFMovie::stopSound(': 'SWFSound $sound | void',
\ 'SWFMovie::streamMP3(': 'mixed $mp3file [, float $skip = 0] | int',
\ 'SWFMovie::writeExports(': 'void | void',
\ 'SWFPrebuiltClip::__construct(': 'mixed $file',
\ 'SWFShape::addFill(': 'int $red, int $green, int $blue [, int $alpha = 255] | SWFFill',
\ 'SWFShape::__construct(': 'void',
\ 'SWFShape::drawArc(': 'float $r, float $startAngle, float $endAngle | void',
\ 'SWFShape::drawCircle(': 'float $r | void',
\ 'SWFShape::drawCubic(': 'float $bx, float $by, float $cx, float $cy, float $dx, float $dy | int',
\ 'SWFShape::drawCubicTo(': 'float $bx, float $by, float $cx, float $cy, float $dx, float $dy | int',
\ 'SWFShape::drawCurve(': 'float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx [, float $targetdy]] | int',
\ 'SWFShape::drawCurveTo(': 'float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx [, float $targety]] | int',
\ 'SWFShape::drawGlyph(': 'SWFFont $font, string $character [, int $size] | void',
\ 'SWFShape::drawLine(': 'float $dx, float $dy | void',
\ 'SWFShape::drawLineTo(': 'float $x, float $y | void',
\ 'SWFShape::movePen(': 'float $dx, float $dy | void',
\ 'SWFShape::movePenTo(': 'float $x, float $y | void',
\ 'SWFShape::setLeftFill(': 'SWFGradient $fill | void',
\ 'SWFShape::setLine(': 'SWFShape $shape | void',
\ 'SWFShape::setRightFill(': 'SWFGradient $fill | void',
\ 'SWFSound::__construct(': 'string $filename [, int $flags = 0]',
\ 'SWFSoundInstance::loopCount(': 'int $point | void',
\ 'SWFSoundInstance::loopInPoint(': 'int $point | void',
\ 'SWFSoundInstance::loopOutPoint(': 'int $point | void',
\ 'SWFSoundInstance::noMultiple(': 'void | void',
\ 'SWFSprite::add(': 'object $object | void',
\ 'SWFSprite::__construct(': 'void',
\ 'SWFSprite::labelFrame(': 'string $label | void',
\ 'SWFSprite::nextFrame(': 'void | void',
\ 'SWFSprite::remove(': 'object $object | void',
\ 'SWFSprite::setFrames(': 'int $number | void',
\ 'SWFSprite::startSound(': 'SWFSound $sount | SWFSoundInstance',
\ 'SWFSprite::stopSound(': 'SWFSound $sount | void',
\ 'SWFText::addString(': 'string $string | void',
\ 'SWFText::addUTF8String(': 'string $text | void',
\ 'SWFText::__construct(': 'void',
\ 'SWFText::getAscent(': 'void | float',
\ 'SWFText::getDescent(': 'void | float',
\ 'SWFText::getLeading(': 'void | float',
\ 'SWFText::getUTF8Width(': 'string $string | float',
\ 'SWFText::getWidth(': 'string $string | float',
\ 'SWFText::moveTo(': 'float $x, float $y | void',
\ 'SWFText::setColor(': 'int $red, int $green, int $blue [, int $a = 255] | void',
\ 'SWFText::setFont(': 'SWFFont $font | void',
\ 'SWFText::setHeight(': 'float $height | void',
\ 'SWFText::setSpacing(': 'float $spacing | void',
\ 'SWFTextField::addChars(': 'string $chars | void',
\ 'SWFTextField::addString(': 'string $string | void',
\ 'SWFTextField::align(': 'int $alignement | void',
\ 'SWFTextField::__construct(': '[ int $flags]',
\ 'SWFTextField::setBounds(': 'float $width, float $height | void',
\ 'SWFTextField::setColor(': 'int $red, int $green, int $blue [, int $a = 255] | void',
\ 'SWFTextField::setFont(': 'SWFFont $font | void',
\ 'SWFTextField::setHeight(': 'float $height | void',
\ 'SWFTextField::setIndentation(': 'float $width | void',
\ 'SWFTextField::setLeftMargin(': 'float $width | void',
\ 'SWFTextField::setLineSpacing(': 'float $height | void',
\ 'SWFTextField::setMargins(': 'float $left, float $right | void',
\ 'SWFTextField::setName(': 'string $name | void',
\ 'SWFTextField::setPadding(': 'float $padding | void',
\ 'SWFTextField::setRightMargin(': 'float $width | void',
\ 'SWFVideoStream::__construct(': '[ string $file]',
\ 'SWFVideoStream::getNumFrames(': 'void | int',
\ 'SWFVideoStream::setDimension(': 'int $x, int $y | void',
\ 'Thread::getCreatorId(': 'void | long',
\ 'Thread::getThreadId(': 'void | long',
\ 'Thread::isJoined(': 'void | boolean',
\ 'Thread::isRunning(': 'void | boolean',
\ 'Thread::isStarted(': 'void | boolean',
\ 'Thread::isTerminated(': 'void | boolean',
\ 'Thread::isWaiting(': 'void | boolean',
\ 'Thread::join(': 'void | boolean',
\ 'Thread::lock(': 'void | boolean',
\ 'Thread::notify(': 'void | boolean',
\ 'Thread::run(': 'void | void',
\ 'Thread::start(': '[ long $options] | boolean',
\ 'Thread::synchronized(': 'Closure $block [, mixed $...] | mixed',
\ 'Thread::unlock(': 'void | boolean',
\ 'Thread::wait(': '[ long $timeout] | boolean',
\ 'tidy::body(': 'void | tidyNode',
\ 'tidy::cleanRepair(': 'void | bool',
\ 'tidy::__construct(': '[ string $filename [, mixed $config [, string $encoding [, bool $use_include_path]]]]',
\ 'tidy::diagnose(': 'void | bool',
\ 'tidy::getConfig(': 'void | array',
\ 'tidy::getHtmlVer(': 'void | int',
\ 'tidy::getOpt(': 'string $option | mixed',
\ 'tidy::getOptDoc(': 'string $optname | string',
\ 'tidy::getRelease(': 'void | string',
\ 'tidy::getStatus(': 'void | int',
\ 'tidy::head(': 'void | tidyNode',
\ 'tidy::html(': 'void | tidyNode',
\ 'tidy::isXhtml(': 'void | bool',
\ 'tidy::isXml(': 'void | bool',
\ 'tidy::parseFile(': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false]]] | bool',
\ 'tidy::parseString(': 'string $input [, mixed $config [, string $encoding]] | bool',
\ 'tidy::repairFile(': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false]]] | string',
\ 'tidy::repairString(': 'string $data [, mixed $config [, string $encoding]] | string',
\ 'tidy::root(': 'void | tidyNode',
\ 'tidyNode::getParent(': 'void | tidyNode',
\ 'tidyNode::hasChildren(': 'void | bool',
\ 'tidyNode::hasSiblings(': 'void | bool',
\ 'tidyNode::isAsp(': 'void | bool',
\ 'tidyNode::isComment(': 'void | bool',
\ 'tidyNode::isHtml(': 'void | bool',
\ 'tidyNode::isJste(': 'void | bool',
\ 'tidyNode::isPhp(': 'void | bool',
\ 'tidyNode::isText(': 'void | bool',
\ 'TokyoTyrant::add(': 'string $key, number $increment [, int $type = 0] | number',
\ 'TokyoTyrant::connect(': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant',
\ 'TokyoTyrant::connectUri(': 'string $uri | TokyoTyrant',
\ 'TokyoTyrant::__construct(': '[ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]',
\ 'TokyoTyrant::copy(': 'string $path | TokyoTyrant',
\ 'TokyoTyrant::ext(': 'string $name, int $options, string $key, string $value | string',
\ 'TokyoTyrant::fwmKeys(': 'string $prefix, int $max_recs | array',
\ 'TokyoTyrant::get(': 'mixed $keys | mixed',
\ 'TokyoTyrant::getIterator(': 'void | TokyoTyrantIterator',
\ 'TokyoTyrant::num(': 'void | int',
\ 'TokyoTyrant::out(': 'mixed $keys | TokyoTyrant',
\ 'TokyoTyrant::put(': 'mixed $keys [, string $value = NULL] | TokyoTyrant',
\ 'TokyoTyrant::putCat(': 'mixed $keys [, string $value] | TokyoTyrant',
\ 'TokyoTyrant::putKeep(': 'mixed $keys [, string $value] | TokyoTyrant',
\ 'TokyoTyrant::putNr(': 'mixed $keys [, string $value = NULL] | TokyoTyrant',
\ 'TokyoTyrant::putShl(': 'string $key, string $value, int $width | mixed',
\ 'TokyoTyrant::restore(': 'string $log_dir, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrant::setMaster(': 'string $host, int $port, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrant::size(': 'string $key | int',
\ 'TokyoTyrant::stat(': 'void | array',
\ 'TokyoTyrant::sync(': 'void | mixed',
\ 'TokyoTyrant::tune(': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant',
\ 'TokyoTyrant::vanish(': 'void | mixed',
\ 'tokyotyrantexception::getMessage(': 'void | string',
\ 'tokyotyrantexception::getPrevious(': 'void | Exception',
\ 'tokyotyrantexception::getCode(': 'void | mixed',
\ 'tokyotyrantexception::getFile(': 'void | string',
\ 'tokyotyrantexception::getLine(': 'void | int',
\ 'tokyotyrantexception::getTrace(': 'void | array',
\ 'tokyotyrantexception::getTraceAsString(': 'void | string',
\ 'tokyotyrantexception::__toString(': 'void | string',
\ 'tokyotyrantexception::__clone(': 'void | void',
\ 'TokyoTyrantIterator::__construct(': 'mixed $object',
\ 'TokyoTyrantIterator::current(': 'void | mixed',
\ 'TokyoTyrantIterator::key(': 'void | mixed',
\ 'TokyoTyrantIterator::next(': 'void | mixed',
\ 'TokyoTyrantIterator::rewind(': 'void | void',
\ 'TokyoTyrantIterator::valid(': 'void | bool',
\ 'TokyoTyrantIterator::add(': 'string $key, number $increment [, int $type = 0] | number',
\ 'TokyoTyrantIterator::connect(': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant',
\ 'TokyoTyrantIterator::connectUri(': 'string $uri | TokyoTyrant',
\ 'TokyoTyrantIterator::copy(': 'string $path | TokyoTyrant',
\ 'TokyoTyrantIterator::ext(': 'string $name, int $options, string $key, string $value | string',
\ 'TokyoTyrantIterator::fwmKeys(': 'string $prefix, int $max_recs | array',
\ 'TokyoTyrantIterator::get(': 'mixed $keys | mixed',
\ 'TokyoTyrantIterator::getIterator(': 'void | TokyoTyrantIterator',
\ 'TokyoTyrantIterator::num(': 'void | int',
\ 'TokyoTyrantIterator::out(': 'mixed $keys | TokyoTyrant',
\ 'TokyoTyrantIterator::put(': 'mixed $keys [, string $value = NULL] | TokyoTyrant',
\ 'TokyoTyrantIterator::putCat(': 'mixed $keys [, string $value] | TokyoTyrant',
\ 'TokyoTyrantIterator::putKeep(': 'mixed $keys [, string $value] | TokyoTyrant',
\ 'TokyoTyrantIterator::putNr(': 'mixed $keys [, string $value = NULL] | TokyoTyrant',
\ 'TokyoTyrantIterator::putShl(': 'string $key, string $value, int $width | mixed',
\ 'TokyoTyrantIterator::restore(': 'string $log_dir, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrantIterator::setMaster(': 'string $host, int $port, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrantIterator::size(': 'string $key | int',
\ 'TokyoTyrantIterator::stat(': 'void | array',
\ 'TokyoTyrantIterator::sync(': 'void | mixed',
\ 'TokyoTyrantIterator::tune(': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant',
\ 'TokyoTyrantIterator::vanish(': 'void | mixed',
\ 'TokyoTyrantQuery::addCond(': 'string $name, int $op, string $expr | mixed',
\ 'TokyoTyrantQuery::__construct(': 'TokyoTyrantTable $table',
\ 'TokyoTyrantQuery::count(': 'void | int',
\ 'TokyoTyrantQuery::current(': 'void | array',
\ 'TokyoTyrantQuery::hint(': 'void | string',
\ 'TokyoTyrantQuery::key(': 'void | string',
\ 'TokyoTyrantQuery::metaSearch(': 'array $queries, int $type | array',
\ 'TokyoTyrantQuery::next(': 'void | array',
\ 'TokyoTyrantQuery::out(': 'void | TokyoTyrantQuery',
\ 'TokyoTyrantQuery::rewind(': 'void | bool',
\ 'TokyoTyrantQuery::search(': 'void | array',
\ 'TokyoTyrantQuery::setLimit(': '[ int $max [, int $skip]] | mixed',
\ 'TokyoTyrantQuery::setOrder(': 'string $name, int $type | mixed',
\ 'TokyoTyrantQuery::valid(': 'void | bool',
\ 'TokyoTyrantTable::add(': 'string $key, mixed $increment [, string $type] | void',
\ 'TokyoTyrantTable::genUid(': 'void | int',
\ 'TokyoTyrantTable::get(': 'mixed $keys | void',
\ 'TokyoTyrantTable::getIterator(': 'void | TokyoTyrantIterator',
\ 'TokyoTyrantTable::getQuery(': 'void | TokyoTyrantQuery',
\ 'TokyoTyrantTable::out(': 'mixed $keys | void',
\ 'TokyoTyrantTable::put(': 'string $key, array $columns | int',
\ 'TokyoTyrantTable::putCat(': 'string $key, array $columns | void',
\ 'TokyoTyrantTable::putKeep(': 'string $key, array $columns | void',
\ 'TokyoTyrantTable::putNr(': 'mixed $keys [, string $value] | void',
\ 'TokyoTyrantTable::putShl(': 'string $key, string $value, int $width | void',
\ 'TokyoTyrantTable::setIndex(': 'string $column, int $type | mixed',
\ 'TokyoTyrantTable::connect(': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant',
\ 'TokyoTyrantTable::connectUri(': 'string $uri | TokyoTyrant',
\ 'TokyoTyrantTable::__construct(': '[ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]',
\ 'TokyoTyrantTable::copy(': 'string $path | TokyoTyrant',
\ 'TokyoTyrantTable::ext(': 'string $name, int $options, string $key, string $value | string',
\ 'TokyoTyrantTable::fwmKeys(': 'string $prefix, int $max_recs | array',
\ 'TokyoTyrantTable::num(': 'void | int',
\ 'TokyoTyrantTable::restore(': 'string $log_dir, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrantTable::setMaster(': 'string $host, int $port, int $timestamp [, bool $check_consistency = true] | mixed',
\ 'TokyoTyrantTable::size(': 'string $key | int',
\ 'TokyoTyrantTable::stat(': 'void | array',
\ 'TokyoTyrantTable::sync(': 'void | mixed',
\ 'TokyoTyrantTable::tune(': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant',
\ 'TokyoTyrantTable::vanish(': 'void | mixed',
\ 'Transliterator::__construct(': 'void',
\ 'Transliterator::create(': 'string $id [, int $direction] | Transliterator',
\ 'Transliterator::createFromRules(': 'string $rules [, string $direction] | Transliterator',
\ 'Transliterator::createInverse(': 'void | Transliterator',
\ 'Transliterator::getErrorCode(': 'void | int',
\ 'Transliterator::getErrorMessage(': 'void | string',
\ 'Transliterator::listIDs(': 'void | array',
\ 'Transliterator::transliterate(': 'string $subject [, int $start [, int $end]] | string',
\ 'UnderflowException::getMessage(': 'void | string',
\ 'UnderflowException::getPrevious(': 'void | Exception',
\ 'UnderflowException::getCode(': 'void | mixed',
\ 'UnderflowException::getFile(': 'void | string',
\ 'UnderflowException::getLine(': 'void | int',
\ 'UnderflowException::getTrace(': 'void | array',
\ 'UnderflowException::getTraceAsString(': 'void | string',
\ 'UnderflowException::__toString(': 'void | string',
\ 'UnderflowException::__clone(': 'void | void',
\ 'UnexpectedValueException::getMessage(': 'void | string',
\ 'UnexpectedValueException::getPrevious(': 'void | Exception',
\ 'UnexpectedValueException::getCode(': 'void | mixed',
\ 'UnexpectedValueException::getFile(': 'void | string',
\ 'UnexpectedValueException::getLine(': 'void | int',
\ 'UnexpectedValueException::getTrace(': 'void | array',
\ 'UnexpectedValueException::getTraceAsString(': 'void | string',
\ 'UnexpectedValueException::__toString(': 'void | string',
\ 'UnexpectedValueException::__clone(': 'void | void',
\ 'V8Js::__construct(': '[ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE]]]]',
\ 'V8Js::executeString(': 'string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE]] | mixed',
\ 'V8Js::getExtensions(': 'void | array',
\ 'V8Js::getPendingException(': 'void | V8JsException',
\ 'V8Js::registerExtension(': 'string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = FALSE]] | bool',
\ 'V8JsException::getJsFileName(': 'void | string',
\ 'V8JsException::getJsLineNumber(': 'void | int',
\ 'V8JsException::getJsSourceLine(': 'void | int',
\ 'V8JsException::getJsTrace(': 'void | string',
\ 'V8JsException::getMessage(': 'void | string',
\ 'V8JsException::getPrevious(': 'void | Exception',
\ 'V8JsException::getCode(': 'void | mixed',
\ 'V8JsException::getFile(': 'void | string',
\ 'V8JsException::getLine(': 'void | int',
\ 'V8JsException::getTrace(': 'void | array',
\ 'V8JsException::getTraceAsString(': 'void | string',
\ 'V8JsException::__toString(': 'void | string',
\ 'V8JsException::__clone(': 'void | void',
\ 'VarnishAdmin::auth(': 'void | bool',
\ 'VarnishAdmin::ban(': 'string $vcl_regex | int',
\ 'VarnishAdmin::banUrl(': 'string $vcl_regex | int',
\ 'VarnishAdmin::clearPanic(': 'void | int',
\ 'VarnishAdmin::connect(': 'void | bool',
\ 'VarnishAdmin::__construct(': '[ array $args]',
\ 'VarnishAdmin::disconnect(': 'void | bool',
\ 'VarnishAdmin::getPanic(': 'void | string',
\ 'VarnishAdmin::getParams(': 'void | array',
\ 'VarnishAdmin::isRunning(': 'void | bool',
\ 'VarnishAdmin::setCompat(': 'int $compat | void',
\ 'VarnishAdmin::setHost(': 'string $host | void',
\ 'VarnishAdmin::setIdent(': 'string $ident | void',
\ 'VarnishAdmin::setParam(': 'string $name, string|integer $value | int',
\ 'VarnishAdmin::setPort(': 'int $port | void',
\ 'VarnishAdmin::setSecret(': 'string $secret | void',
\ 'VarnishAdmin::setTimeout(': 'int $timeout | void',
\ 'VarnishAdmin::start(': 'void | int',
\ 'VarnishAdmin::stop(': 'void | int',
\ 'VarnishLog::__construct(': '[ array $args]',
\ 'VarnishLog::getLine(': 'void | array',
\ 'VarnishLog::getTagName(': 'int $index | string',
\ 'VarnishStat::__construct(': '[ array $args]',
\ 'VarnishStat::getSnapshot(': 'void | array',
\ 'WeakMap::__construct(': 'void',
\ 'WeakMap::count(': 'void | int',
\ 'WeakMap::current(': 'void | mixed',
\ 'WeakMap::key(': 'void | object',
\ 'WeakMap::next(': 'void | void',
\ 'WeakMap::offsetExists(': 'object $object | bool',
\ 'WeakMap::offsetGet(': 'object $object | mixed',
\ 'WeakMap::offsetSet(': 'object $object, mixed $value | void',
\ 'WeakMap::offsetUnset(': 'object $object | void',
\ 'WeakMap::rewind(': 'void | void',
\ 'WeakMap::valid(': 'void | bool',
\ 'WeakRef::__construct(': '[ object $object]',
\ 'WeakRef::acquire(': 'void | bool',
\ 'WeakRef::get(': 'void | object',
\ 'WeakRef::release(': 'void | bool',
\ 'WeakRef::valid(': 'void | bool',
\ 'Worker::getCreatorId(': 'void | long',
\ 'Worker::getStacked(': 'void | int',
\ 'Worker::getThreadId(': 'void | long',
\ 'Worker::isShutdown(': 'void | boolean',
\ 'Worker::isWorking(': 'void | boolean',
\ 'Worker::run(': 'void | void',
\ 'Worker::shutdown(': 'void | boolean',
\ 'Worker::stack(': 'Stackable $work | int',
\ 'Worker::start(': '[ long $options] | boolean',
\ 'Worker::unstack(': '[ Stackable $work] | int',
\ 'XMLReader::close(': 'void | bool',
\ 'XMLReader::expand(': '[ DOMNode $basenode] | DOMNode',
\ 'XMLReader::getAttribute(': 'string $name | string',
\ 'XMLReader::getAttributeNo(': 'int $index | string',
\ 'XMLReader::getAttributeNs(': 'string $localName, string $namespaceURI | string',
\ 'XMLReader::getParserProperty(': 'int $property | bool',
\ 'XMLReader::isValid(': 'void | bool',
\ 'XMLReader::lookupNamespace(': 'string $prefix | bool',
\ 'XMLReader::moveToAttribute(': 'string $name | bool',
\ 'XMLReader::moveToAttributeNo(': 'int $index | bool',
\ 'XMLReader::moveToAttributeNs(': 'string $localName, string $namespaceURI | bool',
\ 'XMLReader::moveToElement(': 'void | bool',
\ 'XMLReader::moveToFirstAttribute(': 'void | bool',
\ 'XMLReader::moveToNextAttribute(': 'void | bool',
\ 'XMLReader::next(': '[ string $localname] | bool',
\ 'XMLReader::open(': 'string $URI [, string $encoding [, int $options = 0]] | bool',
\ 'XMLReader::read(': 'void | bool',
\ 'XMLReader::readInnerXML(': 'void | string',
\ 'XMLReader::readOuterXML(': 'void | string',
\ 'XMLReader::readString(': 'void | string',
\ 'XMLReader::setParserProperty(': 'int $property, bool $value | bool',
\ 'XMLReader::setRelaxNGSchema(': 'string $filename | bool',
\ 'XMLReader::setRelaxNGSchemaSource(': 'string $source | bool',
\ 'XMLReader::setSchema(': 'string $filename | bool',
\ 'XMLReader::xml(': 'string $source [, string $encoding [, int $options = 0]] | bool',
\ 'XSLTProcessor::getParameter(': 'string $namespaceURI, string $localName | string',
\ 'XSLTProcessor::getSecurityPrefs(': 'void | int',
\ 'XSLTProcessor::hasExsltSupport(': 'void | bool',
\ 'XSLTProcessor::importStylesheet(': 'object $stylesheet | void',
\ 'XSLTProcessor::registerPHPFunctions(': '[ mixed $restrict] | void',
\ 'XSLTProcessor::removeParameter(': 'string $namespaceURI, string $localName | bool',
\ 'XSLTProcessor::setParameter(': 'string $namespace, string $name, string $value | bool',
\ 'XSLTProcessor::setProfiling(': 'string $filename | bool',
\ 'XSLTProcessor::setSecurityPrefs(': 'int $securityPrefs | int',
\ 'XSLTProcessor::transformToDoc(': 'DOMNode $doc | DOMDocument',
\ 'XSLTProcessor::transformToURI(': 'DOMDocument $doc, string $uri | int',
\ 'XSLTProcessor::transformToXML(': 'DOMDocument $doc | string',
\ 'Yaf_Action_Abstract::execute(': '[ mixed $arg [, mixed $...]] | mixed',
\ 'Yaf_Action_Abstract::getController(': 'void | Yaf_Controller_Abstract',
\ 'Yaf_Action_Abstract::__clone(': 'void | void',
\ 'Yaf_Action_Abstract::__construct(': 'void',
\ 'Yaf_Action_Abstract::display(': 'string $tpl [, array $parameters] | bool',
\ 'Yaf_Action_Abstract::forward(': 'string $action [, array $paramters] | void',
\ 'Yaf_Action_Abstract::getInvokeArg(': 'string $name | void',
\ 'Yaf_Action_Abstract::getInvokeArgs(': 'void | void',
\ 'Yaf_Action_Abstract::getModuleName(': 'void | string',
\ 'Yaf_Action_Abstract::getRequest(': 'void | Yaf_Request_Abstract',
\ 'Yaf_Action_Abstract::getResponse(': 'void | Yaf_Response_Abstract',
\ 'Yaf_Action_Abstract::getView(': 'void | Yaf_View_Interface',
\ 'Yaf_Action_Abstract::getViewpath(': 'void | void',
\ 'Yaf_Action_Abstract::init(': 'void | void',
\ 'Yaf_Action_Abstract::initView(': '[ array $options] | void',
\ 'Yaf_Action_Abstract::redirect(': 'string $url | bool',
\ 'Yaf_Action_Abstract::render(': 'string $tpl [, array $parameters] | string',
\ 'Yaf_Action_Abstract::setViewpath(': 'string $view_directory | void',
\ 'Yaf_Application::app(': 'void | void',
\ 'Yaf_Application::bootstrap(': '[ Yaf_Bootstrap_Abstract $bootstrap] | void',
\ 'Yaf_Application::clearLastError(': 'void | Yaf_Application',
\ 'Yaf_Application::__clone(': 'void | void',
\ 'Yaf_Application::__construct(': 'mixed $config [, string $envrion]',
\ 'Yaf_Application::__destruct(': 'void | void',
\ 'Yaf_Application::environ(': 'void | void',
\ 'Yaf_Application::execute(': 'callable $entry, string $... | void',
\ 'Yaf_Application::getAppDirectory(': 'void | Yaf_Application',
\ 'Yaf_Application::getConfig(': 'void | Yaf_Config_Abstract',
\ 'Yaf_Application::getDispatcher(': 'void | Yaf_Dispatcher',
\ 'Yaf_Application::getLastErrorMsg(': 'void | string',
\ 'Yaf_Application::getLastErrorNo(': 'void | int',
\ 'Yaf_Application::getModules(': 'void | array',
\ 'Yaf_Application::run(': 'void | void',
\ 'Yaf_Application::setAppDirectory(': 'string $directory | Yaf_Application',
\ 'Yaf_Application::__sleep(': 'void | void',
\ 'Yaf_Application::__wakeup(': 'void | void',
\ 'Yaf_Config_Abstract::get(': 'string $name, mixed $value | mixed',
\ 'Yaf_Config_Abstract::readonly(': 'void | bool',
\ 'Yaf_Config_Abstract::set(': 'void | Yaf_Config_Abstract',
\ 'Yaf_Config_Abstract::toArray(': 'void | array',
\ 'Yaf_Config_Ini::__construct(': 'string $config_file [, string $section]',
\ 'Yaf_Config_Ini::count(': 'void | void',
\ 'Yaf_Config_Ini::current(': 'void | void',
\ 'Yaf_Config_Ini::__get(': '[ string $name] | void',
\ 'Yaf_Config_Ini::__isset(': 'string $name | void',
\ 'Yaf_Config_Ini::key(': 'void | void',
\ 'Yaf_Config_Ini::next(': 'void | void',
\ 'Yaf_Config_Ini::offsetExists(': 'string $name | void',
\ 'Yaf_Config_Ini::offsetGet(': 'string $name | void',
\ 'Yaf_Config_Ini::offsetSet(': 'string $name, string $value | void',
\ 'Yaf_Config_Ini::offsetUnset(': 'string $name | void',
\ 'Yaf_Config_Ini::readonly(': 'void | void',
\ 'Yaf_Config_Ini::rewind(': 'void | void',
\ 'Yaf_Config_Ini::__set(': 'string $name, mixed $value | void',
\ 'Yaf_Config_Ini::toArray(': 'void | array',
\ 'Yaf_Config_Ini::valid(': 'void | void',
\ 'Yaf_Config_Ini::get(': 'string $name, mixed $value | mixed',
\ 'Yaf_Config_Ini::set(': 'void | Yaf_Config_Abstract',
\ 'Yaf_Config_Simple::__construct(': 'string $config_file [, string $section]',
\ 'Yaf_Config_Simple::count(': 'void | void',
\ 'Yaf_Config_Simple::current(': 'void | void',
\ 'Yaf_Config_Simple::__get(': '[ string $name] | void',
\ 'Yaf_Config_Simple::__isset(': 'string $name | void',
\ 'Yaf_Config_Simple::key(': 'void | void',
\ 'Yaf_Config_Simple::next(': 'void | void',
\ 'Yaf_Config_Simple::offsetExists(': 'string $name | void',
\ 'Yaf_Config_Simple::offsetGet(': 'string $name | void',
\ 'Yaf_Config_Simple::offsetSet(': 'string $name, string $value | void',
\ 'Yaf_Config_Simple::offsetUnset(': 'string $name | void',
\ 'Yaf_Config_Simple::readonly(': 'void | void',
\ 'Yaf_Config_Simple::rewind(': 'void | void',
\ 'Yaf_Config_Simple::__set(': 'string $name, string $value | void',
\ 'Yaf_Config_Simple::toArray(': 'void | array',
\ 'Yaf_Config_Simple::valid(': 'void | void',
\ 'Yaf_Config_Simple::get(': 'string $name, mixed $value | mixed',
\ 'Yaf_Config_Simple::set(': 'void | Yaf_Config_Abstract',
\ 'Yaf_Controller_Abstract::__clone(': 'void | void',
\ 'Yaf_Controller_Abstract::__construct(': 'void',
\ 'Yaf_Controller_Abstract::display(': 'string $tpl [, array $parameters] | bool',
\ 'Yaf_Controller_Abstract::forward(': 'string $action [, array $paramters] | void',
\ 'Yaf_Controller_Abstract::getInvokeArg(': 'string $name | void',
\ 'Yaf_Controller_Abstract::getInvokeArgs(': 'void | void',
\ 'Yaf_Controller_Abstract::getModuleName(': 'void | string',
\ 'Yaf_Controller_Abstract::getRequest(': 'void | Yaf_Request_Abstract',
\ 'Yaf_Controller_Abstract::getResponse(': 'void | Yaf_Response_Abstract',
\ 'Yaf_Controller_Abstract::getView(': 'void | Yaf_View_Interface',
\ 'Yaf_Controller_Abstract::getViewpath(': 'void | void',
\ 'Yaf_Controller_Abstract::init(': 'void | void',
\ 'Yaf_Controller_Abstract::initView(': '[ array $options] | void',
\ 'Yaf_Controller_Abstract::redirect(': 'string $url | bool',
\ 'Yaf_Controller_Abstract::render(': 'string $tpl [, array $parameters] | string',
\ 'Yaf_Controller_Abstract::setViewpath(': 'string $view_directory | void',
\ 'Yaf_Dispatcher::autoRender(': '[ bool $flag] | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::catchException(': '[ bool $flag] | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::__clone(': 'void | void',
\ 'Yaf_Dispatcher::__construct(': 'void',
\ 'Yaf_Dispatcher::disableView(': 'void | bool',
\ 'Yaf_Dispatcher::dispatch(': 'Yaf_Request_Abstract $request | Yaf_Response_Abstract',
\ 'Yaf_Dispatcher::enableView(': 'void | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::flushInstantly(': '[ bool $flag] | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::getApplication(': 'void | Yaf_Application',
\ 'Yaf_Dispatcher::getInstance(': 'void | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::getRequest(': 'void | Yaf_Request_Abstract',
\ 'Yaf_Dispatcher::getRouter(': 'void | Yaf_Router',
\ 'Yaf_Dispatcher::initView(': 'string $templates_dir [, array $options] | Yaf_View_Interface',
\ 'Yaf_Dispatcher::registerPlugin(': 'Yaf_Plugin_Abstract $plugin | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::returnResponse(': 'bool $flag | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setDefaultAction(': 'string $action | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setDefaultController(': 'string $controller | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setDefaultModule(': 'string $module | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setErrorHandler(': 'call $callback, int $error_types | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setRequest(': 'Yaf_Request_Abstract $request | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::setView(': 'Yaf_View_Interface $view | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::__sleep(': 'void | void',
\ 'Yaf_Dispatcher::throwException(': '[ bool $flag] | Yaf_Dispatcher',
\ 'Yaf_Dispatcher::__wakeup(': 'void | void',
\ 'Yaf_Exception_DispatchFailed::__construct(': 'void',
\ 'Yaf_Exception_DispatchFailed::getPrevious(': 'void | void',
\ 'Yaf_Exception_LoadFailed_Action::__construct(': 'void',
\ 'Yaf_Exception_LoadFailed_Action::getPrevious(': 'void | void',
\ 'Yaf_Exception_LoadFailed_Controller::__construct(': 'void',
\ 'Yaf_Exception_LoadFailed_Controller::getPrevious(': 'void | void',
\ 'Yaf_Exception_LoadFailed_Module::__construct(': 'void',
\ 'Yaf_Exception_LoadFailed_Module::getPrevious(': 'void | void',
\ 'Yaf_Exception_LoadFailed_View::__construct(': 'void',
\ 'Yaf_Exception_LoadFailed_View::getPrevious(': 'void | void',
\ 'Yaf_Exception_LoadFailed::__construct(': 'void',
\ 'Yaf_Exception_LoadFailed::getPrevious(': 'void | void',
\ 'Yaf_Exception_RouterFailed::__construct(': 'void',
\ 'Yaf_Exception_RouterFailed::getPrevious(': 'void | void',
\ 'Yaf_Exception_StartupError::__construct(': 'void',
\ 'Yaf_Exception_StartupError::getPrevious(': 'void | void',
\ 'Yaf_Exception_TypeError::__construct(': 'void',
\ 'Yaf_Exception_TypeError::getPrevious(': 'void | void',
\ 'Yaf_Exception::__construct(': 'void',
\ 'Yaf_Exception::getPrevious(': 'void | void',
\ 'Yaf_Exception::getMessage(': 'void | string',
\ 'Yaf_Exception::getCode(': 'void | mixed',
\ 'Yaf_Exception::getFile(': 'void | string',
\ 'Yaf_Exception::getLine(': 'void | int',
\ 'Yaf_Exception::getTrace(': 'void | array',
\ 'Yaf_Exception::getTraceAsString(': 'void | string',
\ 'Yaf_Exception::__toString(': 'void | string',
\ 'Yaf_Exception::__clone(': 'void | void',
\ 'Yaf_Loader::autoload(': 'void | void',
\ 'Yaf_Loader::clearLocalNamespace(': 'void | void',
\ 'Yaf_Loader::__clone(': 'void | void',
\ 'Yaf_Loader::__construct(': 'void',
\ 'Yaf_Loader::getInstance(': 'void | void',
\ 'Yaf_Loader::getLibraryPath(': '[ bool $is_global = false] | Yaf_Loader',
\ 'Yaf_Loader::getLocalNamespace(': 'void | void',
\ 'Yaf_Loader::import(': 'void | void',
\ 'Yaf_Loader::isLocalName(': 'void | void',
\ 'Yaf_Loader::registerLocalNamespace(': 'mixed $prefix | void',
\ 'Yaf_Loader::setLibraryPath(': 'string $directory [, bool $is_global = false] | Yaf_Loader',
\ 'Yaf_Loader::__sleep(': 'void | void',
\ 'Yaf_Loader::__wakeup(': 'void | void',
\ 'Yaf_Plugin_Abstract::dispatchLoopShutdown(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::dispatchLoopStartup(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::postDispatch(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::preDispatch(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::preResponse(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::routerShutdown(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Plugin_Abstract::routerStartup(': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void',
\ 'Yaf_Registry::__clone(': 'void | void',
\ 'Yaf_Registry::__construct(': 'void',
\ 'Yaf_Registry::del(': 'string $name | void',
\ 'Yaf_Registry::get(': 'string $name | mixed',
\ 'Yaf_Registry::has(': 'string $name | bool',
\ 'Yaf_Registry::set(': 'string $name, string $value | bool',
\ 'Yaf_Request_Abstract::getActionName(': 'void | void',
\ 'Yaf_Request_Abstract::getBaseUri(': 'void | void',
\ 'Yaf_Request_Abstract::getControllerName(': 'void | void',
\ 'Yaf_Request_Abstract::getEnv(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Abstract::getException(': 'void | void',
\ 'Yaf_Request_Abstract::getLanguage(': 'void | void',
\ 'Yaf_Request_Abstract::getMethod(': 'void | void',
\ 'Yaf_Request_Abstract::getModuleName(': 'void | void',
\ 'Yaf_Request_Abstract::getParam(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Abstract::getParams(': 'void | void',
\ 'Yaf_Request_Abstract::getRequestUri(': 'void | void',
\ 'Yaf_Request_Abstract::getServer(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Abstract::isCli(': 'void | void',
\ 'Yaf_Request_Abstract::isDispatched(': 'void | void',
\ 'Yaf_Request_Abstract::isGet(': 'void | void',
\ 'Yaf_Request_Abstract::isHead(': 'void | void',
\ 'Yaf_Request_Abstract::isOptions(': 'void | void',
\ 'Yaf_Request_Abstract::isPost(': 'void | void',
\ 'Yaf_Request_Abstract::isPut(': 'void | void',
\ 'Yaf_Request_Abstract::isRouted(': 'void | void',
\ 'Yaf_Request_Abstract::isXmlHttpRequest(': 'void | void',
\ 'Yaf_Request_Abstract::setActionName(': 'string $action | void',
\ 'Yaf_Request_Abstract::setBaseUri(': 'string $uir | bool',
\ 'Yaf_Request_Abstract::setControllerName(': 'string $controller | void',
\ 'Yaf_Request_Abstract::setDispatched(': 'void | void',
\ 'Yaf_Request_Abstract::setModuleName(': 'string $module | void',
\ 'Yaf_Request_Abstract::setParam(': 'string $name [, string $value] | void',
\ 'Yaf_Request_Abstract::setRequestUri(': 'string $uir | void',
\ 'Yaf_Request_Abstract::setRouted(': '[ string $flag] | void',
\ 'Yaf_Request_Http::__clone(': 'void | void',
\ 'Yaf_Request_Http::__construct(': 'void',
\ 'Yaf_Request_Http::get(': 'string $name [, string $default] | mixed',
\ 'Yaf_Request_Http::getCookie(': 'string $name [, string $default] | mixed',
\ 'Yaf_Request_Http::getFiles(': 'void | void',
\ 'Yaf_Request_Http::getPost(': 'string $name [, string $default] | mixed',
\ 'Yaf_Request_Http::getQuery(': 'string $name [, string $default] | mixed',
\ 'Yaf_Request_Http::getRequest(': 'void | void',
\ 'Yaf_Request_Http::isXmlHttpRequest(': 'void | bool',
\ 'Yaf_Request_Http::getActionName(': 'void | void',
\ 'Yaf_Request_Http::getBaseUri(': 'void | void',
\ 'Yaf_Request_Http::getControllerName(': 'void | void',
\ 'Yaf_Request_Http::getEnv(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Http::getException(': 'void | void',
\ 'Yaf_Request_Http::getLanguage(': 'void | void',
\ 'Yaf_Request_Http::getMethod(': 'void | void',
\ 'Yaf_Request_Http::getModuleName(': 'void | void',
\ 'Yaf_Request_Http::getParam(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Http::getParams(': 'void | void',
\ 'Yaf_Request_Http::getRequestUri(': 'void | void',
\ 'Yaf_Request_Http::getServer(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Http::isCli(': 'void | void',
\ 'Yaf_Request_Http::isDispatched(': 'void | void',
\ 'Yaf_Request_Http::isGet(': 'void | void',
\ 'Yaf_Request_Http::isHead(': 'void | void',
\ 'Yaf_Request_Http::isOptions(': 'void | void',
\ 'Yaf_Request_Http::isPost(': 'void | void',
\ 'Yaf_Request_Http::isPut(': 'void | void',
\ 'Yaf_Request_Http::isRouted(': 'void | void',
\ 'Yaf_Request_Http::setActionName(': 'string $action | void',
\ 'Yaf_Request_Http::setBaseUri(': 'string $uir | bool',
\ 'Yaf_Request_Http::setControllerName(': 'string $controller | void',
\ 'Yaf_Request_Http::setDispatched(': 'void | void',
\ 'Yaf_Request_Http::setModuleName(': 'string $module | void',
\ 'Yaf_Request_Http::setParam(': 'string $name [, string $value] | void',
\ 'Yaf_Request_Http::setRequestUri(': 'string $uir | void',
\ 'Yaf_Request_Http::setRouted(': '[ string $flag] | void',
\ 'Yaf_Request_Simple::__clone(': 'void | void',
\ 'Yaf_Request_Simple::__construct(': 'void',
\ 'Yaf_Request_Simple::get(': 'void | void',
\ 'Yaf_Request_Simple::getCookie(': 'void | void',
\ 'Yaf_Request_Simple::getFiles(': 'void | void',
\ 'Yaf_Request_Simple::getPost(': 'void | void',
\ 'Yaf_Request_Simple::getQuery(': 'void | void',
\ 'Yaf_Request_Simple::getRequest(': 'void | void',
\ 'Yaf_Request_Simple::isXmlHttpRequest(': 'void | void',
\ 'Yaf_Request_Simple::getActionName(': 'void | void',
\ 'Yaf_Request_Simple::getBaseUri(': 'void | void',
\ 'Yaf_Request_Simple::getControllerName(': 'void | void',
\ 'Yaf_Request_Simple::getEnv(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Simple::getException(': 'void | void',
\ 'Yaf_Request_Simple::getLanguage(': 'void | void',
\ 'Yaf_Request_Simple::getMethod(': 'void | void',
\ 'Yaf_Request_Simple::getModuleName(': 'void | void',
\ 'Yaf_Request_Simple::getParam(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Simple::getParams(': 'void | void',
\ 'Yaf_Request_Simple::getRequestUri(': 'void | void',
\ 'Yaf_Request_Simple::getServer(': 'string $name [, string $default] | void',
\ 'Yaf_Request_Simple::isCli(': 'void | void',
\ 'Yaf_Request_Simple::isDispatched(': 'void | void',
\ 'Yaf_Request_Simple::isGet(': 'void | void',
\ 'Yaf_Request_Simple::isHead(': 'void | void',
\ 'Yaf_Request_Simple::isOptions(': 'void | void',
\ 'Yaf_Request_Simple::isPost(': 'void | void',
\ 'Yaf_Request_Simple::isPut(': 'void | void',
\ 'Yaf_Request_Simple::isRouted(': 'void | void',
\ 'Yaf_Request_Simple::setActionName(': 'string $action | void',
\ 'Yaf_Request_Simple::setBaseUri(': 'string $uir | bool',
\ 'Yaf_Request_Simple::setControllerName(': 'string $controller | void',
\ 'Yaf_Request_Simple::setDispatched(': 'void | void',
\ 'Yaf_Request_Simple::setModuleName(': 'string $module | void',
\ 'Yaf_Request_Simple::setParam(': 'string $name [, string $value] | void',
\ 'Yaf_Request_Simple::setRequestUri(': 'string $uir | void',
\ 'Yaf_Request_Simple::setRouted(': '[ string $flag] | void',
\ 'Yaf_Response_Abstract::appendBody(': 'string $content [, string $key] | bool',
\ 'Yaf_Response_Abstract::clearBody(': '[ string $key] | bool',
\ 'Yaf_Response_Abstract::clearHeaders(': 'void | void',
\ 'Yaf_Response_Abstract::__clone(': 'void | void',
\ 'Yaf_Response_Abstract::__construct(': 'void',
\ 'Yaf_Response_Abstract::__destruct(': 'void | void',
\ 'Yaf_Response_Abstract::getBody(': '[ string $key] | mixed',
\ 'Yaf_Response_Abstract::getHeader(': 'void | void',
\ 'Yaf_Response_Abstract::prependBody(': 'string $content [, string $key] | bool',
\ 'Yaf_Response_Abstract::response(': 'void | void',
\ 'Yaf_Response_Abstract::setAllHeaders(': 'void | void',
\ 'Yaf_Response_Abstract::setBody(': 'string $content [, string $key] | bool',
\ 'Yaf_Response_Abstract::setHeader(': 'void | void',
\ 'Yaf_Response_Abstract::setRedirect(': 'void | void',
\ 'Yaf_Response_Abstract::__toString(': 'void | void',
\ 'Yaf_Route_Interface::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Map::__construct(': '[ string $controller_prefer = false [, string $delimiter = '''']]',
\ 'Yaf_Route_Map::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Regex::__construct(': 'string $match, array $route [, array $map [, array $verify]]',
\ 'Yaf_Route_Regex::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Rewrite::__construct(': 'string $match, array $route [, array $verify]',
\ 'Yaf_Route_Rewrite::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Simple::__construct(': 'string $module_name, string $controller_name, string $action_name',
\ 'Yaf_Route_Simple::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Static::match(': 'string $uri | void',
\ 'Yaf_Route_Static::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Route_Supervar::__construct(': 'string $supervar_name',
\ 'Yaf_Route_Supervar::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Router::addConfig(': 'Yaf_Config_Abstract $config | bool',
\ 'Yaf_Router::addRoute(': 'string $name, Yaf_Route_Abstract $route | bool',
\ 'Yaf_Router::__construct(': 'void',
\ 'Yaf_Router::getCurrentRoute(': 'void | string',
\ 'Yaf_Router::getRoute(': 'string $name | Yaf_Route_Interface',
\ 'Yaf_Router::getRoutes(': 'void | mixed',
\ 'Yaf_Router::route(': 'Yaf_Request_Abstract $request | bool',
\ 'Yaf_Session::__clone(': 'void | void',
\ 'Yaf_Session::__construct(': 'void',
\ 'Yaf_Session::count(': 'void | void',
\ 'Yaf_Session::current(': 'void | void',
\ 'Yaf_Session::del(': 'string $name | void',
\ 'Yaf_Session::__get(': 'string $name | void',
\ 'Yaf_Session::getInstance(': 'void | void',
\ 'Yaf_Session::has(': 'string $name | void',
\ 'Yaf_Session::__isset(': 'string $name | void',
\ 'Yaf_Session::key(': 'void | void',
\ 'Yaf_Session::next(': 'void | void',
\ 'Yaf_Session::offsetExists(': 'string $name | void',
\ 'Yaf_Session::offsetGet(': 'string $name | void',
\ 'Yaf_Session::offsetSet(': 'string $name, string $value | void',
\ 'Yaf_Session::offsetUnset(': 'string $name | void',
\ 'Yaf_Session::rewind(': 'void | void',
\ 'Yaf_Session::__set(': 'string $name, string $value | void',
\ 'Yaf_Session::__sleep(': 'void | void',
\ 'Yaf_Session::start(': 'void | void',
\ 'Yaf_Session::__unset(': 'string $name | void',
\ 'Yaf_Session::valid(': 'void | void',
\ 'Yaf_Session::__wakeup(': 'void | void',
\ 'Yaf_View_Interface::assign(': 'string $name [, string $value] | bool',
\ 'Yaf_View_Interface::display(': 'string $tpl [, array $tpl_vars] | bool',
\ 'Yaf_View_Interface::getScriptPath(': 'void | void',
\ 'Yaf_View_Interface::render(': 'string $tpl [, array $tpl_vars] | string',
\ 'Yaf_View_Interface::setScriptPath(': 'string $template_dir | void',
\ 'Yaf_View_Simple::assign(': 'string $name [, mixed $value] | bool',
\ 'Yaf_View_Simple::assignRef(': 'string $name, mixed &$value | bool',
\ 'Yaf_View_Simple::clear(': '[ string $name] | bool',
\ 'Yaf_View_Simple::__construct(': 'string $tempalte_dir [, array $options]',
\ 'Yaf_View_Simple::display(': 'string $tpl [, array $tpl_vars] | bool',
\ 'Yaf_View_Simple::eval(': 'string $tpl_content [, array $tpl_vars] | string',
\ 'Yaf_View_Simple::__get(': '[ string $name] | void',
\ 'Yaf_View_Simple::getScriptPath(': 'void | string',
\ 'Yaf_View_Simple::__isset(': 'string $name | void',
\ 'Yaf_View_Simple::render(': 'string $tpl [, array $tpl_vars] | string',
\ 'Yaf_View_Simple::__set(': 'string $name, mixed $value | void',
\ 'Yaf_View_Simple::setScriptPath(': 'string $template_dir | bool',
\ 'ZipArchive::addEmptyDir(': 'string $dirname | bool',
\ 'ZipArchive::addFile(': 'string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0]]] | bool',
\ 'ZipArchive::addFromString(': 'string $localname, string $contents | bool',
\ 'ZipArchive::close(': 'void | bool',
\ 'ZipArchive::deleteIndex(': 'int $index | bool',
\ 'ZipArchive::deleteName(': 'string $name | bool',
\ 'ZipArchive::extractTo(': 'string $destination [, mixed $entries] | bool',
\ 'ZipArchive::getArchiveComment(': '[ int $flags] | string',
\ 'ZipArchive::getCommentIndex(': 'int $index [, int $flags] | string',
\ 'ZipArchive::getCommentName(': 'string $name [, int $flags] | string',
\ 'ZipArchive::getFromIndex(': 'int $index [, int $length = 0 [, int $flags]] | mixed',
\ 'ZipArchive::getFromName(': 'string $name [, int $length = 0 [, int $flags]] | mixed',
\ 'ZipArchive::getNameIndex(': 'int $index [, int $flags] | string',
\ 'ZipArchive::getStatusString(': 'void | string',
\ 'ZipArchive::getStream(': 'string $name | resource',
\ 'ZipArchive::locateName(': 'string $name [, int $flags] | mixed',
\ 'ZipArchive::open(': 'string $filename [, int $flags] | mixed',
\ 'ZipArchive::renameIndex(': 'int $index, string $newname | bool',
\ 'ZipArchive::renameName(': 'string $name, string $newname | bool',
\ 'ZipArchive::setArchiveComment(': 'string $comment | mixed',
\ 'ZipArchive::setCommentIndex(': 'int $index, string $comment | mixed',
\ 'ZipArchive::setCommentName(': 'string $name, string $comment | mixed',
\ 'ZipArchive::statIndex(': 'int $index [, int $flags] | mixed',
\ 'ZipArchive::statName(': 'string $name [, int $flags] | mixed',
\ 'ZipArchive::unchangeAll(': 'void | mixed',
\ 'ZipArchive::unchangeArchive(': 'void | mixed',
\ 'ZipArchive::unchangeIndex(': 'int $index | mixed',
\ 'ZipArchive::unchangeName(': 'string $name | mixed',
\ }
