let g:php_builtin_functions = {
\ 'abs(': 'mixed $number | number',
\ 'acos(': 'float $arg | float',
\ 'acosh(': 'float $arg | float',
\ 'addcslashes(': 'string $str, string $charlist | string',
\ 'addslashes(': 'string $str | string',
\ 'aggregate_info(': 'object $object | array',
\ 'aggregate_methods_by_list(': 'object $object, string $class_name, array $methods_list [, bool $exclude = false] | void',
\ 'aggregate_methods_by_regexp(': 'object $object, string $class_name, string $regexp [, bool $exclude = false] | void',
\ 'aggregate_methods(': 'object $object, string $class_name | void',
\ 'aggregate_properties_by_list(': 'object $object, string $class_name, array $properties_list [, bool $exclude = false] | void',
\ 'aggregate_properties_by_regexp(': 'object $object, string $class_name, string $regexp [, bool $exclude = false] | void',
\ 'aggregate_properties(': 'object $object, string $class_name | void',
\ 'aggregate(': 'object $object, string $class_name | void',
\ 'aggregation_info(': 'aggregation_info â€” Alias of aggregate_info()',
\ 'apache_child_terminate(': 'void | bool',
\ 'apache_get_modules(': 'void | array',
\ 'apache_get_version(': 'void | string',
\ 'apache_getenv(': 'string $variable [, bool $walk_to_top = false] | string',
\ 'apache_lookup_uri(': 'string $filename | object',
\ 'apache_note(': 'string $note_name [, string $note_value = ""] | string',
\ 'apache_request_headers(': 'void | array',
\ 'apache_reset_timeout(': 'void | bool',
\ 'apache_response_headers(': 'void | array',
\ 'apache_setenv(': 'string $variable, string $value [, bool $walk_to_top = false] | bool',
\ 'apc_add(': 'string $key [, mixed $var [, int $ttl = 0]] | bool',
\ 'apc_bin_dump(': '[ array $files [, array $user_vars]] | string',
\ 'apc_bin_dumpfile(': 'array $files, array $user_vars, string $filename [, int $flags = 0 [, resource $context]] | int',
\ 'apc_bin_load(': 'string $data [, int $flags = 0] | bool',
\ 'apc_bin_loadfile(': 'string $filename [, resource $context [, int $flags]] | bool',
\ 'apc_cache_info(': '[ string $cache_type [, bool $limited = false]] | array',
\ 'apc_cas(': 'string $key, int $old, int $new | bool',
\ 'apc_clear_cache(': '[ string $cache_type] | bool',
\ 'apc_compile_file(': 'string $filename [, bool $atomic = true] | mixed',
\ 'apc_dec(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apc_define_constants(': 'string $key, array $constants [, bool $case_sensitive = true] | bool',
\ 'apc_delete_file(': 'mixed $keys | mixed',
\ 'apc_delete(': 'string $key | mixed',
\ 'apc_exists(': 'mixed $keys | mixed',
\ 'apc_fetch(': 'mixed $key [, bool &$success] | mixed',
\ 'apc_inc(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apc_load_constants(': 'string $key [, bool $case_sensitive = true] | bool',
\ 'apc_sma_info(': '[ bool $limited = false] | array',
\ 'apc_store(': 'string $key, mixed $var [, int $ttl = 0] | bool',
\ 'apd_breakpoint(': 'int $debug_level | bool',
\ 'apd_callstack(': 'void | array',
\ 'apd_clunk(': 'string $warning [, string $delimiter] | void',
\ 'apd_continue(': 'int $debug_level | bool',
\ 'apd_croak(': 'string $warning [, string $delimiter] | void',
\ 'apd_dump_function_table(': 'void | void',
\ 'apd_dump_persistent_resources(': 'void | array',
\ 'apd_dump_regular_resources(': 'void | array',
\ 'apd_echo(': 'string $output | bool',
\ 'apd_get_active_symbols(': 'void | array',
\ 'apd_set_pprof_trace(': '[ string $dump_directory [, string $fragment = "pprof"]] | string',
\ 'apd_set_session_trace_socket(': 'string $tcp_server, int $socket_type, int $port, int $debug_level | bool',
\ 'apd_set_session_trace(': 'int $debug_level [, string $dump_directory] | void',
\ 'apd_set_session(': 'int $debug_level | void',
\ 'array_change_key_case(': 'array $input [, int $case = CASE_LOWER] | array',
\ 'array_chunk(': 'array $input, int $size [, bool $preserve_keys = false] | array',
\ 'array_combine(': 'array $keys, array $values | array',
\ 'array_count_values(': 'array $input | array',
\ 'array_diff_assoc(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_key(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_uassoc(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_diff_ukey(': 'array $array1, array $array2 [, array $ ... [, callable $key_compare_func]] | array',
\ 'array_diff(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_fill_keys(': 'array $keys, mixed $value | array',
\ 'array_fill(': 'int $start_index, int $num, mixed $value | array',
\ 'array_filter(': 'array $input [, callable $callback = ""] | array',
\ 'array_flip(': 'array $trans | array',
\ 'array_intersect_assoc(': 'array $array1, array $array2 [, array $ ...] | array',
\ 'array_intersect_key(': 'array $array1, array $array2 [, array $ ...] | array',
\ 'array_intersect_uassoc(': 'array $array1, array $array2 [, array $ ... [, callable $key_compare_func]] | array',
\ 'array_intersect_ukey(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_intersect(': 'array $array1, array $array2 [, array $ ...] | array',
\ 'array_key_exists(': 'mixed $key, array $search | bool',
\ 'array_keys(': 'array $input [, mixed $search_value = NULL [, bool $strict = false]] | array',
\ 'array_map(': 'callable $callback, array $arr1 [, array $...] | array',
\ 'array_merge_recursive(': 'array $array1 [, array $...] | array',
\ 'array_merge(': 'array $array1 [, array $...] | array',
\ 'array_multisort(': 'array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $...]]] | bool',
\ 'array_pad(': 'array $input, int $pad_size, mixed $pad_value | array',
\ 'array_pop(': 'array &$array | mixed',
\ 'array_product(': 'array $array | number',
\ 'array_push(': 'array &$array, mixed $var [, mixed $...] | int',
\ 'array_rand(': 'array $input [, int $num_req = 1] | mixed',
\ 'array_reduce(': 'array $input, callable $function [, mixed $initial = NULL] | mixed',
\ 'array_replace_recursive(': 'array $array, array $array1 [, array $...] | array',
\ 'array_replace(': 'array $array, array $array1 [, array $...] | array',
\ 'array_reverse(': 'array $array [, bool $preserve_keys = false] | array',
\ 'array_search(': 'mixed $needle, array $haystack [, bool $strict = false] | mixed',
\ 'array_shift(': 'array &$array | mixed',
\ 'array_slice(': 'array $array, int $offset [, int $length = NULL [, bool $preserve_keys = false]] | array',
\ 'array_splice(': 'array &$input, int $offset [, int $length = 0 [, mixed $replacement]] | array',
\ 'array_sum(': 'array $array | number',
\ 'array_udiff_assoc(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func]] | array',
\ 'array_udiff_uassoc(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func [, callable $key_compare_func]]] | array',
\ 'array_udiff(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func]] | array',
\ 'array_uintersect_assoc(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func]] | array',
\ 'array_uintersect_uassoc(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func [, callable $key_compare_func]]] | array',
\ 'array_uintersect(': 'array $array1, array $array2 [, array $ ... [, callable $data_compare_func]] | array',
\ 'array_unique(': 'array $array [, int $sort_flags = SORT_STRING] | array',
\ 'array_unshift(': 'array &$array, mixed $var [, mixed $...] | int',
\ 'array_values(': 'array $input | array',
\ 'array_walk_recursive(': 'array &$input, callable $funcname [, mixed $userdata = NULL] | bool',
\ 'array_walk(': 'array &$array, callable $funcname [, mixed $userdata = NULL] | bool',
\ 'array(': '[ mixed $...] | array',
\ 'arsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'asin(': 'float $arg | float',
\ 'asinh(': 'float $arg | float',
\ 'asort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'assert_options(': 'int $what [, mixed $value] | mixed',
\ 'assert(': 'mixed $assertion [, string $description] | bool',
\ 'atan(': 'float $arg | float',
\ 'atan2(': 'float $y, float $x | float',
\ 'atanh(': 'float $arg | float',
\ '__autoload(': 'string $class | void',
\ 'base_convert(': 'string $number, int $frombase, int $tobase | string',
\ 'base64_decode(': 'string $data [, bool $strict = false] | string',
\ 'base64_encode(': 'string $data | string',
\ 'basename(': 'string $path [, string $suffix] | string',
\ 'bbcode_add_element(': 'resource $bbcode_container, string $tag_name, array $tag_rules | bool',
\ 'bbcode_add_smiley(': 'resource $bbcode_container, string $smiley, string $replace_by | bool',
\ 'bbcode_create(': '[ array $bbcode_initial_tags] | resource',
\ 'bbcode_destroy(': 'resource $bbcode_container | bool',
\ 'bbcode_parse(': 'resource $bbcode_container, string $to_parse | string',
\ 'bbcode_set_arg_parser(': 'resource $bbcode_container, resource $bbcode_arg_parser | bool',
\ 'bbcode_set_flags(': 'resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET] | bool',
\ 'bcadd(': 'string $left_operand, string $right_operand [, int $scale] | string',
\ 'bccomp(': 'string $left_operand, string $right_operand [, int $scale] | int',
\ 'bcdiv(': 'string $left_operand, string $right_operand [, int $scale] | string',
\ 'bcmod(': 'string $left_operand, string $modulus | string',
\ 'bcmul(': 'string $left_operand, string $right_operand [, int $scale] | string',
\ 'bcompiler_load_exe(': 'string $filename | bool',
\ 'bcompiler_load(': 'string $filename | bool',
\ 'bcompiler_parse_class(': 'string $class, string $callback | bool',
\ 'bcompiler_read(': 'resource $filehandle | bool',
\ 'bcompiler_write_class(': 'resource $filehandle, string $className [, string $extends] | bool',
\ 'bcompiler_write_constant(': 'resource $filehandle, string $constantName | bool',
\ 'bcompiler_write_exe_footer(': 'resource $filehandle, int $startpos | bool',
\ 'bcompiler_write_file(': 'resource $filehandle, string $filename | bool',
\ 'bcompiler_write_footer(': 'resource $filehandle | bool',
\ 'bcompiler_write_function(': 'resource $filehandle, string $functionName | bool',
\ 'bcompiler_write_functions_from_file(': 'resource $filehandle, string $fileName | bool',
\ 'bcompiler_write_header(': 'resource $filehandle [, string $write_ver] | bool',
\ 'bcompiler_write_included_filename(': 'resource $filehandle, string $filename | bool',
\ 'bcpow(': 'string $left_operand, string $right_operand [, int $scale] | string',
\ 'bcpowmod(': 'string $left_operand, string $right_operand, string $modulus [, int $scale] | string',
\ 'bcscale(': 'int $scale | bool',
\ 'bcsqrt(': 'string $operand [, int $scale] | string',
\ 'bcsub(': 'string $left_operand, string $right_operand [, int $scale] | string',
\ 'bin2hex(': 'string $str | string',
\ 'bind_textdomain_codeset(': 'string $domain, string $codeset | string',
\ 'bindec(': 'string $binary_string | number',
\ 'bindtextdomain(': 'string $domain, string $directory | string',
\ 'boolval(': 'mixed $var | boolean',
\ 'bson_decode(': 'string $bson | array',
\ 'bson_encode(': 'mixed $anything | string',
\ 'bzclose(': 'resource $bz | int',
\ 'bzcompress(': 'string $source [, int $blocksize = 4 [, int $workfactor = 0]] | mixed',
\ 'bzdecompress(': 'string $source [, int $small = 0] | mixed',
\ 'bzerrno(': 'resource $bz | int',
\ 'bzerror(': 'resource $bz | array',
\ 'bzerrstr(': 'resource $bz | string',
\ 'bzflush(': 'resource $bz | int',
\ 'bzopen(': 'string $filename, string $mode | resource',
\ 'bzread(': 'resource $bz [, int $length = 1024] | string',
\ 'bzwrite(': 'resource $bz, string $data [, int $length] | int',
\ 'cairo_create(': 'CairoSurface $surface | CairoContext',
\ 'cairo_font_face_get_type(': 'CairoFontFace $fontface | int',
\ 'cairo_font_face_status(': 'CairoFontFace $fontface | int',
\ 'cairo_font_options_create(': 'void | CairoFontOptions',
\ 'cairo_font_options_equal(': 'CairoFontOptions $options, CairoFontOptions $other | bool',
\ 'cairo_font_options_get_antialias(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_hint_metrics(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_hint_style(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_subpixel_order(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_hash(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_merge(': 'CairoFontOptions $options, CairoFontOptions $other | void',
\ 'cairo_font_options_set_antialias(': 'CairoFontOptions $options, int $antialias | void',
\ 'cairo_font_options_set_hint_metrics(': 'CairoFontOptions $options, int $hint_metrics | void',
\ 'cairo_font_options_set_hint_style(': 'CairoFontOptions $options, int $hint_style | void',
\ 'cairo_font_options_set_subpixel_order(': 'CairoFontOptions $options, int $subpixel_order | void',
\ 'cairo_font_options_status(': 'CairoFontOptions $options | int',
\ 'cairo_format_stride_for_width(': 'int $format, int $width | int',
\ 'cairo_image_surface_create_for_data(': 'string $data, int $format, int $width, int $height [, int $stride = -1] | CairoImageSurface',
\ 'cairo_image_surface_create_from_png(': 'string $file | CairoImageSurface',
\ 'cairo_image_surface_create(': 'int $format, int $width, int $height | CairoImageSurface',
\ 'cairo_image_surface_get_data(': 'CairoImageSurface $surface | string',
\ 'cairo_image_surface_get_format(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_height(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_stride(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_width(': 'CairoImageSurface $surface | int',
\ 'cairo_matrix_create_scale(': 'cairo_matrix_create_scale â€” Alias of CairoMatrix::initScale()',
\ 'cairo_matrix_create_translate(': 'cairo_matrix_create_translate â€” Alias of CairoMatrix::initTranslate()',
\ 'cairo_matrix_invert(': 'CairoMatrix $matrix | void',
\ 'cairo_matrix_multiply(': 'CairoMatrix $matrix1, CairoMatrix $matrix2 | CairoMatrix',
\ 'cairo_matrix_rotate(': 'CairoMatrix $matrix, float $radians | void',
\ 'cairo_matrix_transform_distance(': 'CairoMatrix $matrix, float $dx, float $dy | array',
\ 'cairo_matrix_transform_point(': 'CairoMatrix $matrix, float $dx, float $dy | array',
\ 'cairo_matrix_translate(': 'CairoMatrix $matrix, float $tx, float $ty | void',
\ 'cairo_pattern_add_color_stop_rgb(': 'CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue | void',
\ 'cairo_pattern_add_color_stop_rgba(': 'CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha | void',
\ 'cairo_pattern_create_for_surface(': 'CairoSurface $surface | CairoPattern',
\ 'cairo_pattern_create_linear(': 'float $x0, float $y0, float $x1, float $y1 | CairoPattern',
\ 'cairo_pattern_create_radial(': 'float $x0, float $y0, float $r0, float $x1, float $y1, float $r1 | CairoPattern',
\ 'cairo_pattern_create_rgb(': 'float $red, float $green, float $blue | CairoPattern',
\ 'cairo_pattern_create_rgba(': 'float $red, float $green, float $blue, float $alpha | CairoPattern',
\ 'cairo_pattern_get_color_stop_count(': 'CairoGradientPattern $pattern | int',
\ 'cairo_pattern_get_color_stop_rgba(': 'CairoGradientPattern $pattern, int $index | array',
\ 'cairo_pattern_get_extend(': 'string $pattern | int',
\ 'cairo_pattern_get_filter(': 'CairoSurfacePattern $pattern | int',
\ 'cairo_pattern_get_linear_points(': 'CairoLinearGradient $pattern | array',
\ 'cairo_pattern_get_matrix(': 'CairoPattern $pattern | CairoMatrix',
\ 'cairo_pattern_get_radial_circles(': 'CairoRadialGradient $pattern | array',
\ 'cairo_pattern_get_rgba(': 'CairoSolidPattern $pattern | array',
\ 'cairo_pattern_get_surface(': 'CairoSurfacePattern $pattern | CairoSurface',
\ 'cairo_pattern_get_type(': 'CairoPattern $pattern | int',
\ 'cairo_pattern_set_extend(': 'string $pattern, string $extend | void',
\ 'cairo_pattern_set_filter(': 'CairoSurfacePattern $pattern, int $filter | void',
\ 'cairo_pattern_set_matrix(': 'CairoPattern $pattern, CairoMatrix $matrix | void',
\ 'cairo_pattern_status(': 'CairoPattern $pattern | int',
\ 'cairo_pdf_surface_create(': 'string $file, float $width, float $height | CairoPdfSurface',
\ 'cairo_pdf_surface_set_size(': 'CairoPdfSurface $surface, float $width, float $height | void',
\ 'cairo_ps_get_levels(': 'void | array',
\ 'cairo_ps_level_to_string(': 'int $level | string',
\ 'cairo_ps_surface_create(': 'string $file, float $width, float $height | CairoPsSurface',
\ 'cairo_ps_surface_dsc_begin_page_setup(': 'CairoPsSurface $surface | void',
\ 'cairo_ps_surface_dsc_begin_setup(': 'CairoPsSurface $surface | void',
\ 'cairo_ps_surface_dsc_comment(': 'CairoPsSurface $surface, string $comment | void',
\ 'cairo_ps_surface_get_eps(': 'CairoPsSurface $surface | bool',
\ 'cairo_ps_surface_restrict_to_level(': 'CairoPsSurface $surface, int $level | void',
\ 'cairo_ps_surface_set_eps(': 'CairoPsSurface $surface, bool $level | void',
\ 'cairo_ps_surface_set_size(': 'CairoPsSurface $surface, float $width, float $height | void',
\ 'cairo_scaled_font_create(': 'CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions | CairoScaledFont',
\ 'cairo_scaled_font_extents(': 'CairoScaledFont $scaledfont | array',
\ 'cairo_scaled_font_get_ctm(': 'CairoScaledFont $scaledfont | CairoMatrix',
\ 'cairo_scaled_font_get_font_face(': 'CairoScaledFont $scaledfont | CairoFontFace',
\ 'cairo_scaled_font_get_font_matrix(': 'CairoScaledFont $scaledfont | CairoFontOptions',
\ 'cairo_scaled_font_get_font_options(': 'CairoScaledFont $scaledfont | CairoFontOptions',
\ 'cairo_scaled_font_get_scale_matrix(': 'CairoScaledFont $scaledfont | CairoMatrix',
\ 'cairo_scaled_font_get_type(': 'CairoScaledFont $scaledfont | int',
\ 'cairo_scaled_font_glyph_extents(': 'CairoScaledFont $scaledfont, array $glyphs | array',
\ 'cairo_scaled_font_status(': 'CairoScaledFont $scaledfont | int',
\ 'cairo_scaled_font_text_extents(': 'CairoScaledFont $scaledfont, string $text | array',
\ 'cairo_surface_copy_page(': 'CairoSurface $surface | void',
\ 'cairo_surface_create_similar(': 'CairoSurface $surface, int $content, float $width, float $height | CairoSurface',
\ 'cairo_surface_finish(': 'CairoSurface $surface | void',
\ 'cairo_surface_flush(': 'CairoSurface $surface | void',
\ 'cairo_surface_get_content(': 'CairoSurface $surface | int',
\ 'cairo_surface_get_device_offset(': 'CairoSurface $surface | array',
\ 'cairo_surface_get_font_options(': 'CairoSurface $surface | CairoFontOptions',
\ 'cairo_surface_get_type(': 'CairoSurface $surface | int',
\ 'cairo_surface_mark_dirty_rectangle(': 'CairoSurface $surface, float $x, float $y, float $width, float $height | void',
\ 'cairo_surface_mark_dirty(': 'CairoSurface $surface | void',
\ 'cairo_surface_set_device_offset(': 'CairoSurface $surface, float $x, float $y | void',
\ 'cairo_surface_set_fallback_resolution(': 'CairoSurface $surface, float $x, float $y | void',
\ 'cairo_surface_show_page(': 'CairoSurface $surface | void',
\ 'cairo_surface_status(': 'CairoSurface $surface | int',
\ 'cairo_surface_write_to_png(': 'CairoSurface $surface, resource $stream | void',
\ 'cairo_svg_surface_create(': 'string $file, float $width, float $height | CairoSvgSurface',
\ 'cairo_svg_surface_restrict_to_version(': 'CairoSvgSurface $surface, int $version | void',
\ 'cairo_svg_version_to_string(': 'int $version | string',
\ 'cal_days_in_month(': 'int $calendar, int $month, int $year | int',
\ 'cal_from_jd(': 'int $jd, int $calendar | array',
\ 'cal_info(': '[ int $calendar = -1] | array',
\ 'cal_to_jd(': 'int $calendar, int $month, int $day, int $year | int',
\ 'calcul_hmac(': 'string $clent, string $siretcode, string $price, string $reference, string $validity, string $taxation, string $devise, string $language | string',
\ 'calculhmac(': 'string $clent, string $data | string',
\ 'call_user_func_array(': 'callable $callback, array $param_arr | mixed',
\ 'call_user_func(': 'callable $callback [, mixed $parameter [, mixed $...]] | mixed',
\ 'call_user_method_array(': 'string $method_name, object &$obj, array $params | mixed',
\ 'call_user_method(': 'string $method_name, object &$obj [, mixed $parameter [, mixed $...]] | mixed',
\ 'ceil(': 'float $value | float',
\ 'chdb_create(': 'string $pathname, array $data | bool',
\ 'chdir(': 'string $directory | bool',
\ 'checkdate(': 'int $month, int $day, int $year | bool',
\ 'checkdnsrr(': 'string $host [, string $type = "MX"] | bool',
\ 'chgrp(': 'string $filename, mixed $group | bool',
\ 'chmod(': 'string $filename, int $mode | bool',
\ 'chop(': 'chop â€” Alias of rtrim()',
\ 'chown(': 'string $filename, mixed $user | bool',
\ 'chr(': 'int $ascii | string',
\ 'chroot(': 'string $directory | bool',
\ 'chunk_split(': 'string $body [, int $chunklen = 76 [, string $end = "\r\n"]] | string',
\ 'class_alias(': 'string $original, string $alias [, bool $autoload = TRUE] | bool',
\ 'class_exists(': 'string $class_name [, bool $autoload = true] | bool',
\ 'class_implements(': 'mixed $class [, bool $autoload = true] | array',
\ 'class_parents(': 'mixed $class [, bool $autoload = true] | array',
\ 'class_uses(': 'mixed $class [, bool $autoload = true] | array',
\ 'classkit_import(': 'string $filename | array',
\ 'classkit_method_add(': 'string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC] | bool',
\ 'classkit_method_copy(': 'string $dClass, string $dMethod, string $sClass [, string $sMethod] | bool',
\ 'classkit_method_redefine(': 'string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC] | bool',
\ 'classkit_method_remove(': 'string $classname, string $methodname | bool',
\ 'classkit_method_rename(': 'string $classname, string $methodname, string $newname | bool',
\ 'clearstatcache(': '[ bool $clear_realpath_cache = false [, string $filename]] | void',
\ 'closedir(': '[ resource $dir_handle] | void',
\ 'closelog(': 'void | bool',
\ 'com_addref(': 'void | void',
\ 'com_create_guid(': 'void | string',
\ 'com_event_sink(': 'variant $comobject, object $sinkobject [, mixed $sinkinterface] | bool',
\ 'com_get_active_object(': 'string $progid [, int $code_page] | variant',
\ 'com_invoke(': 'resource $com_object, string $function_name [, mixed $function_parameters] | mixed',
\ 'com_isenum(': 'variant $com_module | bool',
\ 'com_load_typelib(': 'string $typelib_name [, bool $case_insensitive = true] | bool',
\ 'com_message_pump(': '[ int $timeoutms = 0] | bool',
\ 'com_print_typeinfo(': 'object $comobject [, string $dispinterface [, bool $wantsink = false]] | bool',
\ 'com_propget(': 'com_propget â€” Alias of com_get()',
\ 'com_propput(': 'com_propput â€” Alias of com_set()',
\ 'com_propset(': 'com_propset â€” Alias of com_set()',
\ 'com_release(': 'void | void',
\ 'compact(': 'mixed $varname [, mixed $...] | array',
\ 'connection_aborted(': 'void | int',
\ 'connection_status(': 'void | int',
\ 'connection_timeout(': 'void | int',
\ 'constant(': 'string $name | mixed',
\ 'convert_cyr_string(': 'string $str, string $from, string $to | string',
\ 'convert_uudecode(': 'string $data | string',
\ 'convert_uuencode(': 'string $data | string',
\ 'copy(': 'string $source, string $dest [, resource $context] | bool',
\ 'cos(': 'float $arg | float',
\ 'cosh(': 'float $arg | float',
\ 'count_chars(': 'string $string [, int $mode = 0] | mixed',
\ 'count(': 'mixed $var [, int $mode = COUNT_NORMAL] | int',
\ 'crack_check(': 'resource $dictionary, string $password | bool',
\ 'crack_closedict(': '[ resource $dictionary] | bool',
\ 'crack_getlastmessage(': 'void | string',
\ 'crack_opendict(': 'string $dictionary | resource',
\ 'crc32(': 'string $str | int',
\ 'create_function(': 'string $args, string $code | string',
\ 'crypt(': 'string $str [, string $salt] | string',
\ 'ctype_alnum(': 'string $text | bool',
\ 'ctype_alpha(': 'string $text | bool',
\ 'ctype_cntrl(': 'string $text | bool',
\ 'ctype_digit(': 'string $text | bool',
\ 'ctype_graph(': 'string $text | bool',
\ 'ctype_lower(': 'string $text | bool',
\ 'ctype_print(': 'string $text | bool',
\ 'ctype_punct(': 'string $text | bool',
\ 'ctype_space(': 'string $text | bool',
\ 'ctype_upper(': 'string $text | bool',
\ 'ctype_xdigit(': 'string $text | bool',
\ 'cubrid_affected_rows(': '[ resource $conn_identifier] | int',
\ 'cubrid_bind(': 'resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type] | bool',
\ 'cubrid_client_encoding(': '[ resource $conn_identifier] | string',
\ 'cubrid_close_prepare(': 'resource $req_identifier | bool',
\ 'cubrid_close_request(': 'resource $req_identifier | bool',
\ 'cubrid_close(': '[ resource $conn_identifier] | bool',
\ 'cubrid_col_get(': 'resource $conn_identifier, string $oid, string $attr_name | array',
\ 'cubrid_col_size(': 'resource $conn_identifier, string $oid, string $attr_name | int',
\ 'cubrid_column_names(': 'resource $req_identifier | array',
\ 'cubrid_column_types(': 'resource $req_identifier | array',
\ 'cubrid_commit(': 'resource $conn_identifier | bool',
\ 'cubrid_connect_with_url(': 'string $conn_url [, string $userid [, string $passwd [, bool $new_link = false]]] | resource',
\ 'cubrid_connect(': 'string $host, int $port, string $dbname [, string $userid [, string $passwd [, bool $new_link = false]]] | resource',
\ 'cubrid_current_oid(': 'resource $req_identifier | string',
\ 'cubrid_data_seek(': 'resource $result, int $row_number | bool',
\ 'cubrid_db_name(': 'array $result, int $index | string',
\ 'cubrid_disconnect(': '[ resource $conn_identifier] | bool',
\ 'cubrid_drop(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_errno(': '[ resource $conn_identifier] | int',
\ 'cubrid_error_code_facility(': 'void | int',
\ 'cubrid_error_code(': 'void | int',
\ 'cubrid_error_msg(': 'void | string',
\ 'cubrid_error(': '[ resource $connection] | string',
\ 'cubrid_execute(': 'resource $conn_identifier, string $sql [, int $option] | resource',
\ 'cubrid_fetch_array(': 'resource $result [, int $type = CUBRID_BOTH] | array',
\ 'cubrid_fetch_assoc(': 'resource $result [, int $type] | array',
\ 'cubrid_fetch_field(': 'resource $result [, int $field_offset = 0] | object',
\ 'cubrid_fetch_lengths(': 'resource $result | array',
\ 'cubrid_fetch_object(': 'resource $result [, string $class_name [, array $params [, int $type]]] | object',
\ 'cubrid_fetch_row(': 'resource $result [, int $type] | array',
\ 'cubrid_fetch(': 'resource $result [, int $type = CUBRID_BOTH] | mixed',
\ 'cubrid_field_flags(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_len(': 'resource $result, int $field_offset | int',
\ 'cubrid_field_name(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_seek(': 'resource $result [, int $field_offset = 0] | bool',
\ 'cubrid_field_table(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_type(': 'resource $result, int $field_offset | string',
\ 'cubrid_free_result(': 'resource $req_identifier | bool',
\ 'cubrid_get_autocommit(': 'resource $conn_identifier | bool',
\ 'cubrid_get_charset(': 'resource $conn_identifier | string',
\ 'cubrid_get_class_name(': 'resource $conn_identifier, string $oid | string',
\ 'cubrid_get_client_info(': 'void | string',
\ 'cubrid_get_db_parameter(': 'resource $conn_identifier | array',
\ 'cubrid_get_query_timeout(': 'resource $req_identifier | int',
\ 'cubrid_get_server_info(': 'resource $conn_identifier | string',
\ 'cubrid_get(': 'resource $conn_identifier, string $oid [, mixed $attr] | mixed',
\ 'cubrid_insert_id(': '[ resource $conn_identifier] | string',
\ 'cubrid_is_instance(': 'resource $conn_identifier, string $oid | int',
\ 'cubrid_list_dbs(': '[ resource $conn_identifier] | array',
\ 'cubrid_load_from_glo(': 'resource $conn_identifier, string $oid, string $file_name | int',
\ 'cubrid_lob_close(': 'array $lob_identifier_array | bool',
\ 'cubrid_lob_export(': 'resource $conn_identifier, resource $lob_identifier, string $path_name | bool',
\ 'cubrid_lob_get(': 'resource $conn_identifier, string $sql | array',
\ 'cubrid_lob_send(': 'resource $conn_identifier, resource $lob_identifier | bool',
\ 'cubrid_lob_size(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_bind(': 'resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type] | bool',
\ 'cubrid_lob2_close(': 'resource $lob_identifier | bool',
\ 'cubrid_lob2_export(': 'resource $lob_identifier, string $file_name | bool',
\ 'cubrid_lob2_import(': 'resource $lob_identifier, string $file_name | bool',
\ 'cubrid_lob2_new(': '[ resource $conn_identifier [, string $type = "BLOB"]] | resource',
\ 'cubrid_lob2_read(': 'resource $lob_identifier, int $len | string',
\ 'cubrid_lob2_seek(': 'resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT] | bool',
\ 'cubrid_lob2_seek64(': 'resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT] | bool',
\ 'cubrid_lob2_size(': 'resource $lob_identifier | int',
\ 'cubrid_lob2_size64(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_tell(': 'resource $lob_identifier | int',
\ 'cubrid_lob2_tell64(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_write(': 'resource $lob_identifier, string $buf | bool',
\ 'cubrid_lock_read(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_lock_write(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_move_cursor(': 'resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT] | int',
\ 'cubrid_new_glo(': 'resource $conn_identifier, string $class_name, string $file_name | string',
\ 'cubrid_next_result(': 'resource $result | bool',
\ 'cubrid_num_cols(': 'resource $result | int',
\ 'cubrid_num_fields(': 'resource $result | int',
\ 'cubrid_num_rows(': 'resource $result | int',
\ 'cubrid_pconnect_with_url(': 'string $conn_url [, string $userid [, string $passwd]] | resource',
\ 'cubrid_pconnect(': 'string $host, int $port, string $dbname [, string $userid [, string $passwd]] | resource',
\ 'cubrid_ping(': '[ resource $conn_identifier] | bool',
\ 'cubrid_prepare(': 'resource $conn_identifier, string $prepare_stmt [, int $option = 0] | resource',
\ 'cubrid_put(': 'resource $conn_identifier, string $oid [, string $attr [, mixed $value]] | int',
\ 'cubrid_query(': 'string $query [, resource $conn_identifier] | resource',
\ 'cubrid_real_escape_string(': 'string $unescaped_string [, resource $conn_identifier] | string',
\ 'cubrid_result(': 'resource $result, int $row [, mixed $field = 0] | string',
\ 'cubrid_rollback(': 'resource $conn_identifier | bool',
\ 'cubrid_save_to_glo(': 'resource $conn_identifier, string $oid, string $file_name | int',
\ 'cubrid_schema(': 'resource $conn_identifier, int $schema_type [, string $class_name [, string $attr_name]] | array',
\ 'cubrid_send_glo(': 'resource $conn_identifier, string $oid | int',
\ 'cubrid_seq_drop(': 'resource $conn_identifier, string $oid, string $attr_name, int $index | bool',
\ 'cubrid_seq_insert(': 'resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element | bool',
\ 'cubrid_seq_put(': 'resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element | bool',
\ 'cubrid_set_add(': 'resource $conn_identifier, string $oid, string $attr_name, string $set_element | bool',
\ 'cubrid_set_autocommit(': 'resource $conn_identifier, bool $mode | bool',
\ 'cubrid_set_db_parameter(': 'resource $conn_identifier, int $param_type, int $param_value | bool',
\ 'cubrid_set_drop(': 'resource $conn_identifier, string $oid, string $attr_name, string $set_element | bool',
\ 'cubrid_set_query_timeout(': 'resource $req_identifier, int $timeout | bool',
\ 'cubrid_unbuffered_query(': 'string $query [, resource $conn_identifier] | resource',
\ 'cubrid_version(': 'void | string',
\ 'curl_close(': 'resource $ch | void',
\ 'curl_copy_handle(': 'resource $ch | resource',
\ 'curl_errno(': 'resource $ch | int',
\ 'curl_error(': 'resource $ch | string',
\ 'curl_exec(': 'resource $ch | mixed',
\ 'curl_getinfo(': 'resource $ch [, int $opt = 0] | mixed',
\ 'curl_init(': '[ string $url = NULL] | resource',
\ 'curl_multi_add_handle(': 'resource $mh, resource $ch | int',
\ 'curl_multi_close(': 'resource $mh | void',
\ 'curl_multi_exec(': 'resource $mh, int &$still_running | int',
\ 'curl_multi_getcontent(': 'resource $ch | string',
\ 'curl_multi_info_read(': 'resource $mh [, int &$msgs_in_queue = NULL] | array',
\ 'curl_multi_init(': 'void | resource',
\ 'curl_multi_remove_handle(': 'resource $mh, resource $ch | int',
\ 'curl_multi_select(': 'resource $mh [, float $timeout = 1.0] | int',
\ 'curl_setopt_array(': 'resource $ch, array $options | bool',
\ 'curl_setopt(': 'resource $ch, int $option, mixed $value | bool',
\ 'curl_version(': '[ int $age = CURLVERSION_NOW] | array',
\ 'current(': 'array &$array | mixed',
\ 'cyrus_authenticate(': 'resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password]]]]]]] | void',
\ 'cyrus_bind(': 'resource $connection, array $callbacks | bool',
\ 'cyrus_close(': 'resource $connection | bool',
\ 'cyrus_connect(': '[ string $host [, string $port [, int $flags]]] | resource',
\ 'cyrus_query(': 'resource $connection, string $query | array',
\ 'cyrus_unbind(': 'resource $connection, string $trigger_name | bool',
\ 'date_default_timezone_get(': 'void | string',
\ 'date_default_timezone_set(': 'string $timezone_identifier | bool',
\ 'date_parse_from_format(': 'string $format, string $date | array',
\ 'date_parse(': 'string $date | array',
\ 'date_sun_info(': 'int $time, float $latitude, float $longitude | array',
\ 'date_sunrise(': 'int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0]]]]] | mixed',
\ 'date_sunset(': 'int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0]]]]] | mixed',
\ 'date(': 'string $format [, int $timestamp = time()] | string',
\ 'db2_autocommit(': 'resource $connection [, bool $value] | mixed',
\ 'db2_bind_param(': 'resource $stmt, int $parameter-number, string $variable-name [, int $parameter-type [, int $data-type = 0 [, int $precision = -1 [, int $scale = 0]]]] | bool',
\ 'db2_client_info(': 'resource $connection | object',
\ 'db2_close(': 'resource $connection | bool',
\ 'db2_column_privileges(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]] | resource',
\ 'db2_columns(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]] | resource',
\ 'db2_commit(': 'resource $connection | bool',
\ 'db2_conn_error(': '[ resource $connection] | string',
\ 'db2_conn_errormsg(': '[ resource $connection] | string',
\ 'db2_connect(': 'string $database, string $username, string $password [, array $options] | resource',
\ 'db2_cursor_type(': 'resource $stmt | int',
\ 'db2_escape_string(': 'string $string_literal | string',
\ 'db2_exec(': 'resource $connection, string $statement [, array $options] | resource',
\ 'db2_execute(': 'resource $stmt [, array $parameters] | bool',
\ 'db2_fetch_array(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_assoc(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_both(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_object(': 'resource $stmt [, int $row_number = -1] | object',
\ 'db2_fetch_row(': 'resource $stmt [, int $row_number] | bool',
\ 'db2_field_display_size(': 'resource $stmt, mixed $column | int',
\ 'db2_field_name(': 'resource $stmt, mixed $column | string',
\ 'db2_field_num(': 'resource $stmt, mixed $column | int',
\ 'db2_field_precision(': 'resource $stmt, mixed $column | int',
\ 'db2_field_scale(': 'resource $stmt, mixed $column | int',
\ 'db2_field_type(': 'resource $stmt, mixed $column | string',
\ 'db2_field_width(': 'resource $stmt, mixed $column | int',
\ 'db2_foreign_keys(': 'resource $connection, string $qualifier, string $schema, string $table-name | resource',
\ 'db2_free_result(': 'resource $stmt | bool',
\ 'db2_free_stmt(': 'resource $stmt | bool',
\ 'db2_get_option(': 'resource $resource, string $option | string',
\ 'db2_last_insert_id(': 'resource $resource | string',
\ 'db2_lob_read(': 'resource $stmt, int $colnum, int $length | string',
\ 'db2_next_result(': 'resource $stmt | resource',
\ 'db2_num_fields(': 'resource $stmt | int',
\ 'db2_num_rows(': 'resource $stmt | int',
\ 'db2_pclose(': 'resource $resource | bool',
\ 'db2_pconnect(': 'string $database, string $username, string $password [, array $options] | resource',
\ 'db2_prepare(': 'resource $connection, string $statement [, array $options] | resource',
\ 'db2_primary_keys(': 'resource $connection, string $qualifier, string $schema, string $table-name | resource',
\ 'db2_procedure_columns(': 'resource $connection, string $qualifier, string $schema, string $procedure, string $parameter | resource',
\ 'db2_procedures(': 'resource $connection, string $qualifier, string $schema, string $procedure | resource',
\ 'db2_result(': 'resource $stmt, mixed $column | mixed',
\ 'db2_rollback(': 'resource $connection | bool',
\ 'db2_server_info(': 'resource $connection | object',
\ 'db2_set_option(': 'resource $resource, array $options, int $type | bool',
\ 'db2_special_columns(': 'resource $connection, string $qualifier, string $schema, string $table_name, int $scope | resource',
\ 'db2_statistics(': 'resource $connection, string $qualifier, string $schema, string $table-name, bool $unique | resource',
\ 'db2_stmt_error(': '[ resource $stmt] | string',
\ 'db2_stmt_errormsg(': '[ resource $stmt] | string',
\ 'db2_table_privileges(': 'resource $connection [, string $qualifier [, string $schema [, string $table_name]]] | resource',
\ 'db2_tables(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type]]]] | resource',
\ 'dba_close(': 'resource $handle | void',
\ 'dba_delete(': 'string $key, resource $handle | bool',
\ 'dba_exists(': 'string $key, resource $handle | bool',
\ 'dba_fetch(': 'string $key, resource $handle | string',
\ 'dba_firstkey(': 'resource $handle | string',
\ 'dba_handlers(': '[ bool $full_info = false] | array',
\ 'dba_insert(': 'string $key, string $value, resource $handle | bool',
\ 'dba_key_split(': 'mixed $key | mixed',
\ 'dba_list(': 'void | array',
\ 'dba_nextkey(': 'resource $handle | string',
\ 'dba_open(': 'string $path, string $mode [, string $handler [, mixed $...]] | resource',
\ 'dba_optimize(': 'resource $handle | bool',
\ 'dba_popen(': 'string $path, string $mode [, string $handler [, mixed $...]] | resource',
\ 'dba_replace(': 'string $key, string $value, resource $handle | bool',
\ 'dba_sync(': 'resource $handle | bool',
\ 'dbase_add_record(': 'int $dbase_identifier, array $record | bool',
\ 'dbase_close(': 'int $dbase_identifier | bool',
\ 'dbase_create(': 'string $filename, array $fields | int',
\ 'dbase_delete_record(': 'int $dbase_identifier, int $record_number | bool',
\ 'dbase_get_header_info(': 'int $dbase_identifier | array',
\ 'dbase_get_record_with_names(': 'int $dbase_identifier, int $record_number | array',
\ 'dbase_get_record(': 'int $dbase_identifier, int $record_number | array',
\ 'dbase_numfields(': 'int $dbase_identifier | int',
\ 'dbase_numrecords(': 'int $dbase_identifier | int',
\ 'dbase_open(': 'string $filename, int $mode | int',
\ 'dbase_pack(': 'int $dbase_identifier | bool',
\ 'dbase_replace_record(': 'int $dbase_identifier, array $record, int $record_number | bool',
\ 'dbplus_add(': 'resource $relation, array $tuple | int',
\ 'dbplus_aql(': 'string $query [, string $server [, string $dbpath]] | resource',
\ 'dbplus_chdir(': '[ string $newdir] | string',
\ 'dbplus_close(': 'resource $relation | mixed',
\ 'dbplus_curr(': 'resource $relation, array &$tuple | int',
\ 'dbplus_errcode(': '[ int $errno] | string',
\ 'dbplus_errno(': 'void | int',
\ 'dbplus_find(': 'resource $relation, array $constraints, mixed $tuple | int',
\ 'dbplus_first(': 'resource $relation, array &$tuple | int',
\ 'dbplus_flush(': 'resource $relation | int',
\ 'dbplus_freealllocks(': 'void | int',
\ 'dbplus_freelock(': 'resource $relation, string $tuple | int',
\ 'dbplus_freerlocks(': 'resource $relation | int',
\ 'dbplus_getlock(': 'resource $relation, string $tuple | int',
\ 'dbplus_getunique(': 'resource $relation, int $uniqueid | int',
\ 'dbplus_info(': 'resource $relation, string $key, array &$result | int',
\ 'dbplus_last(': 'resource $relation, array &$tuple | int',
\ 'dbplus_lockrel(': 'resource $relation | int',
\ 'dbplus_next(': 'resource $relation, array &$tuple | int',
\ 'dbplus_open(': 'string $name | resource',
\ 'dbplus_prev(': 'resource $relation, array &$tuple | int',
\ 'dbplus_rchperm(': 'resource $relation, int $mask, string $user, string $group | int',
\ 'dbplus_rcreate(': 'string $name, mixed $domlist [, bool $overwrite] | resource',
\ 'dbplus_rcrtexact(': 'string $name, resource $relation [, bool $overwrite] | mixed',
\ 'dbplus_rcrtlike(': 'string $name, resource $relation [, int $overwrite] | mixed',
\ 'dbplus_resolve(': 'string $relation_name | array',
\ 'dbplus_restorepos(': 'resource $relation, array $tuple | int',
\ 'dbplus_rkeys(': 'resource $relation, mixed $domlist | mixed',
\ 'dbplus_ropen(': 'string $name | resource',
\ 'dbplus_rquery(': 'string $query [, string $dbpath] | resource',
\ 'dbplus_rrename(': 'resource $relation, string $name | int',
\ 'dbplus_rsecindex(': 'resource $relation, mixed $domlist, int $type | mixed',
\ 'dbplus_runlink(': 'resource $relation | int',
\ 'dbplus_rzap(': 'resource $relation | int',
\ 'dbplus_savepos(': 'resource $relation | int',
\ 'dbplus_setindex(': 'resource $relation, string $idx_name | int',
\ 'dbplus_setindexbynumber(': 'resource $relation, int $idx_number | int',
\ 'dbplus_sql(': 'string $query [, string $server [, string $dbpath]] | resource',
\ 'dbplus_tcl(': 'int $sid, string $script | string',
\ 'dbplus_tremove(': 'resource $relation, array $tuple [, array &$current] | int',
\ 'dbplus_undo(': 'resource $relation | int',
\ 'dbplus_undoprepare(': 'resource $relation | int',
\ 'dbplus_unlockrel(': 'resource $relation | int',
\ 'dbplus_unselect(': 'resource $relation | int',
\ 'dbplus_update(': 'resource $relation, array $old, array $new | int',
\ 'dbplus_xlockrel(': 'resource $relation | int',
\ 'dbplus_xunlockrel(': 'resource $relation | int',
\ 'dbx_close(': 'object $link_identifier | int',
\ 'dbx_compare(': 'array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE] | int',
\ 'dbx_connect(': 'mixed $module, string $host, string $database, string $username, string $password [, int $persistent] | object',
\ 'dbx_error(': 'object $link_identifier | string',
\ 'dbx_escape_string(': 'object $link_identifier, string $text | string',
\ 'dbx_fetch_row(': 'object $result_identifier | mixed',
\ 'dbx_query(': 'object $link_identifier, string $sql_statement [, int $flags] | mixed',
\ 'dbx_sort(': 'object $result, string $user_compare_function | bool',
\ 'dcgettext(': 'string $domain, string $message, int $category | string',
\ 'dcngettext(': 'string $domain, string $msgid1, string $msgid2, int $n, int $category | string',
\ 'deaggregate(': 'object $object [, string $class_name] | void',
\ 'debug_backtrace(': '[ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0]] | array',
\ 'debug_print_backtrace(': '[ int $options = 0 [, int $limit = 0]] | void',
\ 'debug_zval_dump(': 'mixed $variable | void',
\ 'decbin(': 'int $number | string',
\ 'dechex(': 'int $number | string',
\ 'decoct(': 'int $number | string',
\ 'define_syslog_variables(': 'void | void',
\ 'define(': 'string $name, mixed $value [, bool $case_insensitive = false] | bool',
\ 'defined(': 'string $name | bool',
\ 'deg2rad(': 'float $number | float',
\ 'delete(': 'void | void',
\ 'dgettext(': 'string $domain, string $message | string',
\ 'dio_close(': 'resource $fd | void',
\ 'dio_fcntl(': 'resource $fd, int $cmd [, mixed $args] | mixed',
\ 'dio_open(': 'string $filename, int $flags [, int $mode = 0] | resource',
\ 'dio_read(': 'resource $fd [, int $len = 1024] | string',
\ 'dio_seek(': 'resource $fd, int $pos [, int $whence = SEEK_SET] | int',
\ 'dio_stat(': 'resource $fd | array',
\ 'dio_tcsetattr(': 'resource $fd, array $options | bool',
\ 'dio_truncate(': 'resource $fd, int $offset | bool',
\ 'dio_write(': 'resource $fd, string $data [, int $len = 0] | int',
\ 'dir(': 'string $directory [, resource $context] | Directory',
\ 'dirname(': 'string $path | string',
\ 'disk_free_space(': 'string $directory | float',
\ 'disk_total_space(': 'string $directory | float',
\ 'diskfreespace(': 'diskfreespace â€” Alias of disk_free_space()',
\ 'dl(': 'string $library | bool',
\ 'dngettext(': 'string $domain, string $msgid1, string $msgid2, int $n | string',
\ 'dns_get_record(': 'string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl]]] | array',
\ 'dom_import_simplexml(': 'SimpleXMLElement $node | DOMElement',
\ 'dotnet_load(': 'string $assembly_name [, string $datatype_name [, int $codepage]] | int',
\ 'doubleval(': 'doubleval â€” Alias of floatval()',
\ 'each(': 'array &$array | array',
\ 'easter_date(': '[ int $year] | int',
\ 'easter_days(': '[ int $year [, int $method = CAL_EASTER_DEFAULT]] | int',
\ 'echo(': 'string $arg1 [, string $...] | void',
\ 'eio_busy(': 'int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_cancel(': 'resource $req | void',
\ 'eio_chmod(': 'string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_chown(': 'string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_close(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_custom(': 'callable $execute, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_dup2(': 'mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_event_loop(': 'void | bool',
\ 'eio_fallocate(': 'mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fchmod(': 'mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fchown(': 'mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_fdatasync(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fstat(': 'mixed $fd, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_fstatvfs(': 'mixed $fd, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_fsync(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_ftruncate(': 'mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_futime(': 'mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_get_event_stream(': 'void | mixed',
\ 'eio_get_last_error(': 'resource $req | string',
\ 'eio_grp_add(': 'resource $grp, resource $req | void',
\ 'eio_grp_cancel(': 'resource $grp | void',
\ 'eio_grp_limit(': 'resource $grp, int $limit | void',
\ 'eio_grp(': 'callable $callback [, string $data = NULL] | resource',
\ 'eio_init(': 'void | void',
\ 'eio_link(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_lstat(': 'string $path, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_mkdir(': 'string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_mknod(': 'string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_nop(': '[ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_npending(': 'void | int',
\ 'eio_nready(': 'void | int',
\ 'eio_nreqs(': 'void | int',
\ 'eio_nthreads(': 'void | int',
\ 'eio_open(': 'string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_poll(': 'void | int',
\ 'eio_read(': 'mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_readahead(': 'mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_readdir(': 'string $path, int $flags, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_readlink(': 'string $path, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_realpath(': 'string $path, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_rename(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_rmdir(': 'string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_seek(': 'mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sendfile(': 'mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri [, callable $callback [, string $data]]] | resource',
\ 'eio_set_max_idle(': 'int $nthreads | void',
\ 'eio_set_max_parallel(': 'int $nthreads | void',
\ 'eio_set_max_poll_reqs(': 'int $nreqs | void',
\ 'eio_set_max_poll_time(': 'float $nseconds | void',
\ 'eio_set_min_parallel(': 'string $nthreads | void',
\ 'eio_stat(': 'string $path, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_statvfs(': 'string $path, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_symlink(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sync_file_range(': 'mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sync(': '[ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_syncfs(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_truncate(': 'string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_unlink(': 'string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_utime(': 'string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_write(': 'mixed $fd, string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]] | resource',
\ 'empty(': 'mixed $var | bool',
\ 'enchant_broker_describe(': 'resource $broker | array',
\ 'enchant_broker_dict_exists(': 'resource $broker, string $tag | bool',
\ 'enchant_broker_free_dict(': 'resource $dict | bool',
\ 'enchant_broker_free(': 'resource $broker | bool',
\ 'enchant_broker_get_error(': 'resource $broker | string',
\ 'enchant_broker_init(': 'void | resource',
\ 'enchant_broker_list_dicts(': 'resource $broker | mixed',
\ 'enchant_broker_request_dict(': 'resource $broker, string $tag | resource',
\ 'enchant_broker_request_pwl_dict(': 'resource $broker, string $filename | resource',
\ 'enchant_broker_set_ordering(': 'resource $broker, string $tag, string $ordering | bool',
\ 'enchant_dict_add_to_personal(': 'resource $dict, string $word | void',
\ 'enchant_dict_add_to_session(': 'resource $dict, string $word | void',
\ 'enchant_dict_check(': 'resource $dict, string $word | bool',
\ 'enchant_dict_describe(': 'resource $dict | mixed',
\ 'enchant_dict_get_error(': 'resource $dict | string',
\ 'enchant_dict_is_in_session(': 'resource $dict, string $word | bool',
\ 'enchant_dict_quick_check(': 'resource $dict, string $word [, array &$suggestions] | bool',
\ 'enchant_dict_store_replacement(': 'resource $dict, string $mis, string $cor | void',
\ 'enchant_dict_suggest(': 'resource $dict, string $word | array',
\ 'end(': 'array &$array | mixed',
\ 'ereg_replace(': 'string $pattern, string $replacement, string $string | string',
\ 'ereg(': 'string $pattern, string $string [, array &$regs] | int',
\ 'eregi_replace(': 'string $pattern, string $replacement, string $string | string',
\ 'eregi(': 'string $pattern, string $string [, array &$regs] | int',
\ 'error_get_last(': 'void | array',
\ 'error_log(': 'string $message [, int $message_type = 0 [, string $destination [, string $extra_headers]]] | bool',
\ 'error_reporting(': '[ int $level] | int',
\ 'escapeshellarg(': 'string $arg | string',
\ 'escapeshellcmd(': 'string $command | string',
\ 'eval(': 'string $code | mixed',
\ 'event_add(': 'resource $event [, int $timeout = -1] | bool',
\ 'event_base_free(': 'resource $event_base | void',
\ 'event_base_loop(': 'resource $event_base [, int $flags = 0] | int',
\ 'event_base_loopbreak(': 'resource $event_base | bool',
\ 'event_base_loopexit(': 'resource $event_base [, int $timeout = -1] | bool',
\ 'event_base_new(': 'void | resource',
\ 'event_base_priority_init(': 'resource $event_base, int $npriorities | bool',
\ 'event_base_set(': 'resource $event, resource $event_base | bool',
\ 'event_buffer_base_set(': 'resource $bevent, resource $event_base | bool',
\ 'event_buffer_disable(': 'resource $bevent, int $events | bool',
\ 'event_buffer_enable(': 'resource $bevent, int $events | bool',
\ 'event_buffer_fd_set(': 'resource $bevent, resource $fd | void',
\ 'event_buffer_free(': 'resource $bevent | void',
\ 'event_buffer_new(': 'resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg] | resource',
\ 'event_buffer_priority_set(': 'resource $bevent, int $priority | bool',
\ 'event_buffer_read(': 'resource $bevent, int $data_size | string',
\ 'event_buffer_set_callback(': 'resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg] | bool',
\ 'event_buffer_timeout_set(': 'resource $bevent, int $read_timeout, int $write_timeout | void',
\ 'event_buffer_watermark_set(': 'resource $bevent, int $events, int $lowmark, int $highmark | void',
\ 'event_buffer_write(': 'resource $bevent, string $data [, int $data_size = -1] | bool',
\ 'event_del(': 'resource $event | bool',
\ 'event_free(': 'resource $event | void',
\ 'event_new(': 'void | resource',
\ 'event_set(': 'resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg] | bool',
\ 'exec(': 'string $command [, array &$output [, int &$return_var]] | string',
\ 'exif_imagetype(': 'string $filename | int',
\ 'exif_read_data(': 'string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false]]] | array',
\ 'exif_tagname(': 'int $index | string',
\ 'exif_thumbnail(': 'string $filename [, int &$width [, int &$height [, int &$imagetype]]] | string',
\ 'exit(': '[ string $status] | void',
\ 'exp(': 'float $arg | float',
\ 'expect_expectl(': 'resource $expect, array $cases [, array &$match] | int',
\ 'expect_popen(': 'string $command | resource',
\ 'explode(': 'string $delimiter, string $string [, int $limit] | array',
\ 'expm1(': 'float $arg | float',
\ 'extension_loaded(': 'string $name | bool',
\ 'extract(': 'array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL]] | int',
\ 'ezmlm_hash(': 'string $addr | int',
\ 'fam_cancel_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ 'fam_close(': 'resource $fam | void',
\ 'fam_monitor_collection(': 'resource $fam, string $dirname, int $depth, string $mask | resource',
\ 'fam_monitor_directory(': 'resource $fam, string $dirname | resource',
\ 'fam_monitor_file(': 'resource $fam, string $filename | resource',
\ 'fam_next_event(': 'resource $fam | array',
\ 'fam_open(': '[ string $appname] | resource',
\ 'fam_pending(': 'resource $fam | int',
\ 'fam_resume_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ 'fam_suspend_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ 'fbsql_affected_rows(': '[ resource $link_identifier] | int',
\ 'fbsql_autocommit(': 'resource $link_identifier [, bool $OnOff] | bool',
\ 'fbsql_blob_size(': 'string $blob_handle [, resource $link_identifier] | int',
\ 'fbsql_change_user(': 'string $user, string $password [, string $database [, resource $link_identifier]] | bool',
\ 'fbsql_clob_size(': 'string $clob_handle [, resource $link_identifier] | int',
\ 'fbsql_close(': '[ resource $link_identifier] | bool',
\ 'fbsql_commit(': '[ resource $link_identifier] | bool',
\ 'fbsql_connect(': '[ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]] | resource',
\ 'fbsql_create_blob(': 'string $blob_data [, resource $link_identifier] | string',
\ 'fbsql_create_clob(': 'string $clob_data [, resource $link_identifier] | string',
\ 'fbsql_create_db(': 'string $database_name [, resource $link_identifier [, string $database_options]] | bool',
\ 'fbsql_data_seek(': 'resource $result, int $row_number | bool',
\ 'fbsql_database_password(': 'resource $link_identifier [, string $database_password] | string',
\ 'fbsql_database(': 'resource $link_identifier [, string $database] | string',
\ 'fbsql_db_query(': 'string $database, string $query [, resource $link_identifier] | resource',
\ 'fbsql_db_status(': 'string $database_name [, resource $link_identifier] | int',
\ 'fbsql_drop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'fbsql_errno(': '[ resource $link_identifier] | int',
\ 'fbsql_error(': '[ resource $link_identifier] | string',
\ 'fbsql_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'fbsql_fetch_assoc(': 'resource $result | array',
\ 'fbsql_fetch_field(': 'resource $result [, int $field_offset] | object',
\ 'fbsql_fetch_lengths(': 'resource $result | array',
\ 'fbsql_fetch_object(': 'resource $result | object',
\ 'fbsql_fetch_row(': 'resource $result | array',
\ 'fbsql_field_flags(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_field_len(': 'resource $result [, int $field_offset] | int',
\ 'fbsql_field_name(': 'resource $result [, int $field_index] | string',
\ 'fbsql_field_seek(': 'resource $result [, int $field_offset] | bool',
\ 'fbsql_field_table(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_field_type(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_free_result(': 'resource $result | bool',
\ 'fbsql_get_autostart_info(': '[ resource $link_identifier] | array',
\ 'fbsql_hostname(': 'resource $link_identifier [, string $host_name] | string',
\ 'fbsql_insert_id(': '[ resource $link_identifier] | int',
\ 'fbsql_list_dbs(': '[ resource $link_identifier] | resource',
\ 'fbsql_list_fields(': 'string $database_name, string $table_name [, resource $link_identifier] | resource',
\ 'fbsql_list_tables(': 'string $database [, resource $link_identifier] | resource',
\ 'fbsql_next_result(': 'resource $result | bool',
\ 'fbsql_num_fields(': 'resource $result | int',
\ 'fbsql_num_rows(': 'resource $result | int',
\ 'fbsql_password(': 'resource $link_identifier [, string $password] | string',
\ 'fbsql_pconnect(': '[ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]] | resource',
\ 'fbsql_query(': 'string $query [, resource $link_identifier [, int $batch_size]] | resource',
\ 'fbsql_read_blob(': 'string $blob_handle [, resource $link_identifier] | string',
\ 'fbsql_read_clob(': 'string $clob_handle [, resource $link_identifier] | string',
\ 'fbsql_result(': 'resource $result [, int $row [, mixed $field]] | mixed',
\ 'fbsql_rollback(': '[ resource $link_identifier] | bool',
\ 'fbsql_rows_fetched(': 'resource $result | int',
\ 'fbsql_select_db(': '[ string $database_name [, resource $link_identifier]] | bool',
\ 'fbsql_set_characterset(': 'resource $link_identifier, int $characterset [, int $in_out_both] | void',
\ 'fbsql_set_lob_mode(': 'resource $result, int $lob_mode | bool',
\ 'fbsql_set_password(': 'resource $link_identifier, string $user, string $password, string $old_password | bool',
\ 'fbsql_set_transaction(': 'resource $link_identifier, int $locking, int $isolation | void',
\ 'fbsql_start_db(': 'string $database_name [, resource $link_identifier [, string $database_options]] | bool',
\ 'fbsql_stop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'fbsql_table_name(': 'resource $result, int $index | string',
\ 'fbsql_username(': 'resource $link_identifier [, string $username] | string',
\ 'fbsql_warnings(': '[ bool $OnOff] | bool',
\ 'fclose(': 'resource $handle | bool',
\ 'fdf_add_doc_javascript(': 'resource $fdf_document, string $script_name, string $script_code | bool',
\ 'fdf_add_template(': 'resource $fdf_document, int $newpage, string $filename, string $template, int $rename | bool',
\ 'fdf_close(': 'resource $fdf_document | void',
\ 'fdf_create(': 'void | resource',
\ 'fdf_enum_values(': 'resource $fdf_document, callable $function [, mixed $userdata] | bool',
\ 'fdf_errno(': 'void | int',
\ 'fdf_error(': '[ int $error_code = -1] | string',
\ 'fdf_get_ap(': 'resource $fdf_document, string $field, int $face, string $filename | bool',
\ 'fdf_get_attachment(': 'resource $fdf_document, string $fieldname, string $savepath | array',
\ 'fdf_get_encoding(': 'resource $fdf_document | string',
\ 'fdf_get_file(': 'resource $fdf_document | string',
\ 'fdf_get_flags(': 'resource $fdf_document, string $fieldname, int $whichflags | int',
\ 'fdf_get_opt(': 'resource $fdf_document, string $fieldname [, int $element = -1] | mixed',
\ 'fdf_get_status(': 'resource $fdf_document | string',
\ 'fdf_get_value(': 'resource $fdf_document, string $fieldname [, int $which = -1] | mixed',
\ 'fdf_get_version(': '[ resource $fdf_document] | string',
\ 'fdf_header(': 'void | void',
\ 'fdf_next_field_name(': 'resource $fdf_document [, string $fieldname] | string',
\ 'fdf_open_string(': 'string $fdf_data | resource',
\ 'fdf_open(': 'string $filename | resource',
\ 'fdf_remove_item(': 'resource $fdf_document, string $fieldname, int $item | bool',
\ 'fdf_save_string(': 'resource $fdf_document | string',
\ 'fdf_save(': 'resource $fdf_document [, string $filename] | bool',
\ 'fdf_set_ap(': 'resource $fdf_document, string $field_name, int $face, string $filename, int $page_number | bool',
\ 'fdf_set_encoding(': 'resource $fdf_document, string $encoding | bool',
\ 'fdf_set_file(': 'resource $fdf_document, string $url [, string $target_frame] | bool',
\ 'fdf_set_flags(': 'resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags | bool',
\ 'fdf_set_javascript_action(': 'resource $fdf_document, string $fieldname, int $trigger, string $script | bool',
\ 'fdf_set_on_import_javascript(': 'resource $fdf_document, string $script, bool $before_data_import | bool',
\ 'fdf_set_opt(': 'resource $fdf_document, string $fieldname, int $element, string $str1, string $str2 | bool',
\ 'fdf_set_status(': 'resource $fdf_document, string $status | bool',
\ 'fdf_set_submit_form_action(': 'resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags | bool',
\ 'fdf_set_target_frame(': 'resource $fdf_document, string $frame_name | bool',
\ 'fdf_set_value(': 'resource $fdf_document, string $fieldname, mixed $value [, int $isName] | bool',
\ 'fdf_set_version(': 'resource $fdf_document, string $version | bool',
\ 'feof(': 'resource $handle | bool',
\ 'fflush(': 'resource $handle | bool',
\ 'fgetc(': 'resource $handle | string',
\ 'fgetcsv(': 'resource $handle [, int $length = 0 [, string $delimiter = '','' [, string $enclosure = ''"'' [, string $escape = ''\\'']]]] | array',
\ 'fgets(': 'resource $handle [, int $length] | string',
\ 'fgetss(': 'resource $handle [, int $length [, string $allowable_tags]] | string',
\ 'file_exists(': 'string $filename | bool',
\ 'file_get_contents(': 'string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen]]]] | string',
\ 'file_put_contents(': 'string $filename, mixed $data [, int $flags = 0 [, resource $context]] | int',
\ 'file(': 'string $filename [, int $flags = 0 [, resource $context]] | array',
\ 'fileatime(': 'string $filename | int',
\ 'filectime(': 'string $filename | int',
\ 'filegroup(': 'string $filename | int',
\ 'fileinode(': 'string $filename | int',
\ 'filemtime(': 'string $filename | int',
\ 'fileowner(': 'string $filename | int',
\ 'fileperms(': 'string $filename | int',
\ 'filepro_fieldcount(': 'void | int',
\ 'filepro_fieldname(': 'int $field_number | string',
\ 'filepro_fieldtype(': 'int $field_number | string',
\ 'filepro_fieldwidth(': 'int $field_number | int',
\ 'filepro_retrieve(': 'int $row_number, int $field_number | string',
\ 'filepro_rowcount(': 'void | int',
\ 'filepro(': 'string $directory | bool',
\ 'filesize(': 'string $filename | int',
\ 'filetype(': 'string $filename | string',
\ 'filter_has_var(': 'int $type, string $variable_name | bool',
\ 'filter_id(': 'string $filtername | int',
\ 'filter_input_array(': 'int $type [, mixed $definition] | mixed',
\ 'filter_input(': 'int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options]] | mixed',
\ 'filter_list(': 'void | array',
\ 'filter_var_array(': 'array $data [, mixed $definition] | mixed',
\ 'filter_var(': 'mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options]] | mixed',
\ 'finfo_buffer(': 'resource $finfo [, string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]] | string',
\ 'finfo_close(': 'resource $finfo | bool',
\ 'finfo_file(': 'resource $finfo [, string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]] | string',
\ 'finfo_open(': '[ int $options = FILEINFO_NONE [, string $magic_file = NULL]] | resource',
\ 'finfo_set_flags(': 'resource $finfo, int $options | bool',
\ 'floatval(': 'mixed $var | float',
\ 'flock(': 'resource $handle, int $operation [, int &$wouldblock] | bool',
\ 'floor(': 'float $value | float',
\ 'flush(': 'void | void',
\ 'fmod(': 'float $x, float $y | float',
\ 'fnmatch(': 'string $pattern, string $string [, int $flags = 0] | bool',
\ 'fopen(': 'string $filename, string $mode [, bool $use_include_path = false [, resource $context]] | resource',
\ 'forward_static_call_array(': 'callable $function, array $parameters | mixed',
\ 'forward_static_call(': 'callable $function [, mixed $parameter [, mixed $...]] | mixed',
\ 'fpassthru(': 'resource $handle | int',
\ 'fprintf(': 'resource $handle, string $format [, mixed $args [, mixed $...]] | int',
\ 'fputcsv(': 'resource $handle, array $fields [, string $delimiter = '','' [, string $enclosure = ''"'']] | int',
\ 'fputs(': 'fputs â€” Alias of fwrite()',
\ 'fread(': 'resource $handle, int $length | string',
\ 'frenchtojd(': 'int $month, int $day, int $year | int',
\ 'fribidi_log2vis(': 'string $str, string $direction, int $charset | string',
\ 'fscanf(': 'resource $handle, string $format [, mixed &$...] | mixed',
\ 'fseek(': 'resource $handle, int $offset [, int $whence = SEEK_SET] | int',
\ 'fsockopen(': 'string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]] | resource',
\ 'fstat(': 'resource $handle | array',
\ 'ftell(': 'resource $handle | int',
\ 'ftok(': 'string $pathname, string $proj | int',
\ 'ftp_alloc(': 'resource $ftp_stream, int $filesize [, string &$result] | bool',
\ 'ftp_cdup(': 'resource $ftp_stream | bool',
\ 'ftp_chdir(': 'resource $ftp_stream, string $directory | bool',
\ 'ftp_chmod(': 'resource $ftp_stream, int $mode, string $filename | int',
\ 'ftp_close(': 'resource $ftp_stream | bool',
\ 'ftp_connect(': 'string $host [, int $port = 21 [, int $timeout = 90]] | resource',
\ 'ftp_delete(': 'resource $ftp_stream, string $path | bool',
\ 'ftp_exec(': 'resource $ftp_stream, string $command | bool',
\ 'ftp_fget(': 'resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0] | bool',
\ 'ftp_fput(': 'resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0] | bool',
\ 'ftp_get_option(': 'resource $ftp_stream, int $option | mixed',
\ 'ftp_get(': 'resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0] | bool',
\ 'ftp_login(': 'resource $ftp_stream, string $username, string $password | bool',
\ 'ftp_mdtm(': 'resource $ftp_stream, string $remote_file | int',
\ 'ftp_mkdir(': 'resource $ftp_stream, string $directory | string',
\ 'ftp_nb_continue(': 'resource $ftp_stream | int',
\ 'ftp_nb_fget(': 'resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0] | int',
\ 'ftp_nb_fput(': 'resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0] | int',
\ 'ftp_nb_get(': 'resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0] | int',
\ 'ftp_nb_put(': 'resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0] | int',
\ 'ftp_nlist(': 'resource $ftp_stream, string $directory | array',
\ 'ftp_pasv(': 'resource $ftp_stream, bool $pasv | bool',
\ 'ftp_put(': 'resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0] | bool',
\ 'ftp_pwd(': 'resource $ftp_stream | string',
\ 'ftp_quit(': 'ftp_quit â€” Alias of ftp_close()',
\ 'ftp_raw(': 'resource $ftp_stream, string $command | array',
\ 'ftp_rawlist(': 'resource $ftp_stream, string $directory [, bool $recursive = false] | array',
\ 'ftp_rename(': 'resource $ftp_stream, string $oldname, string $newname | bool',
\ 'ftp_rmdir(': 'resource $ftp_stream, string $directory | bool',
\ 'ftp_set_option(': 'resource $ftp_stream, int $option, mixed $value | bool',
\ 'ftp_site(': 'resource $ftp_stream, string $command | bool',
\ 'ftp_size(': 'resource $ftp_stream, string $remote_file | int',
\ 'ftp_ssl_connect(': 'string $host [, int $port = 21 [, int $timeout = 90]] | resource',
\ 'ftp_systype(': 'resource $ftp_stream | string',
\ 'ftruncate(': 'resource $handle, int $size | bool',
\ 'func_get_arg(': 'int $arg_num | mixed',
\ 'func_get_args(': 'void | array',
\ 'GearmanWorker::setId(': 'string $id | bool',
\ 'func_num_args(': 'void | int',
\ 'function_exists(': 'string $function_name | bool',
\ 'fwrite(': 'resource $handle, string $string [, int $length] | int',
\ 'gc_collect_cycles(': 'void | int',
\ 'gc_disable(': 'void | void',
\ 'gc_enable(': 'void | void',
\ 'gc_enabled(': 'void | bool',
\ 'gd_info(': 'void | array',
\ 'geoip_continent_code_by_name(': 'string $hostname | string',
\ 'geoip_country_code_by_name(': 'string $hostname | string',
\ 'geoip_country_code3_by_name(': 'string $hostname | string',
\ 'geoip_country_name_by_name(': 'string $hostname | string',
\ 'geoip_database_info(': '[ int $database = GEOIP_COUNTRY_EDITION] | string',
\ 'geoip_db_avail(': 'int $database | bool',
\ 'geoip_db_filename(': 'int $database | string',
\ 'geoip_db_get_all_info(': 'void | array',
\ 'geoip_id_by_name(': 'string $hostname | int',
\ 'geoip_isp_by_name(': 'string $hostname | string',
\ 'geoip_org_by_name(': 'string $hostname | string',
\ 'geoip_record_by_name(': 'string $hostname | array',
\ 'geoip_region_by_name(': 'string $hostname | array',
\ 'geoip_region_name_by_code(': 'string $country_code, string $region_code | string',
\ 'geoip_time_zone_by_country_and_region(': 'string $country_code [, string $region_code] | string',
\ 'get_browser(': '[ string $user_agent [, bool $return_array = false]] | mixed',
\ 'get_called_class(': 'void | string',
\ 'get_cfg_var(': 'string $option | string',
\ 'get_class_methods(': 'mixed $class_name | array',
\ 'get_class_vars(': 'string $class_name | array',
\ 'get_class(': '[ object $object = NULL] | string',
\ 'get_current_user(': 'void | string',
\ 'get_declared_classes(': 'void | array',
\ 'get_declared_interfaces(': 'void | array',
\ 'get_declared_traits(': 'void | array',
\ 'get_defined_constants(': '[ bool $categorize = false] | array',
\ 'get_defined_functions(': 'void | array',
\ 'get_defined_vars(': 'void | array',
\ 'get_extension_funcs(': 'string $module_name | array',
\ 'get_headers(': 'string $url [, int $format = 0] | array',
\ 'get_html_translation_table(': '[ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'']]] | array',
\ 'get_include_path(': 'void | string',
\ 'get_included_files(': 'void | array',
\ 'get_loaded_extensions(': '[ bool $zend_extensions = false] | array',
\ 'get_magic_quotes_gpc(': 'void | bool',
\ 'get_magic_quotes_runtime(': 'void | bool',
\ 'get_meta_tags(': 'string $filename [, bool $use_include_path = false] | array',
\ 'get_object_vars(': 'object $object | array',
\ 'get_parent_class(': '[ mixed $object] | string',
\ 'get_required_files(': 'get_required_files â€” Alias of get_included_files()',
\ 'get_resource_type(': 'resource $handle | string',
\ 'getallheaders(': 'void | array',
\ 'getcwd(': 'void | string',
\ 'getdate(': '[ int $timestamp = time()] | array',
\ 'getenv(': 'string $varname | string',
\ 'gethostbyaddr(': 'string $ip_address | string',
\ 'gethostbyname(': 'string $hostname | string',
\ 'gethostbynamel(': 'string $hostname | array',
\ 'gethostname(': 'void | string',
\ 'getimagesize(': 'string $filename [, array &$imageinfo] | array',
\ 'getimagesizefromstring(': 'string $imagedata [, array &$imageinfo] | array',
\ 'getlastmod(': 'void | int',
\ 'getmxrr(': 'string $hostname, array &$mxhosts [, array &$weight] | bool',
\ 'getmygid(': 'void | int',
\ 'getmyinode(': 'void | int',
\ 'getmypid(': 'void | int',
\ 'getmyuid(': 'void | int',
\ 'getopt(': 'string $options [, array $longopts] | array',
\ 'getprotobyname(': 'string $name | int',
\ 'getprotobynumber(': 'int $number | string',
\ 'getrandmax(': 'void | int',
\ 'getrusage(': '[ int $who = 0] | array',
\ 'getservbyname(': 'string $service, string $protocol | int',
\ 'getservbyport(': 'int $port, string $protocol | string',
\ 'gettext(': 'string $message | string',
\ 'gettimeofday(': '[ bool $return_float = false] | mixed',
\ 'gettype(': 'mixed $var | string',
\ 'glob(': 'string $pattern [, int $flags = 0] | array',
\ 'gmdate(': 'string $format [, int $timestamp = time()] | string',
\ 'gmmktime(': '[ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1]]]]]]] | int',
\ 'gmp_abs(': 'resource $a | resource',
\ 'gmp_add(': 'resource $a, resource $b | resource',
\ 'gmp_and(': 'resource $a, resource $b | resource',
\ 'gmp_clrbit(': 'resource $a, int $index | void',
\ 'gmp_cmp(': 'resource $a, resource $b | int',
\ 'gmp_com(': 'resource $a | resource',
\ 'gmp_div_q(': 'resource $a, resource $b [, int $round = GMP_ROUND_ZERO] | resource',
\ 'gmp_div_qr(': 'resource $n, resource $d [, int $round = GMP_ROUND_ZERO] | array',
\ 'gmp_div_r(': 'resource $n, resource $d [, int $round = GMP_ROUND_ZERO] | resource',
\ 'gmp_div(': 'gmp_div â€” Alias of gmp_div_q()',
\ 'gmp_divexact(': 'resource $n, resource $d | resource',
\ 'gmp_fact(': 'mixed $a | resource',
\ 'gmp_gcd(': 'resource $a, resource $b | resource',
\ 'gmp_gcdext(': 'resource $a, resource $b | array',
\ 'gmp_hamdist(': 'resource $a, resource $b | int',
\ 'gmp_init(': 'mixed $number [, int $base = 0] | resource',
\ 'gmp_intval(': 'resource $gmpnumber | int',
\ 'gmp_invert(': 'resource $a, resource $b | resource',
\ 'gmp_jacobi(': 'resource $a, resource $p | int',
\ 'gmp_legendre(': 'resource $a, resource $p | int',
\ 'gmp_mod(': 'resource $n, resource $d | resource',
\ 'gmp_mul(': 'resource $a, resource $b | resource',
\ 'gmp_neg(': 'resource $a | resource',
\ 'gmp_nextprime(': 'int $a | resource',
\ 'gmp_or(': 'resource $a, resource $b | resource',
\ 'gmp_perfect_square(': 'resource $a | bool',
\ 'gmp_popcount(': 'resource $a | int',
\ 'gmp_pow(': 'resource $base, int $exp | resource',
\ 'gmp_powm(': 'resource $base, resource $exp, resource $mod | resource',
\ 'gmp_prob_prime(': 'resource $a [, int $reps = 10] | int',
\ 'gmp_random(': '[ int $limiter = 20] | resource',
\ 'gmp_scan0(': 'resource $a, int $start | int',
\ 'gmp_scan1(': 'resource $a, int $start | int',
\ 'gmp_setbit(': 'resource $a, int $index [, bool $set_clear = true] | void',
\ 'gmp_sign(': 'resource $a | int',
\ 'gmp_sqrt(': 'resource $a | resource',
\ 'gmp_sqrtrem(': 'resource $a | array',
\ 'gmp_strval(': 'resource $gmpnumber [, int $base = 10] | string',
\ 'gmp_sub(': 'resource $a, resource $b | resource',
\ 'gmp_testbit(': 'resource $a, int $index | bool',
\ 'gmp_xor(': 'resource $a, resource $b | resource',
\ 'gmstrftime(': 'string $format [, int $timestamp = time()] | string',
\ 'gnupg_adddecryptkey(': 'resource $identifier, string $fingerprint, string $passphrase | bool',
\ 'gnupg_addencryptkey(': 'resource $identifier, string $fingerprint | bool',
\ 'gnupg_addsignkey(': 'resource $identifier, string $fingerprint [, string $passphrase] | bool',
\ 'gnupg_cleardecryptkeys(': 'resource $identifier | bool',
\ 'gnupg_clearencryptkeys(': 'resource $identifier | bool',
\ 'gnupg_clearsignkeys(': 'resource $identifier | bool',
\ 'gnupg_decrypt(': 'resource $identifier, string $text | string',
\ 'gnupg_decryptverify(': 'resource $identifier, string $text, string &$plaintext | array',
\ 'gnupg_encrypt(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_encryptsign(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_export(': 'resource $identifier, string $fingerprint | string',
\ 'gnupg_geterror(': 'resource $identifier | string',
\ 'gnupg_getprotocol(': 'resource $identifier | int',
\ 'gnupg_import(': 'resource $identifier, string $keydata | array',
\ 'gnupg_init(': 'void | resource',
\ 'gnupg_keyinfo(': 'resource $identifier, string $pattern | array',
\ 'gnupg_setarmor(': 'resource $identifier, int $armor | bool',
\ 'gnupg_seterrormode(': 'resource $identifier, int $errormode | void',
\ 'gnupg_setsignmode(': 'resource $identifier, int $signmode | bool',
\ 'gnupg_sign(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_verify(': 'resource $identifier, string $signed_text, string $signature [, string &$plaintext] | array',
\ 'gopher_parsedir(': 'string $dirent | array',
\ 'grapheme_extract(': 'string $haystack, int $size [, int $extract_type [, int $start = 0 [, int &$next]]] | string',
\ 'grapheme_stripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_stristr(': 'string $haystack, string $needle [, bool $before_needle = false] | string',
\ 'grapheme_strlen(': 'string $input | int',
\ 'grapheme_strpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strrpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strstr(': 'string $haystack, string $needle [, bool $before_needle = false] | string',
\ 'grapheme_substr(': 'string $string, int $start [, int $length] | int',
\ 'gregoriantojd(': 'int $month, int $day, int $year | int',
\ 'gupnp_context_get_host_ip(': 'resource $context | string',
\ 'gupnp_context_get_port(': 'resource $context | int',
\ 'gupnp_context_get_subscription_timeout(': 'resource $context | int',
\ 'gupnp_context_host_path(': 'resource $context, string $local_path, string $server_path | bool',
\ 'gupnp_context_new(': '[ string $host_ip [, int $port = 0]] | resource',
\ 'gupnp_context_set_subscription_timeout(': 'resource $context, int $timeout | void',
\ 'gupnp_context_timeout_add(': 'resource $context, int $timeout, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_context_unhost_path(': 'resource $context, string $server_path | bool',
\ 'gupnp_control_point_browse_start(': 'resource $cpoint | bool',
\ 'gupnp_control_point_browse_stop(': 'resource $cpoint | bool',
\ 'gupnp_control_point_callback_set(': 'resource $cpoint, int $signal, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_control_point_new(': 'resource $context, string $target | resource',
\ 'gupnp_device_action_callback_set(': 'resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_device_info_get_service(': 'resource $root_device, string $type | resource',
\ 'gupnp_device_info_get(': 'resource $root_device | array',
\ 'gupnp_root_device_get_available(': 'resource $root_device | bool',
\ 'gupnp_root_device_get_relative_location(': 'resource $root_device | string',
\ 'gupnp_root_device_new(': 'resource $context, string $location, string $description_dir | resource',
\ 'gupnp_root_device_set_available(': 'resource $root_device, bool $available | bool',
\ 'gupnp_root_device_start(': 'resource $root_device | bool',
\ 'gupnp_root_device_stop(': 'resource $root_device | bool',
\ 'gupnp_service_action_get(': 'resource $action, string $name, int $type | mixed',
\ 'gupnp_service_action_return_error(': 'resource $action, int $error_code [, string $error_description] | bool',
\ 'gupnp_service_action_return(': 'resource $action | bool',
\ 'gupnp_service_action_set(': 'resource $action, string $name, int $type, mixed $value | bool',
\ 'gupnp_service_freeze_notify(': 'resource $service | bool',
\ 'gupnp_service_info_get_introspection(': 'resource $proxy [, mixed $callback [, mixed $arg]] | mixed',
\ 'gupnp_service_info_get(': 'resource $proxy | array',
\ 'gupnp_service_introspection_get_state_variable(': 'resource $introspection, string $variable_name | array',
\ 'gupnp_service_notify(': 'resource $service, string $name, int $type, mixed $value | bool',
\ 'gupnp_service_proxy_action_get(': 'resource $proxy, string $action, string $name, int $type | mixed',
\ 'gupnp_service_proxy_action_set(': 'resource $proxy, string $action, string $name, mixed $value, int $type | bool',
\ 'gupnp_service_proxy_add_notify(': 'resource $proxy, string $value, int $type, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_service_proxy_callback_set(': 'resource $proxy, int $signal, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_service_proxy_get_subscribed(': 'resource $proxy | bool',
\ 'gupnp_service_proxy_remove_notify(': 'resource $proxy, string $value | bool',
\ 'gupnp_service_proxy_set_subscribed(': 'resource $proxy, bool $subscribed | bool',
\ 'gupnp_service_thaw_notify(': 'resource $service | bool',
\ 'gzclose(': 'resource $zp | bool',
\ 'gzcompress(': 'string $data [, int $level = -1] | string',
\ 'gzdecode(': 'string $data [, int $length] | string',
\ 'gzdeflate(': 'string $data [, int $level = -1] | string',
\ 'gzencode(': 'string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP]] | string',
\ 'gzeof(': 'resource $zp | int',
\ 'gzfile(': 'string $filename [, int $use_include_path = 0] | array',
\ 'gzgetc(': 'resource $zp | string',
\ 'gzgets(': 'resource $zp, int $length | string',
\ 'gzgetss(': 'resource $zp, int $length [, string $allowable_tags] | string',
\ 'gzinflate(': 'string $data [, int $length = 0] | string',
\ 'gzopen(': 'string $filename, string $mode [, int $use_include_path = 0] | resource',
\ 'gzpassthru(': 'resource $zp | int',
\ 'gzputs(': 'gzputs â€” Alias of gzwrite()',
\ 'gzread(': 'resource $zp, int $length | string',
\ 'gzrewind(': 'resource $zp | bool',
\ 'gzseek(': 'resource $zp, int $offset [, int $whence = SEEK_SET] | int',
\ 'gztell(': 'resource $zp | int',
\ 'gzuncompress(': 'string $data [, int $length = 0] | string',
\ 'gzwrite(': 'resource $zp, string $string [, int $length] | int',
\ '__halt_compiler(': 'void | void',
\ 'hash_algos(': 'void | array',
\ 'hash_copy(': 'resource $context | resource',
\ 'hash_file(': 'string $algo, string $filename [, bool $raw_output = false] | string',
\ 'hash_final(': 'resource $context [, bool $raw_output = false] | string',
\ 'hash_hmac_file(': 'string $algo, string $filename, string $key [, bool $raw_output = false] | string',
\ 'hash_hmac(': 'string $algo, string $data, string $key [, bool $raw_output = false] | string',
\ 'hash_init(': 'string $algo [, int $options = 0 [, string $key = NULL]] | resource',
\ 'hash_pbkdf2(': 'string $algo, string $password, string $salt, int $iterations [, int $length = 0 [, bool $raw_output = false]] | string',
\ 'hash_update_file(': 'resource $context, string $filename [, resource $context = NULL] | bool',
\ 'hash_update_stream(': 'resource $context, resource $handle [, int $length = -1] | int',
\ 'hash_update(': 'resource $context, string $data | bool',
\ 'hash(': 'string $algo, string $data [, bool $raw_output = false] | string',
\ 'header_register_callback(': 'callable $callback | bool',
\ 'header_remove(': '[ string $name] | void',
\ 'header(': 'string $string [, bool $replace = true [, int $http_response_code]] | void',
\ 'headers_list(': 'void | array',
\ 'headers_sent(': '[ string &$file [, int &$line]] | bool',
\ 'hebrev(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hebrevc(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hex2bin(': 'string $data | string',
\ 'hexdec(': 'string $hex_string | number',
\ 'highlight_file(': 'string $filename [, bool $return = false] | mixed',
\ 'highlight_string(': 'string $str [, bool $return = false] | mixed',
\ 'html_entity_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'']] | string',
\ 'htmlentities(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'' [, bool $double_encode = true]]] | string',
\ 'htmlspecialchars_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401] | string',
\ 'htmlspecialchars(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'' [, bool $double_encode = true]]] | string',
\ 'http_build_cookie(': 'array $cookie | string',
\ 'http_build_query(': 'mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738]]] | string',
\ 'http_build_str(': 'array $query [, string $prefix [, string $arg_separator = ini_get("arg_separator.output")]] | string',
\ 'http_build_url(': '[ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url]]]] | string',
\ 'http_cache_etag(': '[ string $etag] | bool',
\ 'http_cache_last_modified(': '[ int $timestamp_or_expires] | bool',
\ 'http_chunked_decode(': 'string $encoded | string',
\ 'http_date(': '[ int $timestamp] | string',
\ 'http_deflate(': 'string $data [, int $flags = 0] | string',
\ 'http_get_request_body_stream(': 'void | resource',
\ 'http_get_request_body(': 'void | string',
\ 'http_get_request_headers(': 'void | array',
\ 'http_get(': 'string $url [, array $options [, array &$info]] | string',
\ 'http_head(': 'string $url [, array $options [, array &$info]] | string',
\ 'http_inflate(': 'string $data | string',
\ 'http_match_etag(': 'string $etag [, bool $for_range = false] | bool',
\ 'http_match_modified(': '[ int $timestamp = -1 [, bool $for_range = false]] | bool',
\ 'http_match_request_header(': 'string $header, string $value [, bool $match_case = false] | bool',
\ 'http_negotiate_charset(': 'array $supported [, array &$result] | string',
\ 'http_negotiate_content_type(': 'array $supported [, array &$result] | string',
\ 'http_negotiate_language(': 'array $supported [, array &$result] | string',
\ 'http_parse_cookie(': 'string $cookie [, int $flags [, array $allowed_extras]] | object',
\ 'http_parse_headers(': 'string $header | array',
\ 'http_parse_message(': 'string $message | object',
\ 'http_parse_params(': 'string $param [, int $flags = HTTP_PARAMS_DEFAULT] | object',
\ 'http_persistent_handles_clean(': '[ string $ident] | string',
\ 'http_persistent_handles_count(': 'void | object',
\ 'http_persistent_handles_ident(': '[ string $ident] | string',
\ 'http_post_data(': 'string $url, string $data [, array $options [, array &$info]] | string',
\ 'http_post_fields(': 'string $url, array $data [, array $files [, array $options [, array &$info]]] | string',
\ 'http_put_data(': 'string $url, string $data [, array $options [, array &$info]] | string',
\ 'http_put_file(': 'string $url, string $file [, array $options [, array &$info]] | string',
\ 'http_put_stream(': 'string $url, resource $stream [, array $options [, array &$info]] | string',
\ 'http_redirect(': '[ string $url [, array $params [, bool $session = false [, int $status = 0]]]] | bool',
\ 'http_request_body_encode(': 'array $fields, array $files | string',
\ 'http_request_method_exists(': 'mixed $method | int',
\ 'http_request_method_name(': 'int $method | string',
\ 'http_request_method_register(': 'string $method | int',
\ 'http_request_method_unregister(': 'mixed $method | bool',
\ 'http_request(': 'int $method, string $url [, string $body [, array $options [, array &$info]]] | string',
\ 'http_response_code(': '[ int $response_code] | int',
\ 'http_send_content_disposition(': 'string $filename [, bool $inline = false] | bool',
\ 'http_send_content_type(': '[ string $content_type = "application/x-octetstream"] | bool',
\ 'http_send_data(': 'string $data | bool',
\ 'http_send_file(': 'string $file | bool',
\ 'http_send_last_modified(': '[ int $timestamp = time()] | bool',
\ 'http_send_status(': 'int $status | bool',
\ 'http_send_stream(': 'resource $stream | bool',
\ 'http_support(': '[ int $feature = 0] | int',
\ 'http_throttle(': 'float $sec [, int $bytes = 40960] | void',
\ 'hw_array2objrec(': 'array $object_array | string',
\ 'hw_changeobject(': 'int $link, int $objid, array $attributes | bool',
\ 'hw_children(': 'int $connection, int $objectID | array',
\ 'hw_childrenobj(': 'int $connection, int $objectID | array',
\ 'hw_close(': 'int $connection | bool',
\ 'hw_connect(': 'string $host, int $port [, string $username [, string $password]] | int',
\ 'hw_connection_info(': 'int $link | void',
\ 'hw_cp(': 'int $connection, array $object_id_array, int $destination_id | int',
\ 'hw_deleteobject(': 'int $connection, int $object_to_delete | bool',
\ 'hw_docbyanchor(': 'int $connection, int $anchorID | int',
\ 'hw_docbyanchorobj(': 'int $connection, int $anchorID | string',
\ 'hw_document_attributes(': 'int $hw_document | string',
\ 'hw_document_bodytag(': 'int $hw_document [, string $prefix] | string',
\ 'hw_document_content(': 'int $hw_document | string',
\ 'hw_document_setcontent(': 'int $hw_document, string $content | bool',
\ 'hw_document_size(': 'int $hw_document | int',
\ 'hw_dummy(': 'int $link, int $id, int $msgid | string',
\ 'hw_edittext(': 'int $connection, int $hw_document | bool',
\ 'hw_error(': 'int $connection | int',
\ 'hw_errormsg(': 'int $connection | string',
\ 'hw_free_document(': 'int $hw_document | bool',
\ 'hw_getanchors(': 'int $connection, int $objectID | array',
\ 'hw_getanchorsobj(': 'int $connection, int $objectID | array',
\ 'hw_getandlock(': 'int $connection, int $objectID | string',
\ 'hw_getchildcoll(': 'int $connection, int $objectID | array',
\ 'hw_getchildcollobj(': 'int $connection, int $objectID | array',
\ 'hw_getchilddoccoll(': 'int $connection, int $objectID | array',
\ 'hw_getchilddoccollobj(': 'int $connection, int $objectID | array',
\ 'hw_getobject(': 'int $connection, mixed $objectID [, string $query] | mixed',
\ 'hw_getobjectbyquery(': 'int $connection, string $query, int $max_hits | array',
\ 'hw_getobjectbyquerycoll(': 'int $connection, int $objectID, string $query, int $max_hits | array',
\ 'hw_getobjectbyquerycollobj(': 'int $connection, int $objectID, string $query, int $max_hits | array',
\ 'hw_getobjectbyqueryobj(': 'int $connection, string $query, int $max_hits | array',
\ 'hw_getparents(': 'int $connection, int $objectID | array',
\ 'hw_getparentsobj(': 'int $connection, int $objectID | array',
\ 'hw_getrellink(': 'int $link, int $rootid, int $sourceid, int $destid | string',
\ 'hw_getremote(': 'int $connection, int $objectID | int',
\ 'hw_getremotechildren(': 'int $connection, string $object_record | mixed',
\ 'hw_getsrcbydestobj(': 'int $connection, int $objectID | array',
\ 'hw_gettext(': 'int $connection, int $objectID [, mixed $rootID/prefix] | int',
\ 'hw_getusername(': 'int $connection | string',
\ 'hw_identify(': 'int $link, string $username, string $password | string',
\ 'hw_incollections(': 'int $connection, array $object_id_array, array $collection_id_array, int $return_collections | array',
\ 'hw_info(': 'int $connection | string',
\ 'hw_inscoll(': 'int $connection, int $objectID, array $object_array | int',
\ 'hw_insdoc(': 'resource $connection, int $parentID, string $object_record [, string $text] | int',
\ 'hw_insertanchors(': 'int $hwdoc, array $anchorecs, array $dest [, array $urlprefixes] | bool',
\ 'hw_insertdocument(': 'int $connection, int $parent_id, int $hw_document | int',
\ 'hw_insertobject(': 'int $connection, string $object_rec, string $parameter | int',
\ 'hw_mapid(': 'int $connection, int $server_id, int $object_id | int',
\ 'hw_modifyobject(': 'int $connection, int $object_to_change, array $remove, array $add [, int $mode] | bool',
\ 'hw_mv(': 'int $connection, array $object_id_array, int $source_id, int $destination_id | int',
\ 'hw_new_document(': 'string $object_record, string $document_data, int $document_size | int',
\ 'hw_objrec2array(': 'string $object_record [, array $format] | array',
\ 'hw_output_document(': 'int $hw_document | bool',
\ 'hw_pconnect(': 'string $host, int $port [, string $username [, string $password]] | int',
\ 'hw_pipedocument(': 'int $connection, int $objectID [, array $url_prefixes] | int',
\ 'hw_root(': 'void | int',
\ 'hw_setlinkroot(': 'int $link, int $rootid | int',
\ 'hw_stat(': 'int $link | string',
\ 'hw_unlock(': 'int $connection, int $objectID | bool',
\ 'hw_who(': 'int $connection | array',
\ 'hwapi_attribute_new(': '[ string $name [, string $value]] | HW_API_Attribute',
\ 'hwapi_content_new(': 'string $content, string $mimetype | HW_API_Content',
\ 'hwapi_hgcsp(': 'string $hostname [, int $port] | HW_API',
\ 'hwapi_object_new(': 'array $parameter | hw_api_object',
\ 'hypot(': 'float $x, float $y | float',
\ 'ibase_add_user(': 'resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]] | bool',
\ 'ibase_affected_rows(': '[ resource $link_identifier] | int',
\ 'ibase_backup(': 'resource $service_handle, string $source_db, string $dest_file [, int $options = 0 [, bool $verbose = false]] | mixed',
\ 'ibase_blob_add(': 'resource $blob_handle, string $data | void',
\ 'ibase_blob_cancel(': 'resource $blob_handle | bool',
\ 'ibase_blob_close(': 'resource $blob_handle | mixed',
\ 'ibase_blob_create(': '[ resource $link_identifier = NULL] | resource',
\ 'ibase_blob_echo(': 'string $blob_id | bool',
\ 'ibase_blob_get(': 'resource $blob_handle, int $len | string',
\ 'ibase_blob_import(': 'resource $link_identifier, resource $file_handle | string',
\ 'ibase_blob_info(': 'resource $link_identifier, string $blob_id | array',
\ 'ibase_blob_open(': 'resource $link_identifier, string $blob_id | resource',
\ 'ibase_close(': '[ resource $connection_id = NULL] | bool',
\ 'ibase_commit_ret(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_commit(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_connect(': '[ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]] | resource',
\ 'ibase_db_info(': 'resource $service_handle, string $db, int $action [, int $argument = 0] | string',
\ 'ibase_delete_user(': 'resource $service_handle, string $user_name | bool',
\ 'ibase_drop_db(': '[ resource $connection = NULL] | bool',
\ 'ibase_errcode(': 'void | int',
\ 'ibase_errmsg(': 'void | string',
\ 'ibase_execute(': 'resource $query [, mixed $bind_arg [, mixed $...]] | resource',
\ 'ibase_fetch_assoc(': 'resource $result [, int $fetch_flag = 0] | array',
\ 'ibase_fetch_object(': 'resource $result_id [, int $fetch_flag = 0] | object',
\ 'ibase_fetch_row(': 'resource $result_identifier [, int $fetch_flag = 0] | array',
\ 'ibase_field_info(': 'resource $result, int $field_number | array',
\ 'ibase_free_event_handler(': 'resource $event | bool',
\ 'ibase_free_query(': 'resource $query | bool',
\ 'ibase_free_result(': 'resource $result_identifier | bool',
\ 'ibase_gen_id(': 'string $generator [, int $increment = 1 [, resource $link_identifier = NULL]] | mixed',
\ 'ibase_maintain_db(': 'resource $service_handle, string $db, int $action [, int $argument = 0] | bool',
\ 'ibase_modify_user(': 'resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]] | bool',
\ 'ibase_name_result(': 'resource $result, string $name | bool',
\ 'ibase_num_fields(': 'resource $result_id | int',
\ 'ibase_num_params(': 'resource $query | int',
\ 'ibase_param_info(': 'resource $query, int $param_number | array',
\ 'ibase_pconnect(': '[ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]] | resource',
\ 'ibase_prepare(': 'string $query | resource',
\ 'ibase_query(': '[ resource $link_identifier [, string $query [, int $bind_args]]] | resource',
\ 'ibase_restore(': 'resource $service_handle, string $source_file, string $dest_db [, int $options = 0 [, bool $verbose = false]] | mixed',
\ 'ibase_rollback_ret(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_rollback(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_server_info(': 'resource $service_handle, int $action | string',
\ 'ibase_service_attach(': 'string $host, string $dba_username, string $dba_password | resource',
\ 'ibase_service_detach(': 'resource $service_handle | bool',
\ 'ibase_set_event_handler(': 'callable $event_handler, string $event_name1 [, string $event_name2 [, string $...]] | resource',
\ 'ibase_trans(': '[ int $trans_args [, resource $link_identifier]] | resource',
\ 'ibase_wait_event(': 'string $event_name1 [, string $event_name2 [, string $...]] | string',
\ 'iconv_get_encoding(': '[ string $type = "all"] | mixed',
\ 'iconv_mime_decode_headers(': 'string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | array',
\ 'iconv_mime_decode(': 'string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | string',
\ 'iconv_mime_encode(': 'string $field_name, string $field_value [, array $preferences = NULL] | string',
\ 'iconv_set_encoding(': 'string $type, string $charset | bool',
\ 'iconv_strlen(': 'string $str [, string $charset = ini_get("iconv.internal_encoding")] | int',
\ 'iconv_strpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | int',
\ 'iconv_strrpos(': 'string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding")] | int',
\ 'iconv_substr(': 'string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding")]] | string',
\ 'iconv(': 'string $in_charset, string $out_charset, string $str | string',
\ 'id3_get_frame_long_name(': 'string $frameId | string',
\ 'id3_get_frame_short_name(': 'string $frameId | string',
\ 'id3_get_genre_id(': 'string $genre | int',
\ 'id3_get_genre_list(': 'void | array',
\ 'id3_get_genre_name(': 'int $genre_id | string',
\ 'id3_get_tag(': 'string $filename [, int $version = ID3_BEST] | array',
\ 'id3_get_version(': 'string $filename | int',
\ 'id3_remove_tag(': 'string $filename [, int $version = ID3_V1_0] | bool',
\ 'id3_set_tag(': 'string $filename, array $tag [, int $version = ID3_V1_0] | bool',
\ 'idate(': 'string $format [, int $timestamp = time()] | int',
\ 'idn_to_ascii(': 'string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info]]] | string',
\ 'idn_to_unicode(': 'idn_to_unicode â€” Alias of idn_to_utf8()',
\ 'idn_to_utf8(': 'string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info]]] | string',
\ 'ifx_affected_rows(': 'resource $result_id | int',
\ 'ifx_blobinfile_mode(': 'int $mode | bool',
\ 'ifx_byteasvarchar(': 'int $mode | bool',
\ 'ifx_close(': '[ resource $link_identifier] | bool',
\ 'ifx_connect(': '[ string $database [, string $userid [, string $password]]] | resource',
\ 'ifx_copy_blob(': 'int $bid | int',
\ 'ifx_create_blob(': 'int $type, int $mode, string $param | int',
\ 'ifx_create_char(': 'string $param | int',
\ 'ifx_do(': 'resource $result_id | bool',
\ 'ifx_error(': '[ resource $link_identifier] | string',
\ 'ifx_errormsg(': '[ int $errorcode] | string',
\ 'ifx_fetch_row(': 'resource $result_id [, mixed $position] | array',
\ 'ifx_fieldproperties(': 'resource $result_id | array',
\ 'ifx_fieldtypes(': 'resource $result_id | array',
\ 'ifx_free_blob(': 'int $bid | bool',
\ 'ifx_free_char(': 'int $bid | bool',
\ 'ifx_free_result(': 'resource $result_id | bool',
\ 'ifx_get_blob(': 'int $bid | string',
\ 'ifx_get_char(': 'int $bid | string',
\ 'ifx_getsqlca(': 'resource $result_id | array',
\ 'ifx_htmltbl_result(': 'resource $result_id [, string $html_table_options] | int',
\ 'ifx_nullformat(': 'int $mode | bool',
\ 'ifx_num_fields(': 'resource $result_id | int',
\ 'ifx_num_rows(': 'resource $result_id | int',
\ 'ifx_pconnect(': '[ string $database [, string $userid [, string $password]]] | resource',
\ 'ifx_prepare(': 'string $query, resource $link_identifier [, int $cursor_def [, mixed $blobidarray]] | resource',
\ 'ifx_query(': 'string $query, resource $link_identifier [, int $cursor_type [, mixed $blobidarray]] | resource',
\ 'ifx_textasvarchar(': 'int $mode | bool',
\ 'ifx_update_blob(': 'int $bid, string $content | bool',
\ 'ifx_update_char(': 'int $bid, string $content | bool',
\ 'ifxus_close_slob(': 'int $bid | bool',
\ 'ifxus_create_slob(': 'int $mode | int',
\ 'ifxus_free_slob(': 'int $bid | bool',
\ 'ifxus_open_slob(': 'int $bid, int $mode | int',
\ 'ifxus_read_slob(': 'int $bid, int $nbytes | string',
\ 'ifxus_seek_slob(': 'int $bid, int $mode, int $offset | int',
\ 'ifxus_tell_slob(': 'int $bid | int',
\ 'ifxus_write_slob(': 'int $bid, string $content | int',
\ 'ignore_user_abort(': '[ string $value] | int',
\ 'iis_add_server(': 'string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server | int',
\ 'iis_get_dir_security(': 'int $server_instance, string $virtual_path | int',
\ 'iis_get_script_map(': 'int $server_instance, string $virtual_path, string $script_extension | string',
\ 'iis_get_server_by_comment(': 'string $comment | int',
\ 'iis_get_server_by_path(': 'string $path | int',
\ 'iis_get_server_rights(': 'int $server_instance, string $virtual_path | int',
\ 'iis_get_service_state(': 'string $service_id | int',
\ 'iis_remove_server(': 'int $server_instance | int',
\ 'iis_set_app_settings(': 'int $server_instance, string $virtual_path, string $application_scope | int',
\ 'iis_set_dir_security(': 'int $server_instance, string $virtual_path, int $directory_flags | int',
\ 'iis_set_script_map(': 'int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting | int',
\ 'iis_set_server_rights(': 'int $server_instance, string $virtual_path, int $directory_flags | int',
\ 'iis_start_server(': 'int $server_instance | int',
\ 'iis_start_service(': 'string $service_id | int',
\ 'iis_stop_server(': 'int $server_instance | int',
\ 'iis_stop_service(': 'string $service_id | int',
\ 'image_type_to_extension(': 'int $imagetype [, bool $include_dot = TRUE] | string',
\ 'image_type_to_mime_type(': 'int $imagetype | string',
\ 'image2wbmp(': 'resource $image [, string $filename [, int $threshold]] | bool',
\ 'imagealphablending(': 'resource $image, bool $blendmode | bool',
\ 'imageantialias(': 'resource $image, bool $enabled | bool',
\ 'imagearc(': 'resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color | bool',
\ 'imagechar(': 'resource $image, int $font, int $x, int $y, string $c, int $color | bool',
\ 'imagecharup(': 'resource $image, int $font, int $x, int $y, string $c, int $color | bool',
\ 'imagecolorallocate(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorallocatealpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorat(': 'resource $image, int $x, int $y | int',
\ 'imagecolorclosest(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorclosestalpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorclosesthwb(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolordeallocate(': 'resource $image, int $color | bool',
\ 'imagecolorexact(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorexactalpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolormatch(': 'resource $image1, resource $image2 | bool',
\ 'imagecolorresolve(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorresolvealpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorset(': 'resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0] | void',
\ 'imagecolorsforindex(': 'resource $image, int $index | array',
\ 'imagecolorstotal(': 'resource $image | int',
\ 'imagecolortransparent(': 'resource $image [, int $color] | int',
\ 'imageconvolution(': 'resource $image, array $matrix, float $div, float $offset | bool',
\ 'imagecopy(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h | bool',
\ 'imagecopymerge(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct | bool',
\ 'imagecopymergegray(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct | bool',
\ 'imagecopyresampled(': 'resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h | bool',
\ 'imagecopyresized(': 'resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h | bool',
\ 'imagecreate(': 'int $width, int $height | resource',
\ 'imagecreatefromgd(': 'string $filename | resource',
\ 'imagecreatefromgd2(': 'string $filename | resource',
\ 'imagecreatefromgd2part(': 'string $filename, int $srcX, int $srcY, int $width, int $height | resource',
\ 'imagecreatefromgif(': 'string $filename | resource',
\ 'imagecreatefromjpeg(': 'string $filename | resource',
\ 'imagecreatefrompng(': 'string $filename | resource',
\ 'imagecreatefromstring(': 'string $image | resource',
\ 'imagecreatefromwbmp(': 'string $filename | resource',
\ 'imagecreatefromwebp(': 'string $filename | resource',
\ 'imagecreatefromxbm(': 'string $filename | resource',
\ 'imagecreatefromxpm(': 'string $filename | resource',
\ 'imagecreatetruecolor(': 'int $width, int $height | resource',
\ 'imagedashedline(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imagedestroy(': 'resource $image | bool',
\ 'imageellipse(': 'resource $image, int $cx, int $cy, int $width, int $height, int $color | bool',
\ 'imagefill(': 'resource $image, int $x, int $y, int $color | bool',
\ 'imagefilledarc(': 'resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style | bool',
\ 'imagefilledellipse(': 'resource $image, int $cx, int $cy, int $width, int $height, int $color | bool',
\ 'imagefilledpolygon(': 'resource $image, array $points, int $num_points, int $color | bool',
\ 'imagefilledrectangle(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imagefilltoborder(': 'resource $image, int $x, int $y, int $border, int $color | bool',
\ 'imagefilter(': 'resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4]]]] | bool',
\ 'imageflip(': 'resource $image, int $mode | bool',
\ 'imagefontheight(': 'int $font | int',
\ 'imagefontwidth(': 'int $font | int',
\ 'imageftbbox(': 'float $size, float $angle, string $fontfile, string $text [, array $extrainfo] | array',
\ 'imagefttext(': 'resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo] | array',
\ 'imagegammacorrect(': 'resource $image, float $inputgamma, float $outputgamma | bool',
\ 'imagegd(': 'resource $image [, string $filename] | bool',
\ 'imagegd2(': 'resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW]]] | bool',
\ 'imagegif(': 'resource $image [, string $filename] | bool',
\ 'imagegrabscreen(': 'void | resource',
\ 'imagegrabwindow(': 'int $window_handle [, int $client_area = 0] | resource',
\ 'imageinterlace(': 'resource $image [, int $interlace = 0] | int',
\ 'imageistruecolor(': 'resource $image | bool',
\ 'imagejpeg(': 'resource $image [, string $filename [, int $quality]] | bool',
\ 'imagelayereffect(': 'resource $image, int $effect | bool',
\ 'imageline(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imageloadfont(': 'string $file | int',
\ 'imagepalettecopy(': 'resource $destination, resource $source | void',
\ 'imagepalettetotruecolor(': 'resource $src | bool',
\ 'imagepng(': 'resource $image [, string $filename [, int $quality [, int $filters]]] | bool',
\ 'imagepolygon(': 'resource $image, array $points, int $num_points, int $color | bool',
\ 'imagepsbbox(': 'string $text, resource $font, int $size | array',
\ 'imagepsencodefont(': 'resource $font_index, string $encodingfile | bool',
\ 'imagepsextendfont(': 'resource $font_index, float $extend | bool',
\ 'imagepsfreefont(': 'resource $font_index | bool',
\ 'imagepsloadfont(': 'string $filename | resource',
\ 'imagepsslantfont(': 'resource $font_index, float $slant | bool',
\ 'imagepstext(': 'resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4]]]] | array',
\ 'imagerectangle(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imagerotate(': 'resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0] | resource',
\ 'imagesavealpha(': 'resource $image, bool $saveflag | bool',
\ 'imagesetbrush(': 'resource $image, resource $brush | bool',
\ 'imagesetinterpolation(': 'resource $image [, int $method = IMG_BILINEAR_FIXED] | bool',
\ 'imagesetpixel(': 'resource $image, int $x, int $y, int $color | bool',
\ 'imagesetstyle(': 'resource $image, array $style | bool',
\ 'imagesetthickness(': 'resource $image, int $thickness | bool',
\ 'imagesettile(': 'resource $image, resource $tile | bool',
\ 'imagestring(': 'resource $image, int $font, int $x, int $y, string $string, int $color | bool',
\ 'imagestringup(': 'resource $image, int $font, int $x, int $y, string $string, int $color | bool',
\ 'imagesx(': 'resource $image | int',
\ 'imagesy(': 'resource $image | int',
\ 'imagetruecolortopalette(': 'resource $image, bool $dither, int $ncolors | bool',
\ 'imagettfbbox(': 'float $size, float $angle, string $fontfile, string $text | array',
\ 'imagettftext(': 'resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text | array',
\ 'imagetypes(': 'void | int',
\ 'imagewbmp(': 'resource $image [, string $filename [, int $foreground]] | bool',
\ 'imagewebp(': 'resource $image, string $filename | bool',
\ 'imagexbm(': 'resource $image, string $filename [, int $foreground] | bool',
\ 'imap_8bit(': 'string $string | string',
\ 'imap_alerts(': 'void | array',
\ 'imap_append(': 'resource $imap_stream, string $mailbox, string $message [, string $options = NULL [, string $internal_date = NULL]] | bool',
\ 'imap_base64(': 'string $text | string',
\ 'imap_binary(': 'string $string | string',
\ 'imap_body(': 'resource $imap_stream, int $msg_number [, int $options = 0] | string',
\ 'imap_bodystruct(': 'resource $imap_stream, int $msg_number, string $section | object',
\ 'imap_check(': 'resource $imap_stream | object',
\ 'imap_clearflag_full(': 'resource $imap_stream, string $sequence, string $flag [, int $options = 0] | bool',
\ 'imap_close(': 'resource $imap_stream [, int $flag = 0] | bool',
\ 'imap_create(': 'imap_create â€” Alias of imap_createmailbox()',
\ 'imap_createmailbox(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_delete(': 'resource $imap_stream, int $msg_number [, int $options = 0] | bool',
\ 'imap_deletemailbox(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_errors(': 'void | array',
\ 'imap_expunge(': 'resource $imap_stream | bool',
\ 'imap_fetch_overview(': 'resource $imap_stream, string $sequence [, int $options = 0] | array',
\ 'imap_fetchbody(': 'resource $imap_stream, int $msg_number, string $section [, int $options = 0] | string',
\ 'imap_fetchheader(': 'resource $imap_stream, int $msg_number [, int $options = 0] | string',
\ 'imap_fetchmime(': 'resource $imap_stream, int $msg_number, string $section [, int $options = 0] | string',
\ 'imap_fetchstructure(': 'resource $imap_stream, int $msg_number [, int $options = 0] | object',
\ 'imap_fetchtext(': 'imap_fetchtext â€” Alias of imap_body()',
\ 'imap_gc(': 'resource $imap_stream, int $caches | bool',
\ 'imap_get_quota(': 'resource $imap_stream, string $quota_root | array',
\ 'imap_get_quotaroot(': 'resource $imap_stream, string $quota_root | array',
\ 'imap_getacl(': 'resource $imap_stream, string $mailbox | array',
\ 'imap_getmailboxes(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_getsubscribed(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_header(': 'imap_header â€” Alias of imap_headerinfo()',
\ 'imap_headerinfo(': 'resource $imap_stream, int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL]]] | object',
\ 'imap_headers(': 'resource $imap_stream | array',
\ 'imap_last_error(': 'void | string',
\ 'imap_list(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_listmailbox(': 'imap_listmailbox â€” Alias of imap_list()',
\ 'imap_listscan(': 'resource $imap_stream, string $ref, string $pattern, string $content | array',
\ 'imap_listsubscribed(': 'imap_listsubscribed â€” Alias of imap_lsub()',
\ 'imap_lsub(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_mail_compose(': 'array $envelope, array $body | string',
\ 'imap_mail_copy(': 'resource $imap_stream, string $msglist, string $mailbox [, int $options = 0] | bool',
\ 'imap_mail_move(': 'resource $imap_stream, string $msglist, string $mailbox [, int $options = 0] | bool',
\ 'imap_mail(': 'string $to, string $subject, string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL]]]] | bool',
\ 'imap_mailboxmsginfo(': 'resource $imap_stream | object',
\ 'imap_mime_header_decode(': 'string $text | array',
\ 'imap_msgno(': 'resource $imap_stream, int $uid | int',
\ 'imap_num_msg(': 'resource $imap_stream | int',
\ 'imap_num_recent(': 'resource $imap_stream | int',
\ 'imap_open(': 'string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL]]] | resource',
\ 'imap_ping(': 'resource $imap_stream | bool',
\ 'imap_qprint(': 'string $string | string',
\ 'imap_rename(': 'imap_rename â€” Alias of imap_renamemailbox()',
\ 'imap_renamemailbox(': 'resource $imap_stream, string $old_mbox, string $new_mbox | bool',
\ 'imap_reopen(': 'resource $imap_stream, string $mailbox [, int $options = 0 [, int $n_retries = 0]] | bool',
\ 'imap_rfc822_parse_adrlist(': 'string $address, string $default_host | array',
\ 'imap_rfc822_parse_headers(': 'string $headers [, string $defaulthost = "UNKNOWN"] | object',
\ 'imap_rfc822_write_address(': 'string $mailbox, string $host, string $personal | string',
\ 'imap_savebody(': 'resource $imap_stream, mixed $file, int $msg_number [, string $part_number = "" [, int $options = 0]] | bool',
\ 'imap_scan(': 'imap_scan â€” Alias of imap_listscan()',
\ 'imap_scanmailbox(': 'imap_scanmailbox â€” Alias of imap_listscan()',
\ 'imap_search(': 'resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = NIL]] | array',
\ 'imap_set_quota(': 'resource $imap_stream, string $quota_root, int $quota_limit | bool',
\ 'imap_setacl(': 'resource $imap_stream, string $mailbox, string $id, string $rights | bool',
\ 'imap_setflag_full(': 'resource $imap_stream, string $sequence, string $flag [, int $options = NIL] | bool',
\ 'imap_sort(': 'resource $imap_stream, int $criteria, int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL]]] | array',
\ 'imap_status(': 'resource $imap_stream, string $mailbox, int $options | object',
\ 'imap_subscribe(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_thread(': 'resource $imap_stream [, int $options = SE_FREE] | array',
\ 'imap_timeout(': 'int $timeout_type [, int $timeout = -1] | mixed',
\ 'imap_uid(': 'resource $imap_stream, int $msg_number | int',
\ 'imap_undelete(': 'resource $imap_stream, int $msg_number [, int $flags = 0] | bool',
\ 'imap_unsubscribe(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_utf7_decode(': 'string $text | string',
\ 'imap_utf7_encode(': 'string $data | string',
\ 'imap_utf8(': 'string $mime_encoded_text | string',
\ 'implode(': 'string $glue, array $pieces | string',
\ 'import_request_variables(': 'string $types [, string $prefix] | bool',
\ 'in_array(': 'mixed $needle, array $haystack [, bool $strict = FALSE] | bool',
\ 'inclued_get_data(': 'void | array',
\ 'inet_ntop(': 'string $in_addr | string',
\ 'inet_pton(': 'string $address | string',
\ 'ingres_autocommit_state(': 'resource $link | bool',
\ 'ingres_autocommit(': 'resource $link | bool',
\ 'ingres_charset(': 'resource $link | string',
\ 'ingres_close(': 'resource $link | bool',
\ 'ingres_commit(': 'resource $link | bool',
\ 'ingres_connect(': '[ string $database [, string $username [, string $password [, array $options]]]] | resource',
\ 'ingres_cursor(': 'resource $result | string',
\ 'ingres_errno(': '[ resource $link] | int',
\ 'ingres_error(': '[ resource $link] | string',
\ 'ingres_errsqlstate(': '[ resource $link] | string',
\ 'ingres_escape_string(': 'resource $link, string $source_string | string',
\ 'ingres_execute(': 'resource $result [, array $params [, string $types]] | bool',
\ 'ingres_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'ingres_fetch_assoc(': 'resource $result | array',
\ 'ingres_fetch_object(': 'resource $result [, int $result_type] | object',
\ 'ingres_fetch_proc_return(': 'resource $result | int',
\ 'ingres_fetch_row(': 'resource $result | array',
\ 'ingres_field_length(': 'resource $result, int $index | int',
\ 'ingres_field_name(': 'resource $result, int $index | string',
\ 'ingres_field_nullable(': 'resource $result, int $index | bool',
\ 'ingres_field_precision(': 'resource $result, int $index | int',
\ 'ingres_field_scale(': 'resource $result, int $index | int',
\ 'ingres_field_type(': 'resource $result, int $index | string',
\ 'ingres_free_result(': 'resource $result | bool',
\ 'ingres_next_error(': '[ resource $link] | bool',
\ 'ingres_num_fields(': 'resource $result | int',
\ 'ingres_num_rows(': 'resource $result | int',
\ 'ingres_pconnect(': '[ string $database [, string $username [, string $password [, array $options]]]] | resource',
\ 'ingres_prepare(': 'resource $link, string $query | mixed',
\ 'ingres_query(': 'resource $link, string $query [, array $params [, string $types]] | mixed',
\ 'ingres_result_seek(': 'resource $result, int $position | bool',
\ 'ingres_rollback(': 'resource $link | bool',
\ 'ingres_set_environment(': 'resource $link, array $options | bool',
\ 'ingres_unbuffered_query(': 'resource $link, string $query [, array $params [, string $types]] | mixed',
\ 'ini_alter(': 'ini_alter â€” Alias of ini_set()',
\ 'ini_get_all(': '[ string $extension [, bool $details = true]] | array',
\ 'ini_get(': 'string $varname | string',
\ 'ini_restore(': 'string $varname | void',
\ 'ini_set(': 'string $varname, string $newvalue | string',
\ 'inotify_add_watch(': 'resource $inotify_instance, string $pathname, int $mask | int',
\ 'inotify_init(': 'void | resource',
\ 'inotify_queue_len(': 'resource $inotify_instance | int',
\ 'inotify_read(': 'resource $inotify_instance | array',
\ 'inotify_rm_watch(': 'resource $inotify_instance, int $watch_descriptor | bool',
\ 'interface_exists(': 'string $interface_name [, bool $autoload = true] | bool',
\ 'intl_error_name(': 'int $error_code | string',
\ 'intl_get_error_code(': 'void | int',
\ 'intl_get_error_message(': 'void | string',
\ 'intl_is_failure(': 'int $error_code | bool',
\ 'intval(': 'mixed $var [, int $base = 10] | int',
\ 'ip2long(': 'string $ip_address | int',
\ 'iptcembed(': 'string $iptcdata, string $jpeg_file_name [, int $spool] | mixed',
\ 'iptcparse(': 'string $iptcblock | array',
\ 'is_a(': 'object $object, string $class_name [, bool $allow_string = FALSE] | bool',
\ 'is_array(': 'mixed $var | bool',
\ 'is_bool(': 'mixed $var | bool',
\ 'is_callable(': 'callable $name [, bool $syntax_only = false [, string &$callable_name]] | bool',
\ 'is_dir(': 'string $filename | bool',
\ 'is_double(': 'is_double â€” Alias of is_float()',
\ 'is_executable(': 'string $filename | bool',
\ 'is_file(': 'string $filename | bool',
\ 'is_finite(': 'float $val | bool',
\ 'is_float(': 'mixed $var | bool',
\ 'is_infinite(': 'float $val | bool',
\ 'is_int(': 'mixed $var | bool',
\ 'is_integer(': 'is_integer â€” Alias of is_int()',
\ 'is_link(': 'string $filename | bool',
\ 'is_long(': 'is_long â€” Alias of is_int()',
\ 'is_nan(': 'float $val | bool',
\ 'is_null(': 'mixed $var | bool',
\ 'is_numeric(': 'mixed $var | bool',
\ 'is_object(': 'mixed $var | bool',
\ 'is_readable(': 'string $filename | bool',
\ 'is_real(': 'is_real â€” Alias of is_float()',
\ 'is_resource(': 'mixed $var | bool',
\ 'is_scalar(': 'mixed $var | bool',
\ 'is_soap_fault(': 'mixed $object | bool',
\ 'is_string(': 'mixed $var | bool',
\ 'is_subclass_of(': 'mixed $object, string $class_name [, bool $allow_string = TRUE] | bool',
\ 'is_tainted(': 'string $string | bool',
\ 'is_uploaded_file(': 'string $filename | bool',
\ 'is_writable(': 'string $filename | bool',
\ 'is_writeable(': 'is_writeable â€” Alias of is_writable()',
\ 'isset(': 'mixed $var [, mixed $...] | bool',
\ 'iterator_apply(': 'Traversable $iterator, callable $function [, array $args] | int',
\ 'iterator_count(': 'Traversable $iterator | int',
\ 'iterator_to_array(': 'Traversable $iterator [, bool $use_keys = true] | array',
\ 'java_last_exception_clear(': 'void | void',
\ 'java_last_exception_get(': 'void | object',
\ 'jddayofweek(': 'int $julianday [, int $mode = CAL_DOW_DAYNO] | mixed',
\ 'jdmonthname(': 'int $julianday, int $mode | string',
\ 'jdtofrench(': 'int $juliandaycount | string',
\ 'jdtogregorian(': 'int $julianday | string',
\ 'jdtojewish(': 'int $juliandaycount [, bool $hebrew = false [, int $fl = 0]] | string',
\ 'jdtojulian(': 'int $julianday | string',
\ 'jdtounix(': 'int $jday | int',
\ 'jewishtojd(': 'int $month, int $day, int $year | int',
\ 'join(': 'join â€” Alias of implode()',
\ 'jpeg2wbmp(': 'string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold | bool',
\ 'json_decode(': 'string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0]]] | mixed',
\ 'json_encode(': 'mixed $value [, int $options = 0] | string',
\ 'json_last_error(': 'void | int',
\ 'judy_type(': 'Judy $array | int',
\ 'judy_version(': 'void | string',
\ 'juliantojd(': 'int $month, int $day, int $year | int',
\ 'kadm5_chpass_principal(': 'resource $handle, string $principal, string $password | bool',
\ 'kadm5_create_principal(': 'resource $handle, string $principal [, string $password [, array $options]] | bool',
\ 'kadm5_delete_principal(': 'resource $handle, string $principal | bool',
\ 'kadm5_destroy(': 'resource $handle | bool',
\ 'kadm5_flush(': 'resource $handle | bool',
\ 'kadm5_get_policies(': 'resource $handle | array',
\ 'kadm5_get_principal(': 'resource $handle, string $principal | array',
\ 'kadm5_get_principals(': 'resource $handle | array',
\ 'kadm5_init_with_password(': 'string $admin_server, string $realm, string $principal, string $password | resource',
\ 'kadm5_modify_principal(': 'resource $handle, string $principal, array $options | bool',
\ 'key(': 'array &$array | mixed',
\ 'krsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'ksort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'lcfirst(': 'string $str | string',
\ 'lcg_value(': 'void | float',
\ 'lchgrp(': 'string $filename, mixed $group | bool',
\ 'lchown(': 'string $filename, mixed $user | bool',
\ 'ldap_8859_to_t61(': 'string $value | string',
\ 'ldap_add(': 'resource $link_identifier, string $dn, array $entry | bool',
\ 'ldap_bind(': 'resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL]] | bool',
\ 'ldap_close(': 'ldap_close â€” Alias of ldap_unbind()',
\ 'ldap_compare(': 'resource $link_identifier, string $dn, string $attribute, string $value | mixed',
\ 'ldap_connect(': '[ string $hostname = NULL [, int $port = 389]] | resource',
\ 'ldap_control_paged_result_response(': 'resource $link, resource $result [, string &$cookie [, int &$estimated]] | bool',
\ 'ldap_control_paged_result(': 'resource $link, int $pagesize [, bool $iscritical [, string $cookie]] | bool',
\ 'ldap_count_entries(': 'resource $link_identifier, resource $result_identifier | int',
\ 'ldap_delete(': 'resource $link_identifier, string $dn | bool',
\ 'ldap_dn2ufn(': 'string $dn | string',
\ 'ldap_err2str(': 'int $errno | string',
\ 'ldap_errno(': 'resource $link_identifier | int',
\ 'ldap_error(': 'resource $link_identifier | string',
\ 'ldap_explode_dn(': 'string $dn, int $with_attrib | array',
\ 'ldap_first_attribute(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_first_entry(': 'resource $link_identifier, resource $result_identifier | resource',
\ 'ldap_first_reference(': 'resource $link, resource $result | resource',
\ 'ldap_free_result(': 'resource $result_identifier | bool',
\ 'ldap_get_attributes(': 'resource $link_identifier, resource $result_entry_identifier | array',
\ 'ldap_get_dn(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_get_entries(': 'resource $link_identifier, resource $result_identifier | array',
\ 'ldap_get_option(': 'resource $link_identifier, int $option, mixed &$retval | bool',
\ 'ldap_get_values_len(': 'resource $link_identifier, resource $result_entry_identifier, string $attribute | array',
\ 'ldap_get_values(': 'resource $link_identifier, resource $result_entry_identifier, string $attribute | array',
\ 'ldap_list(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref]]]]] | resource',
\ 'ldap_mod_add(': 'resource $link_identifier, string $dn, array $entry | bool',
\ 'ldap_mod_del(': 'resource $link_identifier, string $dn, array $entry | bool',
\ 'ldap_mod_replace(': 'resource $link_identifier, string $dn, array $entry | bool',
\ 'ldap_modify(': 'resource $link_identifier, string $dn, array $entry | bool',
\ 'ldap_next_attribute(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_next_entry(': 'resource $link_identifier, resource $result_entry_identifier | resource',
\ 'ldap_next_reference(': 'resource $link, resource $entry | resource',
\ 'ldap_parse_reference(': 'resource $link, resource $entry, array &$referrals | bool',
\ 'ldap_parse_result(': 'resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals]]] | bool',
\ 'ldap_read(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref]]]]] | resource',
\ 'ldap_rename(': 'resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn | bool',
\ 'ldap_sasl_bind(': 'resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL]]]]]]] | bool',
\ 'ldap_search(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref]]]]] | resource',
\ 'ldap_set_option(': 'resource $link_identifier, int $option, mixed $newval | bool',
\ 'ldap_set_rebind_proc(': 'resource $link, callable $callback | bool',
\ 'ldap_sort(': 'resource $link, resource $result, string $sortfilter | bool',
\ 'ldap_start_tls(': 'resource $link | bool',
\ 'ldap_t61_to_8859(': 'string $value | string',
\ 'ldap_unbind(': 'resource $link_identifier | bool',
\ 'levenshtein(': 'string $str1, string $str2 | int',
\ 'libxml_clear_errors(': 'void | void',
\ 'libxml_disable_entity_loader(': '[ bool $disable = true] | bool',
\ 'libxml_get_errors(': 'void | array',
\ 'libxml_get_last_error(': 'void | LibXMLError',
\ 'libxml_set_external_entity_loader(': 'callable $resolver_function | void',
\ 'libxml_set_streams_context(': 'resource $streams_context | void',
\ 'libxml_use_internal_errors(': '[ bool $use_errors = false] | bool',
\ 'link(': 'string $target, string $link | bool',
\ 'linkinfo(': 'string $path | int',
\ 'list(': 'mixed $varname [, mixed $...] | array',
\ 'localeconv(': 'void | array',
\ 'localtime(': '[ int $timestamp = time() [, bool $is_associative = false]] | array',
\ 'log(': 'float $arg [, float $base = M_E] | float',
\ 'log10(': 'float $arg | float',
\ 'log1p(': 'float $number | float',
\ 'long2ip(': 'string $proper_address | string',
\ 'lstat(': 'string $filename | array',
\ 'ltrim(': 'string $str [, string $charlist] | string',
\ 'lzf_compress(': 'string $data | string',
\ 'lzf_decompress(': 'string $data | string',
\ 'lzf_optimized_for(': 'void | int',
\ 'm_checkstatus(': 'resource $conn, int $identifier | int',
\ 'm_completeauthorizations(': 'resource $conn, int &$array | int',
\ 'm_connect(': 'resource $conn | int',
\ 'm_connectionerror(': 'resource $conn | string',
\ 'm_deletetrans(': 'resource $conn, int $identifier | bool',
\ 'm_destroyconn(': 'resource $conn | bool',
\ 'm_destroyengine(': 'void | void',
\ 'm_getcell(': 'resource $conn, int $identifier, string $column, int $row | string',
\ 'm_getcellbynum(': 'resource $conn, int $identifier, int $column, int $row | string',
\ 'm_getcommadelimited(': 'resource $conn, int $identifier | string',
\ 'm_getheader(': 'resource $conn, int $identifier, int $column_num | string',
\ 'm_initconn(': 'void | resource',
\ 'm_initengine(': 'string $location | int',
\ 'm_iscommadelimited(': 'resource $conn, int $identifier | int',
\ 'm_maxconntimeout(': 'resource $conn, int $secs | bool',
\ 'm_monitor(': 'resource $conn | int',
\ 'm_numcolumns(': 'resource $conn, int $identifier | int',
\ 'm_numrows(': 'resource $conn, int $identifier | int',
\ 'm_parsecommadelimited(': 'resource $conn, int $identifier | int',
\ 'm_responsekeys(': 'resource $conn, int $identifier | array',
\ 'm_responseparam(': 'resource $conn, int $identifier, string $key | string',
\ 'm_returnstatus(': 'resource $conn, int $identifier | int',
\ 'm_setblocking(': 'resource $conn, int $tf | int',
\ 'm_setdropfile(': 'resource $conn, string $directory | int',
\ 'm_setip(': 'resource $conn, string $host, int $port | int',
\ 'm_setssl_cafile(': 'resource $conn, string $cafile | int',
\ 'm_setssl_files(': 'resource $conn, string $sslkeyfile, string $sslcertfile | int',
\ 'm_setssl(': 'resource $conn, string $host, int $port | int',
\ 'm_settimeout(': 'resource $conn, int $seconds | int',
\ 'm_sslcert_gen_hash(': 'string $filename | string',
\ 'm_transactionssent(': 'resource $conn | int',
\ 'm_transinqueue(': 'resource $conn | int',
\ 'm_transkeyval(': 'resource $conn, int $identifier, string $key, string $value | int',
\ 'm_transnew(': 'resource $conn | int',
\ 'm_transsend(': 'resource $conn, int $identifier | int',
\ 'm_uwait(': 'int $microsecs | int',
\ 'm_validateidentifier(': 'resource $conn, int $tf | int',
\ 'm_verifyconnection(': 'resource $conn, int $tf | bool',
\ 'm_verifysslcert(': 'resource $conn, int $tf | bool',
\ 'magic_quotes_runtime(': 'magic_quotes_runtime â€” Alias of set_magic_quotes_runtime()',
\ 'mail(': 'string $to, string $subject, string $message [, string $additional_headers [, string $additional_parameters]] | bool',
\ 'mailparse_determine_best_xfer_encoding(': 'resource $fp | string',
\ 'mailparse_msg_create(': 'void | resource',
\ 'mailparse_msg_extract_part_file(': 'resource $mimemail, mixed $filename [, callable $callbackfunc] | string',
\ 'mailparse_msg_extract_part(': 'resource $mimemail, string $msgbody [, callable $callbackfunc] | void',
\ 'mailparse_msg_extract_whole_part_file(': 'resource $mimemail, string $filename [, callable $callbackfunc] | string',
\ 'mailparse_msg_free(': 'resource $mimemail | bool',
\ 'mailparse_msg_get_part_data(': 'resource $mimemail | array',
\ 'mailparse_msg_get_part(': 'resource $mimemail, string $mimesection | resource',
\ 'mailparse_msg_get_structure(': 'resource $mimemail | array',
\ 'mailparse_msg_parse_file(': 'string $filename | resource',
\ 'mailparse_msg_parse(': 'resource $mimemail, string $data | bool',
\ 'mailparse_rfc822_parse_addresses(': 'string $addresses | array',
\ 'mailparse_stream_encode(': 'resource $sourcefp, resource $destfp, string $encoding | bool',
\ 'mailparse_uudecode_all(': 'resource $fp | array',
\ 'max(': 'array $values | mixed',
\ 'maxdb_affected_rows(': 'resource $link | int',
\ 'maxdb_autocommit(': 'resource $link, bool $mode | bool',
\ 'maxdb_bind_param(': 'maxdb_bind_param â€” Alias of maxdb_stmt_bind_param()',
\ 'maxdb_bind_result(': 'maxdb_bind_result â€” Alias of maxdb_stmt_bind_result()',
\ 'maxdb_change_user(': 'resource $link, string $user, string $password, string $database | bool',
\ 'maxdb_character_set_name(': 'resource $link | string',
\ 'maxdb_client_encoding(': 'maxdb_client_encoding â€” Alias of maxdb_character_set_name()',
\ 'maxdb_close_long_data(': 'maxdb_close_long_data â€” Alias of maxdb_stmt_close_long_data()',
\ 'maxdb_close(': 'resource $link | bool',
\ 'maxdb_commit(': 'resource $link | bool',
\ 'maxdb_connect_errno(': 'void | int',
\ 'maxdb_connect_error(': 'void | string',
\ 'maxdb_connect(': '[ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]] | resource',
\ 'maxdb_data_seek(': 'resource $result, int $offset | bool',
\ 'maxdb_debug(': 'string $debug | void',
\ 'maxdb_disable_reads_from_master(': 'resource $link | bool',
\ 'maxdb_disable_rpl_parse(': 'resource $link | bool',
\ 'maxdb_dump_debug_info(': 'resource $link | bool',
\ 'maxdb_embedded_connect(': '[ string $dbname] | resource',
\ 'maxdb_enable_reads_from_master(': 'resource $link | bool',
\ 'maxdb_enable_rpl_parse(': 'resource $link | bool',
\ 'maxdb_errno(': 'resource $link | int',
\ 'maxdb_error(': 'resource $link | string',
\ 'maxdb_escape_string(': 'maxdb_escape_string â€” Alias of maxdb_real_escape_string()',
\ 'maxdb_execute(': 'maxdb_execute â€” Alias of maxdb_stmt_execute()',
\ 'maxdb_fetch_array(': 'resource $result [, int $resulttype] | mixed',
\ 'maxdb_fetch_assoc(': 'resource $result | array',
\ 'maxdb_fetch_field_direct(': 'resource $result, int $fieldnr | mixed',
\ 'maxdb_fetch_field(': 'resource $result | mixed',
\ 'maxdb_fetch_fields(': 'resource $result | mixed',
\ 'maxdb_fetch_lengths(': 'resource $result | array',
\ 'maxdb_fetch_object(': 'object $result | object',
\ 'maxdb_fetch_row(': 'resource $result | mixed',
\ 'maxdb_fetch(': 'maxdb_fetch â€” Alias of maxdb_stmt_fetch()',
\ 'maxdb_field_count(': 'resource $link | int',
\ 'maxdb_field_seek(': 'resource $result, int $fieldnr | bool',
\ 'maxdb_field_tell(': 'resource $result | int',
\ 'maxdb_free_result(': 'resource $result | void',
\ 'maxdb_get_client_info(': 'void | string',
\ 'maxdb_get_client_version(': 'void | int',
\ 'maxdb_get_host_info(': 'resource $link | string',
\ 'maxdb_get_metadata(': 'maxdb_get_metadata â€” Alias of maxdb_stmt_result_metadata()',
\ 'maxdb_get_proto_info(': 'resource $link | int',
\ 'maxdb_get_server_info(': 'resource $link | string',
\ 'maxdb_get_server_version(': 'resource $link | int',
\ 'maxdb_info(': 'resource $link | string',
\ 'maxdb_init(': 'void | resource',
\ 'maxdb_insert_id(': 'resource $link | mixed',
\ 'maxdb_kill(': 'resource $link, int $processid | bool',
\ 'maxdb_master_query(': 'resource $link, string $query | bool',
\ 'maxdb_more_results(': 'resource $link | bool',
\ 'maxdb_multi_query(': 'resource $link, string $query | bool',
\ 'maxdb_next_result(': 'resource $link | bool',
\ 'maxdb_num_fields(': 'resource $result | int',
\ 'maxdb_num_rows(': 'resource $result | int',
\ 'maxdb_options(': 'resource $link, int $option, mixed $value | bool',
\ 'maxdb_param_count(': 'maxdb_param_count â€” Alias of maxdb_stmt_param_count()',
\ 'maxdb_ping(': 'resource $link | bool',
\ 'maxdb_prepare(': 'resource $link, string $query | resource',
\ 'maxdb_query(': 'resource $link, string $query [, int $resultmode] | mixed',
\ 'maxdb_real_connect(': 'resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]] | bool',
\ 'maxdb_real_escape_string(': 'resource $link, string $escapestr | string',
\ 'maxdb_real_query(': 'resource $link, string $query | bool',
\ 'maxdb_report(': 'int $flags | bool',
\ 'maxdb_rollback(': 'resource $link | bool',
\ 'maxdb_rpl_parse_enabled(': 'resource $link | int',
\ 'maxdb_rpl_probe(': 'resource $link | bool',
\ 'maxdb_rpl_query_type(': 'resource $link | int',
\ 'maxdb_select_db(': 'resource $link, string $dbname | bool',
\ 'maxdb_send_long_data(': 'maxdb_send_long_data â€” Alias of maxdb_stmt_send_long_data()',
\ 'maxdb_send_query(': 'resource $link, string $query | bool',
\ 'maxdb_server_end(': 'void | void',
\ 'maxdb_server_init(': '[ array $server [, array $groups]] | bool',
\ 'maxdb_set_opt(': 'maxdb_set_opt â€” Alias of maxdb_options()',
\ 'maxdb_sqlstate(': 'resource $link | string',
\ 'maxdb_ssl_set(': 'resource $link, string $key, string $cert, string $ca, string $capath, string $cipher | bool',
\ 'maxdb_stat(': 'resource $link | string',
\ 'maxdb_stmt_affected_rows(': 'resource $stmt | int',
\ 'maxdb_stmt_bind_param(': 'resource $stmt, string $types, mixed &$var1 [, mixed &$...] | bool',
\ 'maxdb_stmt_bind_result(': 'resource $stmt, mixed &$var1 [, mixed &$...] | bool',
\ 'maxdb_stmt_close_long_data(': 'resource $stmt, int $param_nr | bool',
\ 'maxdb_stmt_close(': 'resource $stmt | bool',
\ 'maxdb_stmt_data_seek(': 'resource $statement, int $offset | bool',
\ 'maxdb_stmt_errno(': 'resource $stmt | int',
\ 'maxdb_stmt_error(': 'resource $stmt | string',
\ 'maxdb_stmt_execute(': 'resource $stmt | bool',
\ 'maxdb_stmt_fetch(': 'resource $stmt | bool',
\ 'maxdb_stmt_free_result(': 'resource $stmt | void',
\ 'maxdb_stmt_init(': 'resource $link | resource',
\ 'maxdb_stmt_num_rows(': 'resource $stmt | int',
\ 'maxdb_stmt_param_count(': 'resource $stmt | int',
\ 'maxdb_stmt_prepare(': 'resource $stmt, string $query | bool',
\ 'maxdb_stmt_reset(': 'resource $stmt | bool',
\ 'maxdb_stmt_result_metadata(': 'resource $stmt | resource',
\ 'maxdb_stmt_send_long_data(': 'resource $stmt, int $param_nr, string $data | bool',
\ 'maxdb_stmt_sqlstate(': 'resource $stmt | string',
\ 'maxdb_stmt_store_result(': 'resource $stmt | bool',
\ 'maxdb_store_result(': 'resource $link | resource',
\ 'maxdb_thread_id(': 'resource $link | int',
\ 'maxdb_thread_safe(': 'void | bool',
\ 'maxdb_use_result(': 'resource $link | resource',
\ 'maxdb_warning_count(': 'resource $link | int',
\ 'mb_check_encoding(': '[ string $var = NULL [, string $encoding = mb_internal_encoding()]] | bool',
\ 'mb_convert_case(': 'string $str, int $mode [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_convert_encoding(': 'string $str, string $to_encoding [, mixed $from_encoding] | string',
\ 'mb_convert_kana(': 'string $str [, string $option = "KV" [, string $encoding]] | string',
\ 'mb_convert_variables(': 'string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$...] | string',
\ 'mb_decode_mimeheader(': 'string $str | string',
\ 'mb_decode_numericentity(': 'string $str, array $convmap [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_detect_encoding(': 'string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false]] | string',
\ 'mb_detect_order(': '[ mixed $encoding_list] | mixed',
\ 'mb_encode_mimeheader(': 'string $str [, string $charset [, string $transfer_encoding [, string $linefeed = "\r\n" [, int $indent = 0]]]] | string',
\ 'mb_encode_numericentity(': 'string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex]] | string',
\ 'mb_encoding_aliases(': 'string $encoding | array',
\ 'mb_ereg_match(': 'string $pattern, string $string [, string $option = "msr"] | bool',
\ 'mb_ereg_replace_callback(': 'string $pattern, callable $callback, string $string [, string $option = "msr"] | string',
\ 'mb_ereg_replace(': 'string $pattern, string $replacement, string $string [, string $option = "msr"] | string',
\ 'mb_ereg_search_getpos(': 'void | int',
\ 'mb_ereg_search_getregs(': 'void | array',
\ 'mb_ereg_search_init(': 'string $string [, string $pattern [, string $option = "msr"]] | bool',
\ 'mb_ereg_search_pos(': '[ string $pattern [, string $option = "ms"]] | array',
\ 'mb_ereg_search_regs(': '[ string $pattern [, string $option = "ms"]] | array',
\ 'mb_ereg_search_setpos(': 'int $position | bool',
\ 'mb_ereg_search(': '[ string $pattern [, string $option = "ms"]] | bool',
\ 'mb_ereg(': 'string $pattern, string $string [, array $regs] | int',
\ 'mb_eregi_replace(': 'string $pattern, string $replace, string $string [, string $option = "msri"] | string',
\ 'mb_eregi(': 'string $pattern, string $string [, array $regs] | int',
\ 'mb_get_info(': '[ string $type = "all"] | mixed',
\ 'mb_http_input(': '[ string $type = ""] | mixed',
\ 'mb_http_output(': '[ string $encoding] | mixed',
\ 'mb_internal_encoding(': '[ string $encoding = mb_internal_encoding()] | mixed',
\ 'mb_language(': '[ string $language] | mixed',
\ 'mb_list_encodings(': 'void | array',
\ 'mb_output_handler(': 'string $contents, int $status | string',
\ 'mb_parse_str(': 'string $encoded_string [, array &$result] | bool',
\ 'mb_preferred_mime_name(': 'string $encoding | string',
\ 'mb_regex_encoding(': '[ string $encoding] | mixed',
\ 'mb_regex_set_options(': '[ string $options] | string',
\ 'mb_send_mail(': 'string $to, string $subject, string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL]] | bool',
\ 'mb_split(': 'string $pattern, string $string [, int $limit = -1] | array',
\ 'mb_strcut(': 'string $str, int $start [, int $length [, string $encoding]] | string',
\ 'mb_strimwidth(': 'string $str, int $start, int $width [, string $trimmarker [, string $encoding]] | string',
\ 'mb_stripos(': 'string $haystack, string $needle [, int $offset [, string $encoding]] | int',
\ 'mb_stristr(': 'string $haystack, string $needle [, bool $before_needle = false [, string $encoding]] | string',
\ 'mb_strlen(': 'string $str [, string $encoding] | int',
\ 'mb_strpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding]] | int',
\ 'mb_strrchr(': 'string $haystack, string $needle [, bool $part = false [, string $encoding]] | string',
\ 'mb_strrichr(': 'string $haystack, string $needle [, bool $part = false [, string $encoding]] | string',
\ 'mb_strripos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding]] | int',
\ 'mb_strrpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding]] | int',
\ 'mb_strstr(': 'string $haystack, string $needle [, bool $before_needle = false [, string $encoding]] | string',
\ 'mb_strtolower(': 'string $str [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_strtoupper(': 'string $str [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_strwidth(': 'string $str [, string $encoding] | int',
\ 'mb_substitute_character(': '[ mixed $substrchar] | mixed',
\ 'mb_substr_count(': 'string $haystack, string $needle [, string $encoding] | int',
\ 'mb_substr(': 'string $str, int $start [, int $length [, string $encoding]] | string',
\ 'mcrypt_cbc(': 'int $cipher, string $key, string $data, int $mode [, string $iv] | string',
\ 'mcrypt_cfb(': 'int $cipher, string $key, string $data, int $mode, string $iv | string',
\ 'mcrypt_create_iv(': 'int $size [, int $source = MCRYPT_DEV_RANDOM] | string',
\ 'mcrypt_decrypt(': 'string $cipher, string $key, string $data, string $mode [, string $iv] | string',
\ 'mcrypt_ecb(': 'int $cipher, string $key, string $data, int $mode | string',
\ 'mcrypt_enc_get_algorithms_name(': 'resource $td | string',
\ 'mcrypt_enc_get_block_size(': 'resource $td | int',
\ 'mcrypt_enc_get_iv_size(': 'resource $td | int',
\ 'mcrypt_enc_get_key_size(': 'resource $td | int',
\ 'mcrypt_enc_get_modes_name(': 'resource $td | string',
\ 'mcrypt_enc_get_supported_key_sizes(': 'resource $td | array',
\ 'mcrypt_enc_is_block_algorithm_mode(': 'resource $td | bool',
\ 'mcrypt_enc_is_block_algorithm(': 'resource $td | bool',
\ 'mcrypt_enc_is_block_mode(': 'resource $td | bool',
\ 'mcrypt_enc_self_test(': 'resource $td | int',
\ 'mcrypt_encrypt(': 'string $cipher, string $key, string $data, string $mode [, string $iv] | string',
\ 'mcrypt_generic_deinit(': 'resource $td | bool',
\ 'mcrypt_generic_end(': 'resource $td | bool',
\ 'mcrypt_generic_init(': 'resource $td, string $key, string $iv | int',
\ 'mcrypt_generic(': 'resource $td, string $data | string',
\ 'mcrypt_get_block_size(': 'int $cipher | int',
\ 'mcrypt_get_cipher_name(': 'int $cipher | string',
\ 'mcrypt_get_iv_size(': 'string $cipher, string $mode | int',
\ 'mcrypt_get_key_size(': 'int $cipher | int',
\ 'mcrypt_list_algorithms(': '[ string $lib_dir = ini_get("mcrypt.algorithms_dir")] | array',
\ 'mcrypt_list_modes(': '[ string $lib_dir = ini_get("mcrypt.modes_dir")] | array',
\ 'mcrypt_module_close(': 'resource $td | bool',
\ 'mcrypt_module_get_algo_block_size(': 'string $algorithm [, string $lib_dir] | int',
\ 'mcrypt_module_get_algo_key_size(': 'string $algorithm [, string $lib_dir] | int',
\ 'mcrypt_module_get_supported_key_sizes(': 'string $algorithm [, string $lib_dir] | array',
\ 'mcrypt_module_is_block_algorithm_mode(': 'string $mode [, string $lib_dir] | bool',
\ 'mcrypt_module_is_block_algorithm(': 'string $algorithm [, string $lib_dir] | bool',
\ 'mcrypt_module_is_block_mode(': 'string $mode [, string $lib_dir] | bool',
\ 'mcrypt_module_open(': 'string $algorithm, string $algorithm_directory, string $mode, string $mode_directory | resource',
\ 'mcrypt_module_self_test(': 'string $algorithm [, string $lib_dir] | bool',
\ 'mcrypt_ofb(': 'int $cipher, string $key, string $data, int $mode, string $iv | string',
\ 'md5_file(': 'string $filename [, bool $raw_output = false] | string',
\ 'md5(': 'string $str [, bool $raw_output = false] | string',
\ 'mdecrypt_generic(': 'resource $td, string $data | string',
\ 'memcache_debug(': 'bool $on_off | bool',
\ 'memory_get_peak_usage(': '[ bool $real_usage = false] | int',
\ 'memory_get_usage(': '[ bool $real_usage = false] | int',
\ 'metaphone(': 'string $str [, int $phonemes = 0] | string',
\ 'method_exists(': 'mixed $object, string $method_name | bool',
\ 'mhash_count(': 'void | int',
\ 'mhash_get_block_size(': 'int $hash | int',
\ 'mhash_get_hash_name(': 'int $hash | string',
\ 'mhash_keygen_s2k(': 'int $hash, string $password, string $salt, int $bytes | string',
\ 'mhash(': 'int $hash, string $data [, string $key] | string',
\ 'microtime(': '[ bool $get_as_float = false] | mixed',
\ 'mime_content_type(': 'string $filename | string',
\ 'min(': 'array $values | mixed',
\ 'ming_keypress(': 'string $char | int',
\ 'ming_setcubicthreshold(': 'int $threshold | void',
\ 'ming_setscale(': 'float $scale | void',
\ 'ming_setswfcompression(': 'int $level | void',
\ 'ming_useconstants(': 'int $use | void',
\ 'ming_useswfversion(': 'int $version | void',
\ 'mkdir(': 'string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context]]] | bool',
\ 'mktime(': '[ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1]]]]]]] | int',
\ 'money_format(': 'string $format, float $number | string',
\ 'move_uploaded_file(': 'string $filename, string $destination | bool',
\ 'mqseries_back(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_begin(': 'resource $hconn, array $beginOptions, resource &$compCode, resource &$reason | void',
\ 'mqseries_close(': 'resource $hconn, resource $hobj, int $options, resource &$compCode, resource &$reason | void',
\ 'mqseries_cmit(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_conn(': 'string $qManagerName, resource &$hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_connx(': 'string $qManagerName, array &$connOptions, resource &$hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_disc(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_get(': 'resource $hConn, resource $hObj, array &$md, array &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource &$compCode, resource &$reason | void',
\ 'mqseries_inq(': 'resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength, resource &$charAttr, resource &$compCode, resource &$reason | void',
\ 'mqseries_open(': 'resource $hconn, array &$objDesc, int $option, resource &$hobj, resource &$compCode, resource &$reason | void',
\ 'mqseries_put(': 'resource $hConn, resource $hObj, array &$md, array &$pmo, string $message, resource &$compCode, resource &$reason | void',
\ 'mqseries_put1(': 'resource $hconn, resource &$objDesc, resource &$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource &$reason | void',
\ 'mqseries_set(': 'resource $hconn, resource $hobj, int $selectorcount, array $selectors, int $intattrcount, array $intattrs, int $charattrlength, array $charattrs, resource &$compCode, resource &$reason | void',
\ 'mqseries_strerror(': 'int $reason | string',
\ 'msession_connect(': 'string $host, string $port | bool',
\ 'msession_count(': 'void | int',
\ 'msession_create(': 'string $session [, string $classname [, string $data]] | bool',
\ 'msession_destroy(': 'string $name | bool',
\ 'msession_disconnect(': 'void | void',
\ 'msession_find(': 'string $name, string $value | array',
\ 'msession_get_array(': 'string $session | array',
\ 'msession_get_data(': 'string $session | string',
\ 'msession_get(': 'string $session, string $name, string $value | string',
\ 'msession_inc(': 'string $session, string $name | string',
\ 'msession_list(': 'void | array',
\ 'msession_listvar(': 'string $name | array',
\ 'msession_lock(': 'string $name | int',
\ 'msession_plugin(': 'string $session, string $val [, string $param] | string',
\ 'msession_randstr(': 'int $param | string',
\ 'msession_set_array(': 'string $session, array $tuples | void',
\ 'msession_set_data(': 'string $session, string $value | bool',
\ 'msession_set(': 'string $session, string $name, string $value | bool',
\ 'msession_timeout(': 'string $session [, int $param] | int',
\ 'msession_uniq(': 'int $param [, string $classname [, string $data]] | string',
\ 'msession_unlock(': 'string $session, int $key | int',
\ 'msg_get_queue(': 'int $key [, int $perms = 0666] | resource',
\ 'msg_queue_exists(': 'int $key | bool',
\ 'msg_receive(': 'resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = true [, int $flags = 0 [, int &$errorcode]]] | bool',
\ 'msg_remove_queue(': 'resource $queue | bool',
\ 'msg_send(': 'resource $queue, int $msgtype, mixed $message [, bool $serialize = true [, bool $blocking = true [, int &$errorcode]]] | bool',
\ 'msg_set_queue(': 'resource $queue, array $data | bool',
\ 'msg_stat_queue(': 'resource $queue | array',
\ 'msql_affected_rows(': 'resource $result | int',
\ 'msql_close(': '[ resource $link_identifier] | bool',
\ 'msql_connect(': '[ string $hostname] | resource',
\ 'msql_create_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'msql_data_seek(': 'resource $result, int $row_number | bool',
\ 'msql_db_query(': 'string $database, string $query [, resource $link_identifier] | resource',
\ 'msql_drop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'msql_error(': 'void | string',
\ 'msql_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'msql_fetch_field(': 'resource $result [, int $field_offset = 0] | object',
\ 'msql_fetch_object(': 'resource $result | object',
\ 'msql_fetch_row(': 'resource $result | array',
\ 'msql_field_flags(': 'resource $result, int $field_offset | string',
\ 'msql_field_len(': 'resource $result, int $field_offset | int',
\ 'msql_field_name(': 'resource $result, int $field_offset | string',
\ 'msql_field_seek(': 'resource $result, int $field_offset | bool',
\ 'msql_field_table(': 'resource $result, int $field_offset | int',
\ 'msql_field_type(': 'resource $result, int $field_offset | string',
\ 'msql_free_result(': 'resource $result | bool',
\ 'msql_list_dbs(': '[ resource $link_identifier] | resource',
\ 'msql_list_fields(': 'string $database, string $tablename [, resource $link_identifier] | resource',
\ 'msql_list_tables(': 'string $database [, resource $link_identifier] | resource',
\ 'msql_num_fields(': 'resource $result | int',
\ 'msql_num_rows(': 'resource $query_identifier | int',
\ 'msql_pconnect(': '[ string $hostname] | resource',
\ 'msql_query(': 'string $query [, resource $link_identifier] | resource',
\ 'msql_result(': 'resource $result, int $row [, mixed $field] | string',
\ 'msql_select_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'mssql_bind(': 'resource $stmt, string $param_name, mixed &$var, int $type [, bool $is_output = false [, bool $is_null = false [, int $maxlen = -1]]] | bool',
\ 'mssql_close(': '[ resource $link_identifier] | bool',
\ 'mssql_connect(': '[ string $servername [, string $username [, string $password [, bool $new_link = false]]]] | resource',
\ 'mssql_data_seek(': 'resource $result_identifier, int $row_number | bool',
\ 'mssql_execute(': 'resource $stmt [, bool $skip_results = false] | mixed',
\ 'mssql_fetch_array(': 'resource $result [, int $result_type = MSSQL_BOTH] | array',
\ 'mssql_fetch_assoc(': 'resource $result_id | array',
\ 'mssql_fetch_batch(': 'resource $result | int',
\ 'mssql_fetch_field(': 'resource $result [, int $field_offset = -1] | object',
\ 'mssql_fetch_object(': 'resource $result | object',
\ 'mssql_fetch_row(': 'resource $result | array',
\ 'mssql_field_length(': 'resource $result [, int $offset = -1] | int',
\ 'mssql_field_name(': 'resource $result [, int $offset = -1] | string',
\ 'mssql_field_seek(': 'resource $result, int $field_offset | bool',
\ 'mssql_field_type(': 'resource $result [, int $offset = -1] | string',
\ 'mssql_free_result(': 'resource $result | bool',
\ 'mssql_free_statement(': 'resource $stmt | bool',
\ 'mssql_get_last_message(': 'void | string',
\ 'mssql_guid_string(': 'string $binary [, bool $short_format = false] | string',
\ 'mssql_init(': 'string $sp_name [, resource $link_identifier] | resource',
\ 'mssql_min_error_severity(': 'int $severity | void',
\ 'mssql_min_message_severity(': 'int $severity | void',
\ 'mssql_next_result(': 'resource $result_id | bool',
\ 'mssql_num_fields(': 'resource $result | int',
\ 'mssql_num_rows(': 'resource $result | int',
\ 'mssql_pconnect(': '[ string $servername [, string $username [, string $password [, bool $new_link = false]]]] | resource',
\ 'mssql_query(': 'string $query [, resource $link_identifier [, int $batch_size = 0]] | mixed',
\ 'mssql_result(': 'resource $result, int $row, mixed $field | string',
\ 'mssql_rows_affected(': 'resource $link_identifier | int',
\ 'mssql_select_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'mt_getrandmax(': 'void | int',
\ 'mt_rand(': 'void | int',
\ 'mt_srand(': '[ int $seed] | void',
\ 'mysql_affected_rows(': '[ resource $link_identifier = NULL] | int',
\ 'mysql_client_encoding(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_close(': '[ resource $link_identifier = NULL] | bool',
\ 'mysql_connect(': '[ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = false [, int $client_flags = 0]]]]] | resource',
\ 'mysql_create_db(': 'string $database_name [, resource $link_identifier = NULL] | bool',
\ 'mysql_data_seek(': 'resource $result, int $row_number | bool',
\ 'mysql_db_name(': 'resource $result, int $row [, mixed $field = NULL] | string',
\ 'mysql_db_query(': 'string $database, string $query [, resource $link_identifier = NULL] | resource',
\ 'mysql_drop_db(': 'string $database_name [, resource $link_identifier = NULL] | bool',
\ 'mysql_errno(': '[ resource $link_identifier = NULL] | int',
\ 'mysql_error(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_escape_string(': 'string $unescaped_string | string',
\ 'mysql_fetch_array(': 'resource $result [, int $result_type = MYSQL_BOTH] | array',
\ 'mysql_fetch_assoc(': 'resource $result | array',
\ 'mysql_fetch_field(': 'resource $result [, int $field_offset = 0] | object',
\ 'mysql_fetch_lengths(': 'resource $result | array',
\ 'mysql_fetch_object(': 'resource $result [, string $class_name [, array $params]] | object',
\ 'mysql_fetch_row(': 'resource $result | array',
\ 'mysql_field_flags(': 'resource $result, int $field_offset | string',
\ 'mysql_field_len(': 'resource $result, int $field_offset | int',
\ 'mysql_field_name(': 'resource $result, int $field_offset | string',
\ 'mysql_field_seek(': 'resource $result, int $field_offset | bool',
\ 'mysql_field_table(': 'resource $result, int $field_offset | string',
\ 'mysql_field_type(': 'resource $result, int $field_offset | string',
\ 'mysql_free_result(': 'resource $result | bool',
\ 'mysql_get_client_info(': 'void | string',
\ 'mysql_get_host_info(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_get_proto_info(': '[ resource $link_identifier = NULL] | int',
\ 'mysql_get_server_info(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_info(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_insert_id(': '[ resource $link_identifier = NULL] | int',
\ 'mysql_list_dbs(': '[ resource $link_identifier = NULL] | resource',
\ 'mysql_list_fields(': 'string $database_name, string $table_name [, resource $link_identifier = NULL] | resource',
\ 'mysql_list_processes(': '[ resource $link_identifier = NULL] | resource',
\ 'mysql_list_tables(': 'string $database [, resource $link_identifier = NULL] | resource',
\ 'mysql_num_fields(': 'resource $result | int',
\ 'mysql_num_rows(': 'resource $result | int',
\ 'mysql_pconnect(': '[ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0]]]] | resource',
\ 'mysql_ping(': '[ resource $link_identifier = NULL] | bool',
\ 'mysql_query(': 'string $query [, resource $link_identifier = NULL] | resource',
\ 'mysql_real_escape_string(': 'string $unescaped_string [, resource $link_identifier = NULL] | string',
\ 'mysql_result(': 'resource $result, int $row [, mixed $field = 0] | string',
\ 'mysql_select_db(': 'string $database_name [, resource $link_identifier = NULL] | bool',
\ 'mysql_set_charset(': 'string $charset [, resource $link_identifier = NULL] | bool',
\ 'mysql_stat(': '[ resource $link_identifier = NULL] | string',
\ 'mysql_tablename(': 'resource $result, int $i | string',
\ 'mysql_thread_id(': '[ resource $link_identifier = NULL] | int',
\ 'mysql_unbuffered_query(': 'string $query [, resource $link_identifier = NULL] | resource',
\ 'mysqli_disable_reads_from_master(': 'mysqli $link | bool',
\ 'mysqli_disable_rpl_parse(': 'mysqli $link | bool',
\ 'mysqli_enable_reads_from_master(': 'mysqli $link | bool',
\ 'mysqli_enable_rpl_parse(': 'mysqli $link | bool',
\ 'mysqli_get_cache_stats(': 'void | array',
\ 'mysqli_master_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_rpl_parse_enabled(': 'mysqli $link | int',
\ 'mysqli_rpl_probe(': 'mysqli $link | bool',
\ 'mysqli_slave_query(': 'mysqli $link, string $query | bool',
\ 'mysqlnd_memcache_get_config(': 'mixed $connection | array',
\ 'mysqlnd_memcache_set(': 'mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback]]] | bool',
\ 'mysqlnd_ms_get_last_gtid(': 'mixed $connection | string',
\ 'mysqlnd_ms_get_last_used_connection(': 'mixed $connection | array',
\ 'mysqlnd_ms_get_stats(': 'void | array',
\ 'mysqlnd_ms_match_wild(': 'string $table_name, string $wildcard | bool',
\ 'mysqlnd_ms_query_is_select(': 'string $query | int',
\ 'mysqlnd_ms_set_qos(': 'mixed $connection, int $service_level [, int $service_level_option [, mixed $option_value]] | bool',
\ 'mysqlnd_ms_set_user_pick_server(': 'string $function | bool',
\ 'mysqlnd_qc_clear_cache(': 'void | bool',
\ 'mysqlnd_qc_get_available_handlers(': 'void | array',
\ 'mysqlnd_qc_get_cache_info(': 'void | array',
\ 'mysqlnd_qc_get_core_stats(': 'void | array',
\ 'mysqlnd_qc_get_normalized_query_trace_log(': 'void | array',
\ 'mysqlnd_qc_get_query_trace_log(': 'void | array',
\ 'mysqlnd_qc_set_cache_condition(': 'int $condition_type, mixed $condition, mixed $condition_option | bool',
\ 'mysqlnd_qc_set_is_select(': 'string $callback | mixed',
\ 'mysqlnd_qc_set_storage_handler(': 'string $handler | bool',
\ 'mysqlnd_qc_set_user_handlers(': 'string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache | bool',
\ 'mysqlnd_uh_convert_to_mysqlnd(': 'mysqli &$mysql_connection | resource',
\ 'mysqlnd_uh_set_connection_proxy(': 'MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection] | bool',
\ 'mysqlnd_uh_set_statement_proxy(': 'MysqlndUhStatement &$statement_proxy | bool',
\ 'natcasesort(': 'array &$array | bool',
\ 'natsort(': 'array &$array | bool',
\ 'ncurses_addch(': 'int $ch | int',
\ 'ncurses_addchnstr(': 'string $s, int $n | int',
\ 'ncurses_addchstr(': 'string $s | int',
\ 'ncurses_addnstr(': 'string $s, int $n | int',
\ 'ncurses_addstr(': 'string $text | int',
\ 'ncurses_assume_default_colors(': 'int $fg, int $bg | int',
\ 'ncurses_attroff(': 'int $attributes | int',
\ 'ncurses_attron(': 'int $attributes | int',
\ 'ncurses_attrset(': 'int $attributes | int',
\ 'ncurses_baudrate(': 'void | int',
\ 'ncurses_beep(': 'void | int',
\ 'ncurses_bkgd(': 'int $attrchar | int',
\ 'ncurses_bkgdset(': 'int $attrchar | void',
\ 'ncurses_border(': 'int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner | int',
\ 'ncurses_bottom_panel(': 'resource $panel | int',
\ 'ncurses_can_change_color(': 'void | bool',
\ 'ncurses_cbreak(': 'void | bool',
\ 'ncurses_clear(': 'void | bool',
\ 'ncurses_clrtobot(': 'void | bool',
\ 'ncurses_clrtoeol(': 'void | bool',
\ 'ncurses_color_content(': 'int $color, int &$r, int &$g, int &$b | int',
\ 'ncurses_color_set(': 'int $pair | int',
\ 'ncurses_curs_set(': 'int $visibility | int',
\ 'ncurses_def_prog_mode(': 'void | bool',
\ 'ncurses_def_shell_mode(': 'void | bool',
\ 'ncurses_define_key(': 'string $definition, int $keycode | int',
\ 'ncurses_del_panel(': 'resource $panel | bool',
\ 'ncurses_delay_output(': 'int $milliseconds | int',
\ 'ncurses_delch(': 'void | bool',
\ 'ncurses_deleteln(': 'void | bool',
\ 'ncurses_delwin(': 'resource $window | bool',
\ 'ncurses_doupdate(': 'void | bool',
\ 'ncurses_echo(': 'void | bool',
\ 'ncurses_echochar(': 'int $character | int',
\ 'ncurses_end(': 'void | int',
\ 'ncurses_erase(': 'void | bool',
\ 'ncurses_erasechar(': 'void | string',
\ 'ncurses_filter(': 'void | void',
\ 'ncurses_flash(': 'void | bool',
\ 'ncurses_flushinp(': 'void | bool',
\ 'ncurses_getch(': 'void | int',
\ 'ncurses_getmaxyx(': 'resource $window, int &$y, int &$x | void',
\ 'ncurses_getmouse(': 'array &$mevent | bool',
\ 'ncurses_getyx(': 'resource $window, int &$y, int &$x | void',
\ 'ncurses_halfdelay(': 'int $tenth | int',
\ 'ncurses_has_colors(': 'void | bool',
\ 'ncurses_has_ic(': 'void | bool',
\ 'ncurses_has_il(': 'void | bool',
\ 'ncurses_has_key(': 'int $keycode | int',
\ 'ncurses_hide_panel(': 'resource $panel | int',
\ 'ncurses_hline(': 'int $charattr, int $n | int',
\ 'ncurses_inch(': 'void | string',
\ 'ncurses_init_color(': 'int $color, int $r, int $g, int $b | int',
\ 'ncurses_init_pair(': 'int $pair, int $fg, int $bg | int',
\ 'ncurses_init(': 'void | void',
\ 'ncurses_insch(': 'int $character | int',
\ 'ncurses_insdelln(': 'int $count | int',
\ 'ncurses_insertln(': 'void | int',
\ 'ncurses_insstr(': 'string $text | int',
\ 'ncurses_instr(': 'string &$buffer | int',
\ 'ncurses_isendwin(': 'void | bool',
\ 'ncurses_keyok(': 'int $keycode, bool $enable | int',
\ 'ncurses_keypad(': 'resource $window, bool $bf | int',
\ 'ncurses_killchar(': 'void | string',
\ 'ncurses_longname(': 'void | string',
\ 'ncurses_meta(': 'resource $window, bool $8bit | int',
\ 'ncurses_mouse_trafo(': 'int &$y, int &$x, bool $toscreen | bool',
\ 'ncurses_mouseinterval(': 'int $milliseconds | int',
\ 'ncurses_mousemask(': 'int $newmask, int &$oldmask | int',
\ 'ncurses_move_panel(': 'resource $panel, int $startx, int $starty | int',
\ 'ncurses_move(': 'int $y, int $x | int',
\ 'ncurses_mvaddch(': 'int $y, int $x, int $c | int',
\ 'ncurses_mvaddchnstr(': 'int $y, int $x, string $s, int $n | int',
\ 'ncurses_mvaddchstr(': 'int $y, int $x, string $s | int',
\ 'ncurses_mvaddnstr(': 'int $y, int $x, string $s, int $n | int',
\ 'ncurses_mvaddstr(': 'int $y, int $x, string $s | int',
\ 'ncurses_mvcur(': 'int $old_y, int $old_x, int $new_y, int $new_x | int',
\ 'ncurses_mvdelch(': 'int $y, int $x | int',
\ 'ncurses_mvgetch(': 'int $y, int $x | int',
\ 'ncurses_mvhline(': 'int $y, int $x, int $attrchar, int $n | int',
\ 'ncurses_mvinch(': 'int $y, int $x | int',
\ 'ncurses_mvvline(': 'int $y, int $x, int $attrchar, int $n | int',
\ 'ncurses_mvwaddstr(': 'resource $window, int $y, int $x, string $text | int',
\ 'ncurses_napms(': 'int $milliseconds | int',
\ 'ncurses_new_panel(': 'resource $window | resource',
\ 'ncurses_newpad(': 'int $rows, int $cols | resource',
\ 'ncurses_newwin(': 'int $rows, int $cols, int $y, int $x | resource',
\ 'ncurses_nl(': 'void | bool',
\ 'ncurses_nocbreak(': 'void | bool',
\ 'ncurses_noecho(': 'void | bool',
\ 'ncurses_nonl(': 'void | bool',
\ 'ncurses_noqiflush(': 'void | void',
\ 'ncurses_noraw(': 'void | bool',
\ 'ncurses_pair_content(': 'int $pair, int &$f, int &$b | int',
\ 'ncurses_panel_above(': 'resource $panel | resource',
\ 'ncurses_panel_below(': 'resource $panel | resource',
\ 'ncurses_panel_window(': 'resource $panel | resource',
\ 'ncurses_pnoutrefresh(': 'resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol | int',
\ 'ncurses_prefresh(': 'resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol | int',
\ 'ncurses_putp(': 'string $text | int',
\ 'ncurses_qiflush(': 'void | void',
\ 'ncurses_raw(': 'void | bool',
\ 'ncurses_refresh(': 'int $ch | int',
\ 'ncurses_replace_panel(': 'resource $panel, resource $window | int',
\ 'ncurses_reset_prog_mode(': 'void | int',
\ 'ncurses_reset_shell_mode(': 'void | int',
\ 'ncurses_resetty(': 'void | bool',
\ 'ncurses_savetty(': 'void | bool',
\ 'ncurses_scr_dump(': 'string $filename | int',
\ 'ncurses_scr_init(': 'string $filename | int',
\ 'ncurses_scr_restore(': 'string $filename | int',
\ 'ncurses_scr_set(': 'string $filename | int',
\ 'ncurses_scrl(': 'int $count | int',
\ 'ncurses_show_panel(': 'resource $panel | int',
\ 'ncurses_slk_attr(': 'void | int',
\ 'ncurses_slk_attroff(': 'int $intarg | int',
\ 'ncurses_slk_attron(': 'int $intarg | int',
\ 'ncurses_slk_attrset(': 'int $intarg | int',
\ 'ncurses_slk_clear(': 'void | bool',
\ 'ncurses_slk_color(': 'int $intarg | int',
\ 'ncurses_slk_init(': 'int $format | bool',
\ 'ncurses_slk_noutrefresh(': 'void | bool',
\ 'ncurses_slk_refresh(': 'void | int',
\ 'ncurses_slk_restore(': 'void | int',
\ 'ncurses_slk_set(': 'int $labelnr, string $label, int $format | bool',
\ 'ncurses_slk_touch(': 'void | int',
\ 'ncurses_standend(': 'void | int',
\ 'ncurses_standout(': 'void | int',
\ 'ncurses_start_color(': 'void | int',
\ 'ncurses_termattrs(': 'void | bool',
\ 'ncurses_termname(': 'void | string',
\ 'ncurses_timeout(': 'int $millisec | void',
\ 'ncurses_top_panel(': 'resource $panel | int',
\ 'ncurses_typeahead(': 'int $fd | int',
\ 'ncurses_ungetch(': 'int $keycode | int',
\ 'ncurses_ungetmouse(': 'array $mevent | bool',
\ 'ncurses_update_panels(': 'void | void',
\ 'ncurses_use_default_colors(': 'void | bool',
\ 'ncurses_use_env(': 'bool $flag | void',
\ 'ncurses_use_extended_names(': 'bool $flag | int',
\ 'ncurses_vidattr(': 'int $intarg | int',
\ 'ncurses_vline(': 'int $charattr, int $n | int',
\ 'ncurses_waddch(': 'resource $window, int $ch | int',
\ 'ncurses_waddstr(': 'resource $window, string $str [, int $n] | int',
\ 'ncurses_wattroff(': 'resource $window, int $attrs | int',
\ 'ncurses_wattron(': 'resource $window, int $attrs | int',
\ 'ncurses_wattrset(': 'resource $window, int $attrs | int',
\ 'ncurses_wborder(': 'resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner | int',
\ 'ncurses_wclear(': 'resource $window | int',
\ 'ncurses_wcolor_set(': 'resource $window, int $color_pair | int',
\ 'ncurses_werase(': 'resource $window | int',
\ 'ncurses_wgetch(': 'resource $window | int',
\ 'ncurses_whline(': 'resource $window, int $charattr, int $n | int',
\ 'ncurses_wmouse_trafo(': 'resource $window, int &$y, int &$x, bool $toscreen | bool',
\ 'ncurses_wmove(': 'resource $window, int $y, int $x | int',
\ 'ncurses_wnoutrefresh(': 'resource $window | int',
\ 'ncurses_wrefresh(': 'resource $window | int',
\ 'ncurses_wstandend(': 'resource $window | int',
\ 'ncurses_wstandout(': 'resource $window | int',
\ 'ncurses_wvline(': 'resource $window, int $charattr, int $n | int',
\ 'newt_bell(': 'void | void',
\ 'newt_button_bar(': 'array &$buttons | resource',
\ 'newt_button(': 'int $left, int $top, string $text | resource',
\ 'newt_centered_window(': 'int $width, int $height [, string $title] | int',
\ 'newt_checkbox_get_value(': 'resource $checkbox | string',
\ 'newt_checkbox_set_flags(': 'resource $checkbox, int $flags, int $sense | void',
\ 'newt_checkbox_set_value(': 'resource $checkbox, string $value | void',
\ 'newt_checkbox_tree_add_item(': 'resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $...] | void',
\ 'newt_checkbox_tree_find_item(': 'resource $checkboxtree, mixed $data | array',
\ 'newt_checkbox_tree_get_current(': 'resource $checkboxtree | mixed',
\ 'newt_checkbox_tree_get_entry_value(': 'resource $checkboxtree, mixed $data | string',
\ 'newt_checkbox_tree_get_multi_selection(': 'resource $checkboxtree, string $seqnum | array',
\ 'newt_checkbox_tree_get_selection(': 'resource $checkboxtree | array',
\ 'newt_checkbox_tree_multi(': 'int $left, int $top, int $height, string $seq [, int $flags] | resource',
\ 'newt_checkbox_tree_set_current(': 'resource $checkboxtree, mixed $data | void',
\ 'newt_checkbox_tree_set_entry_value(': 'resource $checkboxtree, mixed $data, string $value | void',
\ 'newt_checkbox_tree_set_entry(': 'resource $checkboxtree, mixed $data, string $text | void',
\ 'newt_checkbox_tree_set_width(': 'resource $checkbox_tree, int $width | void',
\ 'newt_checkbox_tree(': 'int $left, int $top, int $height [, int $flags] | resource',
\ 'newt_checkbox(': 'int $left, int $top, string $text, string $def_value [, string $seq] | resource',
\ 'newt_clear_key_buffer(': 'void | void',
\ 'newt_cls(': 'void | void',
\ 'newt_compact_button(': 'int $left, int $top, string $text | resource',
\ 'newt_component_add_callback(': 'resource $component, mixed $func_name, mixed $data | void',
\ 'newt_component_takes_focus(': 'resource $component, bool $takes_focus | void',
\ 'newt_create_grid(': 'int $cols, int $rows | resource',
\ 'newt_cursor_off(': 'void | void',
\ 'newt_cursor_on(': 'void | void',
\ 'newt_delay(': 'int $microseconds | void',
\ 'newt_draw_form(': 'resource $form | void',
\ 'newt_draw_root_text(': 'int $left, int $top, string $text | void',
\ 'newt_entry_get_value(': 'resource $entry | string',
\ 'newt_entry_set_filter(': 'resource $entry, callable $filter, mixed $data | void',
\ 'newt_entry_set_flags(': 'resource $entry, int $flags, int $sense | void',
\ 'newt_entry_set(': 'resource $entry, string $value [, bool $cursor_at_end] | void',
\ 'newt_entry(': 'int $left, int $top, int $width [, string $init_value [, int $flags]] | resource',
\ 'newt_finished(': 'void | int',
\ 'newt_form_add_component(': 'resource $form, resource $component | void',
\ 'newt_form_add_components(': 'resource $form, array $components | void',
\ 'newt_form_add_hot_key(': 'resource $form, int $key | void',
\ 'newt_form_destroy(': 'resource $form | void',
\ 'newt_form_get_current(': 'resource $form | resource',
\ 'newt_form_run(': 'resource $form, array &$exit_struct | void',
\ 'newt_form_set_background(': 'resource $from, int $background | void',
\ 'newt_form_set_height(': 'resource $form, int $height | void',
\ 'newt_form_set_size(': 'resource $form | void',
\ 'newt_form_set_timer(': 'resource $form, int $milliseconds | void',
\ 'newt_form_set_width(': 'resource $form, int $width | void',
\ 'newt_form_watch_fd(': 'resource $form, resource $stream [, int $flags] | void',
\ 'newt_form(': '[ resource $vert_bar [, string $help [, int $flags]]] | resource',
\ 'newt_get_screen_size(': 'int &$cols, int &$rows | void',
\ 'newt_grid_add_components_to_form(': 'resource $grid, resource $form, bool $recurse | void',
\ 'newt_grid_basic_window(': 'resource $text, resource $middle, resource $buttons | resource',
\ 'newt_grid_free(': 'resource $grid, bool $recurse | void',
\ 'newt_grid_get_size(': 'resouce $grid, int &$width, int &$height | void',
\ 'newt_grid_h_close_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_h_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_place(': 'resource $grid, int $left, int $top | void',
\ 'newt_grid_set_field(': 'resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags] | void',
\ 'newt_grid_simple_window(': 'resource $text, resource $middle, resource $buttons | resource',
\ 'newt_grid_v_close_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_v_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_wrapped_window_at(': 'resource $grid, string $title, int $left, int $top | void',
\ 'newt_grid_wrapped_window(': 'resource $grid, string $title | void',
\ 'newt_init(': 'void | int',
\ 'newt_label_set_text(': 'resource $label, string $text | void',
\ 'newt_label(': 'int $left, int $top, string $text | resource',
\ 'newt_listbox_append_entry(': 'resource $listbox, string $text, mixed $data | void',
\ 'newt_listbox_clear_selection(': 'resource $listbox | void',
\ 'newt_listbox_clear(': 'resource $listobx | void',
\ 'newt_listbox_delete_entry(': 'resource $listbox, mixed $key | void',
\ 'newt_listbox_get_current(': 'resource $listbox | string',
\ 'newt_listbox_get_selection(': 'resource $listbox | array',
\ 'newt_listbox_insert_entry(': 'resource $listbox, string $text, mixed $data, mixed $key | void',
\ 'newt_listbox_item_count(': 'resource $listbox | int',
\ 'newt_listbox_select_item(': 'resource $listbox, mixed $key, int $sense | void',
\ 'newt_listbox_set_current_by_key(': 'resource $listbox, mixed $key | void',
\ 'newt_listbox_set_current(': 'resource $listbox, int $num | void',
\ 'newt_listbox_set_data(': 'resource $listbox, int $num, mixed $data | void',
\ 'newt_listbox_set_entry(': 'resource $listbox, int $num, string $text | void',
\ 'newt_listbox_set_width(': 'resource $listbox, int $width | void',
\ 'newt_listbox(': 'int $left, int $top, int $height [, int $flags] | resource',
\ 'newt_listitem_get_data(': 'resource $item | mixed',
\ 'newt_listitem_set(': 'resource $item, string $text | void',
\ 'newt_listitem(': 'int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags] | resource',
\ 'newt_open_window(': 'int $left, int $top, int $width, int $height [, string $title] | int',
\ 'newt_pop_help_line(': 'void | void',
\ 'newt_pop_window(': 'void | void',
\ 'newt_push_help_line(': '[ string $text] | void',
\ 'newt_radio_get_current(': 'resource $set_member | resource',
\ 'newt_radiobutton(': 'int $left, int $top, string $text, bool $is_default [, resource $prev_button] | resource',
\ 'newt_redraw_help_line(': 'void | void',
\ 'newt_reflow_text(': 'string $text, int $width, int $flex_down, int $flex_up, int &$actual_width, int &$actual_height | string',
\ 'newt_refresh(': 'void | void',
\ 'newt_resize_screen(': '[ bool $redraw] | void',
\ 'newt_resume(': 'void | void',
\ 'newt_run_form(': 'resource $form | resource',
\ 'newt_scale_set(': 'resource $scale, int $amount | void',
\ 'newt_scale(': 'int $left, int $top, int $width, int $full_value | resource',
\ 'newt_scrollbar_set(': 'resource $scrollbar, int $where, int $total | void',
\ 'newt_set_help_callback(': 'mixed $function | void',
\ 'newt_set_suspend_callback(': 'callable $function, mixed $data | void',
\ 'newt_suspend(': 'void | void',
\ 'newt_textbox_get_num_lines(': 'resource $textbox | int',
\ 'newt_textbox_reflowed(': 'int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags] | resource',
\ 'newt_textbox_set_height(': 'resource $textbox, int $height | void',
\ 'newt_textbox_set_text(': 'resource $textbox, string $text | void',
\ 'newt_textbox(': 'int $left, int $top, int $width, int $height [, int $flags] | resource',
\ 'newt_vertical_scrollbar(': 'int $left, int $top, int $height [, int $normal_colorset [, int $thumb_colorset]] | resource',
\ 'newt_wait_for_key(': 'void | void',
\ 'newt_win_choice(': 'string $title, string $button1_text, string $button2_text, string $format [, mixed $args [, mixed $...]] | int',
\ 'newt_win_entries(': 'string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items, string $button1 [, string $...] | int',
\ 'newt_win_menu(': 'string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem [, string $button1 [, string $...]] | int',
\ 'newt_win_message(': 'string $title, string $button_text, string $format [, mixed $args [, mixed $...]] | void',
\ 'newt_win_messagev(': 'string $title, string $button_text, string $format, array $args | void',
\ 'newt_win_ternary(': 'string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args [, mixed $...]] | int',
\ 'next(': 'array &$array | mixed',
\ 'ngettext(': 'string $msgid1, string $msgid2, int $n | string',
\ 'nl_langinfo(': 'int $item | string',
\ 'nl2br(': 'string $string [, bool $is_xhtml = true] | string',
\ 'notes_body(': 'string $server, string $mailbox, int $msg_number | array',
\ 'notes_copy_db(': 'string $from_database_name, string $to_database_name | bool',
\ 'notes_create_db(': 'string $database_name | bool',
\ 'notes_create_note(': 'string $database_name, string $form_name | bool',
\ 'notes_drop_db(': 'string $database_name | bool',
\ 'notes_find_note(': 'string $database_name, string $name [, string $type] | int',
\ 'notes_header_info(': 'string $server, string $mailbox, int $msg_number | object',
\ 'notes_list_msgs(': 'string $db | bool',
\ 'notes_mark_read(': 'string $database_name, string $user_name, string $note_id | bool',
\ 'notes_mark_unread(': 'string $database_name, string $user_name, string $note_id | bool',
\ 'notes_nav_create(': 'string $database_name, string $name | bool',
\ 'notes_search(': 'string $database_name, string $keywords | array',
\ 'notes_unread(': 'string $database_name, string $user_name | array',
\ 'notes_version(': 'string $database_name | float',
\ 'nsapi_request_headers(': 'void | array',
\ 'nsapi_response_headers(': 'void | array',
\ 'nsapi_virtual(': 'string $uri | bool',
\ 'nthmac(': 'string $clent, string $data | string',
\ 'number_format(': 'float $number [, int $decimals = 0] | string',
\ 'oauth_get_sbs(': 'string $http_method, string $uri [, array $request_parameters] | string',
\ 'oauth_urlencode(': 'string $uri | string',
\ 'ob_clean(': 'void | void',
\ 'ob_deflatehandler(': 'string $data, int $mode | string',
\ 'ob_end_clean(': 'void | bool',
\ 'ob_end_flush(': 'void | bool',
\ 'ob_etaghandler(': 'string $data, int $mode | string',
\ 'ob_flush(': 'void | void',
\ 'ob_get_clean(': 'void | string',
\ 'ob_get_contents(': 'void | string',
\ 'ob_get_flush(': 'void | string',
\ 'ob_get_length(': 'void | int',
\ 'ob_get_level(': 'void | int',
\ 'ob_get_status(': '[ bool $full_status = FALSE] | array',
\ 'ob_gzhandler(': 'string $buffer, int $mode | string',
\ 'ob_iconv_handler(': 'string $contents, int $status | string',
\ 'ob_implicit_flush(': '[ int $flag = true] | void',
\ 'ob_inflatehandler(': 'string $data, int $mode | string',
\ 'ob_list_handlers(': 'void | array',
\ 'ob_start(': '[ callable $output_callback [, int $chunk_size = 0 [, bool $erase = true]]] | bool',
\ 'ob_tidyhandler(': 'string $input [, int $mode] | string',
\ 'oci_bind_array_by_name(': 'resource $statement, string $name, array &$var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC]] | bool',
\ 'oci_bind_by_name(': 'resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]] | bool',
\ 'oci_cancel(': 'resource $statement | bool',
\ 'oci_client_version(': 'void | string',
\ 'oci_close(': 'resource $connection | bool',
\ 'oci_commit(': 'resource $connection | bool',
\ 'oci_connect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_define_by_name(': 'resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR] | bool',
\ 'oci_error(': '[ resource $resource] | array',
\ 'oci_execute(': 'resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS] | bool',
\ 'oci_fetch_all(': 'resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]] | int',
\ 'oci_fetch_array(': 'resource $statement [, int $mode] | array',
\ 'oci_fetch_assoc(': 'resource $statement | array',
\ 'oci_fetch_object(': 'resource $statement | object',
\ 'oci_fetch_row(': 'resource $statement | array',
\ 'oci_fetch(': 'resource $statement | bool',
\ 'oci_field_is_null(': 'resource $statement, mixed $field | bool',
\ 'oci_field_name(': 'resource $statement, int $field | string',
\ 'oci_field_precision(': 'resource $statement, int $field | int',
\ 'oci_field_scale(': 'resource $statement, int $field | int',
\ 'oci_field_size(': 'resource $statement, mixed $field | int',
\ 'oci_field_type_raw(': 'resource $statement, int $field | int',
\ 'oci_field_type(': 'resource $statement, int $field | mixed',
\ 'oci_free_descriptor(': 'resource $descriptor | bool',
\ 'oci_free_statement(': 'resource $statement | bool',
\ 'oci_internal_debug(': 'bool $onoff | void',
\ 'oci_lob_copy(': 'OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = 0] | bool',
\ 'oci_lob_is_equal(': 'OCI-Lob $lob1, OCI-Lob $lob2 | bool',
\ 'oci_new_collection(': 'resource $connection, string $tdo [, string $schema = NULL] | OCI-Collection',
\ 'oci_new_connect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_new_cursor(': 'resource $connection | resource',
\ 'oci_new_descriptor(': 'resource $connection [, int $type = OCI_DTYPE_LOB] | OCI-Lob',
\ 'oci_num_fields(': 'resource $statement | int',
\ 'oci_num_rows(': 'resource $statement | int',
\ 'oci_parse(': 'resource $connection, string $sql_text | resource',
\ 'oci_password_change(': 'resource $connection, string $username, string $old_password, string $new_password | bool',
\ 'oci_pconnect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_result(': 'resource $statement, mixed $field | mixed',
\ 'oci_rollback(': 'resource $connection | bool',
\ 'oci_server_version(': 'resource $connection | string',
\ 'oci_set_action(': 'resource $connection, string $action_name | bool',
\ 'oci_set_client_identifier(': 'resource $connection, string $client_identifier | bool',
\ 'oci_set_client_info(': 'resource $connection, string $client_info | bool',
\ 'oci_set_edition(': 'string $edition | bool',
\ 'oci_set_module_name(': 'resource $connection, string $module_name | bool',
\ 'oci_set_prefetch(': 'resource $statement, int $rows | bool',
\ 'oci_statement_type(': 'resource $statement | string',
\ 'ocifetchinto(': 'resource $statement, array &$result [, int $mode = OCI_ASSOC + OCI_NUM] | int',
\ 'octdec(': 'string $octal_string | number',
\ 'odbc_autocommit(': 'resource $connection_id [, bool $OnOff = false] | mixed',
\ 'odbc_binmode(': 'resource $result_id, int $mode | bool',
\ 'odbc_close_all(': 'void | void',
\ 'odbc_close(': 'resource $connection_id | void',
\ 'odbc_columnprivileges(': 'resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name | resource',
\ 'odbc_columns(': 'resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name]]]] | resource',
\ 'odbc_commit(': 'resource $connection_id | bool',
\ 'odbc_connect(': 'string $dsn, string $user, string $password [, int $cursor_type] | resource',
\ 'odbc_cursor(': 'resource $result_id | string',
\ 'odbc_data_source(': 'resource $connection_id, int $fetch_type | array',
\ 'odbc_error(': '[ resource $connection_id] | string',
\ 'odbc_errormsg(': '[ resource $connection_id] | string',
\ 'odbc_exec(': 'resource $connection_id, string $query_string [, int $flags] | resource',
\ 'odbc_execute(': 'resource $result_id [, array $parameters_array] | bool',
\ 'odbc_fetch_array(': 'resource $result [, int $rownumber] | array',
\ 'odbc_fetch_into(': 'resource $result_id, array &$result_array [, int $rownumber] | int',
\ 'odbc_fetch_object(': 'resource $result [, int $rownumber] | object',
\ 'odbc_fetch_row(': 'resource $result_id [, int $row_number] | bool',
\ 'odbc_field_len(': 'resource $result_id, int $field_number | int',
\ 'odbc_field_name(': 'resource $result_id, int $field_number | string',
\ 'odbc_field_num(': 'resource $result_id, string $field_name | int',
\ 'odbc_field_scale(': 'resource $result_id, int $field_number | int',
\ 'odbc_field_type(': 'resource $result_id, int $field_number | string',
\ 'odbc_foreignkeys(': 'resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table | resource',
\ 'odbc_free_result(': 'resource $result_id | bool',
\ 'odbc_gettypeinfo(': 'resource $connection_id [, int $data_type] | resource',
\ 'odbc_longreadlen(': 'resource $result_id, int $length | bool',
\ 'odbc_next_result(': 'resource $result_id | bool',
\ 'odbc_num_fields(': 'resource $result_id | int',
\ 'odbc_num_rows(': 'resource $result_id | int',
\ 'odbc_pconnect(': 'string $dsn, string $user, string $password [, int $cursor_type] | resource',
\ 'odbc_prepare(': 'resource $connection_id, string $query_string | resource',
\ 'odbc_primarykeys(': 'resource $connection_id, string $qualifier, string $owner, string $table | resource',
\ 'odbc_procedurecolumns(': 'resource $connection_id | resource',
\ 'odbc_procedures(': 'resource $connection_id | resource',
\ 'odbc_result_all(': 'resource $result_id [, string $format] | int',
\ 'odbc_result(': 'resource $result_id, mixed $field | mixed',
\ 'odbc_rollback(': 'resource $connection_id | bool',
\ 'odbc_setoption(': 'resource $id, int $function, int $option, int $param | bool',
\ 'odbc_specialcolumns(': 'resource $connection_id, int $type, string $qualifier, string $owner, string $table, int $scope, int $nullable | resource',
\ 'odbc_statistics(': 'resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy | resource',
\ 'odbc_tableprivileges(': 'resource $connection_id, string $qualifier, string $owner, string $name | resource',
\ 'odbc_tables(': 'resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types]]]] | resource',
\ 'openal_buffer_create(': 'void | resource',
\ 'openal_buffer_data(': 'resource $buffer, int $format, string $data, int $freq | bool',
\ 'openal_buffer_destroy(': 'resource $buffer | bool',
\ 'openal_buffer_get(': 'resource $buffer, int $property | int',
\ 'openal_buffer_loadwav(': 'resource $buffer, string $wavfile | bool',
\ 'openal_context_create(': 'resource $device | resource',
\ 'openal_context_current(': 'resource $context | bool',
\ 'openal_context_destroy(': 'resource $context | bool',
\ 'openal_context_process(': 'resource $context | bool',
\ 'openal_context_suspend(': 'resource $context | bool',
\ 'openal_device_close(': 'resource $device | bool',
\ 'openal_device_open(': '[ string $device_desc] | resource',
\ 'openal_listener_get(': 'int $property | mixed',
\ 'openal_listener_set(': 'int $property, mixed $setting | bool',
\ 'openal_source_create(': 'void | resource',
\ 'openal_source_destroy(': 'resource $source | bool',
\ 'openal_source_get(': 'resource $source, int $property | mixed',
\ 'openal_source_pause(': 'resource $source | bool',
\ 'openal_source_play(': 'resource $source | bool',
\ 'openal_source_rewind(': 'resource $source | bool',
\ 'openal_source_set(': 'resource $source, int $property, mixed $setting | bool',
\ 'openal_source_stop(': 'resource $source | bool',
\ 'openal_stream(': 'resource $source, int $format, int $rate | resource',
\ 'opendir(': 'string $path [, resource $context] | resource',
\ 'openlog(': 'string $ident, int $option, int $facility | bool',
\ 'openssl_cipher_iv_length(': 'string $method | int',
\ 'openssl_csr_export_to_file(': 'resource $csr, string $outfilename [, bool $notext = true] | bool',
\ 'openssl_csr_export(': 'resource $csr, string &$out [, bool $notext = true] | bool',
\ 'openssl_csr_get_public_key(': 'mixed $csr [, bool $use_shortnames = true] | resource',
\ 'openssl_csr_get_subject(': 'mixed $csr [, bool $use_shortnames = true] | array',
\ 'openssl_csr_new(': 'array $dn, resource &$privkey [, array $configargs [, array $extraattribs]] | mixed',
\ 'openssl_csr_sign(': 'mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0]] | resource',
\ 'openssl_decrypt(': 'string $data, string $method, string $password [, int $options = 0 [, string $iv = ""]] | string',
\ 'openssl_dh_compute_key(': 'string $pub_key, resource $dh_key | string',
\ 'openssl_digest(': 'string $data, string $method [, bool $raw_output = false] | string',
\ 'openssl_encrypt(': 'string $data, string $method, string $password [, int $options = 0 [, string $iv = ""]] | string',
\ 'openssl_error_string(': 'void | string',
\ 'openssl_free_key(': 'resource $key_identifier | void',
\ 'openssl_get_cipher_methods(': '[ bool $aliases = false] | array',
\ 'openssl_get_md_methods(': '[ bool $aliases = false] | array',
\ 'openssl_get_privatekey(': 'openssl_get_privatekey â€” Alias of openssl_pkey_get_private()',
\ 'openssl_get_publickey(': 'openssl_get_publickey â€” Alias of openssl_pkey_get_public()',
\ 'openssl_open(': 'string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method] | bool',
\ 'openssl_pkcs12_export_to_file(': 'mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args] | bool',
\ 'openssl_pkcs12_export(': 'mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args] | bool',
\ 'openssl_pkcs12_read(': 'string $pkcs12, array &$certs, string $pass | bool',
\ 'openssl_pkcs7_decrypt(': 'string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey] | bool',
\ 'openssl_pkcs7_encrypt(': 'string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40]] | bool',
\ 'openssl_pkcs7_sign(': 'string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts]] | bool',
\ 'openssl_pkcs7_verify(': 'string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content]]]] | mixed',
\ 'openssl_pkey_export_to_file(': 'mixed $key, string $outfilename [, string $passphrase [, array $configargs]] | bool',
\ 'openssl_pkey_export(': 'mixed $key, string &$out [, string $passphrase [, array $configargs]] | bool',
\ 'openssl_pkey_free(': 'resource $key | void',
\ 'openssl_pkey_get_details(': 'resource $key | array',
\ 'openssl_pkey_get_private(': 'mixed $key [, string $passphrase = ""] | resource',
\ 'openssl_pkey_get_public(': 'mixed $certificate | resource',
\ 'openssl_pkey_new(': '[ array $configargs] | resource',
\ 'openssl_private_decrypt(': 'string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_private_encrypt(': 'string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_public_decrypt(': 'string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_public_encrypt(': 'string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_random_pseudo_bytes(': 'int $length [, bool &$crypto_strong] | string',
\ 'openssl_seal(': 'string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method] | int',
\ 'openssl_sign(': 'string $data, string &$signature, mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1] | bool',
\ 'openssl_verify(': 'string $data, string $signature, mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1] | int',
\ 'openssl_x509_check_private_key(': 'mixed $cert, mixed $key | bool',
\ 'openssl_x509_checkpurpose(': 'mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile]] | int',
\ 'openssl_x509_export_to_file(': 'mixed $x509, string $outfilename [, bool $notext = TRUE] | bool',
\ 'openssl_x509_export(': 'mixed $x509, string &$output [, bool $notext = TRUE] | bool',
\ 'openssl_x509_free(': 'resource $x509cert | void',
\ 'openssl_x509_parse(': 'mixed $x509cert [, bool $shortnames = true] | array',
\ 'openssl_x509_read(': 'mixed $x509certdata | resource',
\ 'ord(': 'string $string | int',
\ 'output_add_rewrite_var(': 'string $name, string $value | bool',
\ 'output_reset_rewrite_vars(': 'void | bool',
\ 'override_function(': 'string $function_name, string $function_args, string $function_code | bool',
\ 'ovrimos_close(': 'int $connection | void',
\ 'ovrimos_commit(': 'int $connection_id | bool',
\ 'ovrimos_connect(': 'string $host, string $dborport, string $user, string $password | int',
\ 'ovrimos_cursor(': 'int $result_id | string',
\ 'ovrimos_exec(': 'int $connection_id, string $query | int',
\ 'ovrimos_execute(': 'int $result_id [, array $parameters_array] | bool',
\ 'ovrimos_fetch_into(': 'int $result_id, array &$result_array [, string $how [, int $rownumber]] | bool',
\ 'ovrimos_fetch_row(': 'int $result_id [, int $how [, int $row_number]] | bool',
\ 'ovrimos_field_len(': 'int $result_id, int $field_number | int',
\ 'ovrimos_field_name(': 'int $result_id, int $field_number | string',
\ 'ovrimos_field_num(': 'int $result_id, string $field_name | int',
\ 'ovrimos_field_type(': 'int $result_id, int $field_number | int',
\ 'ovrimos_free_result(': 'int $result_id | bool',
\ 'ovrimos_longreadlen(': 'int $result_id, int $length | bool',
\ 'ovrimos_num_fields(': 'int $result_id | int',
\ 'ovrimos_num_rows(': 'int $result_id | int',
\ 'ovrimos_prepare(': 'int $connection_id, string $query | int',
\ 'ovrimos_result_all(': 'int $result_id [, string $format] | int',
\ 'ovrimos_result(': 'int $result_id, mixed $field | string',
\ 'ovrimos_rollback(': 'int $connection_id | bool',
\ 'pack(': 'string $format [, mixed $args [, mixed $...]] | string',
\ 'parse_ini_file(': 'string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL]] | array',
\ 'parse_ini_string(': 'string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL]] | array',
\ 'parse_str(': 'string $str [, array &$arr] | void',
\ 'parse_url(': 'string $url [, int $component = -1] | mixed',
\ 'parsekit_compile_file(': 'string $filename [, array &$errors [, int $options = PARSEKIT_QUIET]] | array',
\ 'parsekit_compile_string(': 'string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET]] | array',
\ 'parsekit_func_arginfo(': 'mixed $function | array',
\ 'passthru(': 'string $command [, int &$return_var] | void',
\ 'password_get_info(': 'string $hash | array',
\ 'password_hash(': 'string $password, integer $algo [, array $options] | string',
\ 'password_needs_rehash(': 'string $hash, string $algo [, string $options] | boolean',
\ 'password_verify(': 'string $password, string $hash | boolean',
\ 'pathinfo(': 'string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME] | mixed',
\ 'pclose(': 'resource $handle | int',
\ 'pcntl_alarm(': 'int $seconds | int',
\ 'pcntl_exec(': 'string $path [, array $args [, array $envs]] | void',
\ 'pcntl_fork(': 'void | int',
\ 'pcntl_getpriority(': '[ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]] | int',
\ 'pcntl_setpriority(': 'int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]] | bool',
\ 'pcntl_signal_dispatch(': 'void | bool',
\ 'pcntl_signal(': 'int $signo, callable $handler [, bool $restart_syscalls = true] | bool',
\ 'pcntl_sigprocmask(': 'int $how, array $set [, array &$oldset] | bool',
\ 'pcntl_sigtimedwait(': 'array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0]]] | int',
\ 'pcntl_sigwaitinfo(': 'array $set [, array &$siginfo] | int',
\ 'pcntl_wait(': 'int &$status [, int $options = 0] | int',
\ 'pcntl_waitpid(': 'int $pid, int &$status [, int $options = 0] | int',
\ 'pcntl_wexitstatus(': 'int $status | int',
\ 'pcntl_wifexited(': 'int $status | bool',
\ 'pcntl_wifsignaled(': 'int $status | bool',
\ 'pcntl_wifstopped(': 'int $status | bool',
\ 'pcntl_wstopsig(': 'int $status | int',
\ 'pcntl_wtermsig(': 'int $status | int',
\ 'PDF_activate_item(': 'resource $pdfdoc, int $id | bool',
\ 'PDF_add_launchlink(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename | bool',
\ 'PDF_add_locallink(': 'resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest | bool',
\ 'PDF_add_nameddest(': 'resource $pdfdoc, string $name, string $optlist | bool',
\ 'PDF_add_note(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open | bool',
\ 'PDF_add_pdflink(': 'resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest | bool',
\ 'PDF_add_table_cell(': 'resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist | int',
\ 'PDF_add_textflow(': 'resource $pdfdoc, int $textflow, string $text, string $optlist | int',
\ 'PDF_add_thumbnail(': 'resource $pdfdoc, int $image | bool',
\ 'PDF_add_weblink(': 'resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url | bool',
\ 'PDF_arc(': 'resource $p, float $x, float $y, float $r, float $alpha, float $beta | bool',
\ 'PDF_arcn(': 'resource $p, float $x, float $y, float $r, float $alpha, float $beta | bool',
\ 'PDF_attach_file(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon | bool',
\ 'PDF_begin_document(': 'resource $pdfdoc, string $filename, string $optlist | int',
\ 'PDF_begin_font(': 'resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist | bool',
\ 'PDF_begin_glyph(': 'resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury | bool',
\ 'PDF_begin_item(': 'resource $pdfdoc, string $tag, string $optlist | int',
\ 'PDF_begin_layer(': 'resource $pdfdoc, int $layer | bool',
\ 'PDF_begin_page_ext(': 'resource $pdfdoc, float $width, float $height, string $optlist | bool',
\ 'PDF_begin_page(': 'resource $pdfdoc, float $width, float $height | bool',
\ 'PDF_begin_pattern(': 'resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype | int',
\ 'PDF_begin_template_ext(': 'resource $pdfdoc, float $width, float $height, string $optlist | int',
\ 'PDF_begin_template(': 'resource $pdfdoc, float $width, float $height | int',
\ 'PDF_circle(': 'resource $pdfdoc, float $x, float $y, float $r | bool',
\ 'PDF_clip(': 'resource $p | bool',
\ 'PDF_close_image(': 'resource $p, int $image | bool',
\ 'PDF_close_pdi_page(': 'resource $p, int $page | bool',
\ 'PDF_close_pdi(': 'resource $p, int $doc | bool',
\ 'PDF_close(': 'resource $p | bool',
\ 'PDF_closepath_fill_stroke(': 'resource $p | bool',
\ 'PDF_closepath_stroke(': 'resource $p | bool',
\ 'PDF_closepath(': 'resource $p | bool',
\ 'PDF_concat(': 'resource $p, float $a, float $b, float $c, float $d, float $e, float $f | bool',
\ 'PDF_continue_text(': 'resource $p, string $text | bool',
\ 'PDF_create_3dview(': 'resource $pdfdoc, string $username, string $optlist | int',
\ 'PDF_create_action(': 'resource $pdfdoc, string $type, string $optlist | int',
\ 'PDF_create_annotation(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist | bool',
\ 'PDF_create_bookmark(': 'resource $pdfdoc, string $text, string $optlist | int',
\ 'PDF_create_field(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist | bool',
\ 'PDF_create_fieldgroup(': 'resource $pdfdoc, string $name, string $optlist | bool',
\ 'PDF_create_gstate(': 'resource $pdfdoc, string $optlist | int',
\ 'PDF_create_pvf(': 'resource $pdfdoc, string $filename, string $data, string $optlist | bool',
\ 'PDF_create_textflow(': 'resource $pdfdoc, string $text, string $optlist | int',
\ 'PDF_curveto(': 'resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool',
\ 'PDF_define_layer(': 'resource $pdfdoc, string $name, string $optlist | int',
\ 'PDF_delete_pvf(': 'resource $pdfdoc, string $filename | int',
\ 'PDF_delete_table(': 'resource $pdfdoc, int $table, string $optlist | bool',
\ 'PDF_delete_textflow(': 'resource $pdfdoc, int $textflow | bool',
\ 'PDF_delete(': 'resource $pdfdoc | bool',
\ 'PDF_encoding_set_char(': 'resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv | bool',
\ 'PDF_end_document(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_end_font(': 'resource $pdfdoc | bool',
\ 'PDF_end_glyph(': 'resource $pdfdoc | bool',
\ 'PDF_end_item(': 'resource $pdfdoc, int $id | bool',
\ 'PDF_end_layer(': 'resource $pdfdoc | bool',
\ 'PDF_end_page_ext(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_end_page(': 'resource $p | bool',
\ 'PDF_end_pattern(': 'resource $p | bool',
\ 'PDF_end_template(': 'resource $p | bool',
\ 'PDF_endpath(': 'resource $p | bool',
\ 'PDF_fill_imageblock(': 'resource $pdfdoc, int $page, string $blockname, int $image, string $optlist | int',
\ 'PDF_fill_pdfblock(': 'resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist | int',
\ 'PDF_fill_stroke(': 'resource $p | bool',
\ 'PDF_fill_textblock(': 'resource $pdfdoc, int $page, string $blockname, string $text, string $optlist | int',
\ 'PDF_fill(': 'resource $p | bool',
\ 'PDF_findfont(': 'resource $p, string $fontname, string $encoding, int $embed | int',
\ 'PDF_fit_image(': 'resource $pdfdoc, int $image, float $x, float $y, string $optlist | bool',
\ 'PDF_fit_pdi_page(': 'resource $pdfdoc, int $page, float $x, float $y, string $optlist | bool',
\ 'PDF_fit_table(': 'resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist | string',
\ 'PDF_fit_textflow(': 'resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist | string',
\ 'PDF_fit_textline(': 'resource $pdfdoc, string $text, float $x, float $y, string $optlist | bool',
\ 'PDF_get_apiname(': 'resource $pdfdoc | string',
\ 'PDF_get_buffer(': 'resource $p | string',
\ 'PDF_get_errmsg(': 'resource $pdfdoc | string',
\ 'PDF_get_errnum(': 'resource $pdfdoc | int',
\ 'PDF_get_majorversion(': 'void | int',
\ 'PDF_get_minorversion(': 'void | int',
\ 'PDF_get_parameter(': 'resource $p, string $key, float $modifier | string',
\ 'PDF_get_pdi_parameter(': 'resource $p, string $key, int $doc, int $page, int $reserved | string',
\ 'PDF_get_pdi_value(': 'resource $p, string $key, int $doc, int $page, int $reserved | float',
\ 'PDF_get_value(': 'resource $p, string $key, float $modifier | float',
\ 'PDF_info_font(': 'resource $pdfdoc, int $font, string $keyword, string $optlist | float',
\ 'PDF_info_matchbox(': 'resource $pdfdoc, string $boxname, int $num, string $keyword | float',
\ 'PDF_info_table(': 'resource $pdfdoc, int $table, string $keyword | float',
\ 'PDF_info_textflow(': 'resource $pdfdoc, int $textflow, string $keyword | float',
\ 'PDF_info_textline(': 'resource $pdfdoc, string $text, string $keyword, string $optlist | float',
\ 'PDF_initgraphics(': 'resource $p | bool',
\ 'PDF_lineto(': 'resource $p, float $x, float $y | bool',
\ 'PDF_load_3ddata(': 'resource $pdfdoc, string $filename, string $optlist | int',
\ 'PDF_load_font(': 'resource $pdfdoc, string $fontname, string $encoding, string $optlist | int',
\ 'PDF_load_iccprofile(': 'resource $pdfdoc, string $profilename, string $optlist | int',
\ 'PDF_load_image(': 'resource $pdfdoc, string $imagetype, string $filename, string $optlist | int',
\ 'PDF_makespotcolor(': 'resource $p, string $spotname | int',
\ 'PDF_moveto(': 'resource $p, float $x, float $y | bool',
\ 'PDF_new(': 'void | resource',
\ 'PDF_open_ccitt(': 'resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1 | int',
\ 'PDF_open_file(': 'resource $p, string $filename | bool',
\ 'PDF_open_image_file(': 'resource $p, string $imagetype, string $filename, string $stringparam, int $intparam | int',
\ 'PDF_open_image(': 'resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params | int',
\ 'PDF_open_memory_image(': 'resource $p, resource $image | int',
\ 'PDF_open_pdi_document(': 'resource $p, string $filename, string $optlist | int',
\ 'PDF_open_pdi_page(': 'resource $p, int $doc, int $pagenumber, string $optlist | int',
\ 'PDF_open_pdi(': 'resource $pdfdoc, string $filename, string $optlist, int $len | int',
\ 'PDF_pcos_get_number(': 'resource $p, int $doc, string $path | float',
\ 'PDF_pcos_get_stream(': 'resource $p, int $doc, string $optlist, string $path | string',
\ 'PDF_pcos_get_string(': 'resource $p, int $doc, string $path | string',
\ 'PDF_place_image(': 'resource $pdfdoc, int $image, float $x, float $y, float $scale | bool',
\ 'PDF_place_pdi_page(': 'resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy | bool',
\ 'PDF_process_pdi(': 'resource $pdfdoc, int $doc, int $page, string $optlist | int',
\ 'PDF_rect(': 'resource $p, float $x, float $y, float $width, float $height | bool',
\ 'PDF_restore(': 'resource $p | bool',
\ 'PDF_resume_page(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_rotate(': 'resource $p, float $phi | bool',
\ 'PDF_save(': 'resource $p | bool',
\ 'PDF_scale(': 'resource $p, float $sx, float $sy | bool',
\ 'PDF_set_border_color(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_set_border_dash(': 'resource $pdfdoc, float $black, float $white | bool',
\ 'PDF_set_border_style(': 'resource $pdfdoc, string $style, float $width | bool',
\ 'PDF_set_gstate(': 'resource $pdfdoc, int $gstate | bool',
\ 'PDF_set_info(': 'resource $p, string $key, string $value | bool',
\ 'PDF_set_layer_dependency(': 'resource $pdfdoc, string $type, string $optlist | bool',
\ 'PDF_set_parameter(': 'resource $p, string $key, string $value | bool',
\ 'PDF_set_text_pos(': 'resource $p, float $x, float $y | bool',
\ 'PDF_set_value(': 'resource $p, string $key, float $value | bool',
\ 'PDF_setcolor(': 'resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4 | bool',
\ 'PDF_setdash(': 'resource $pdfdoc, float $b, float $w | bool',
\ 'PDF_setdashpattern(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_setflat(': 'resource $pdfdoc, float $flatness | bool',
\ 'PDF_setfont(': 'resource $pdfdoc, int $font, float $fontsize | bool',
\ 'PDF_setgray_fill(': 'resource $p, float $g | bool',
\ 'PDF_setgray_stroke(': 'resource $p, float $g | bool',
\ 'PDF_setgray(': 'resource $p, float $g | bool',
\ 'PDF_setlinecap(': 'resource $p, int $linecap | bool',
\ 'PDF_setlinejoin(': 'resource $p, int $value | bool',
\ 'PDF_setlinewidth(': 'resource $p, float $width | bool',
\ 'PDF_setmatrix(': 'resource $p, float $a, float $b, float $c, float $d, float $e, float $f | bool',
\ 'PDF_setmiterlimit(': 'resource $pdfdoc, float $miter | bool',
\ 'PDF_setrgbcolor_fill(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_setrgbcolor_stroke(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_setrgbcolor(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_shading_pattern(': 'resource $pdfdoc, int $shading, string $optlist | int',
\ 'PDF_shading(': 'resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist | int',
\ 'PDF_shfill(': 'resource $pdfdoc, int $shading | bool',
\ 'PDF_show_boxed(': 'resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature | int',
\ 'PDF_show_xy(': 'resource $p, string $text, float $x, float $y | bool',
\ 'PDF_show(': 'resource $pdfdoc, string $text | bool',
\ 'PDF_skew(': 'resource $p, float $alpha, float $beta | bool',
\ 'PDF_stringwidth(': 'resource $p, string $text, int $font, float $fontsize | float',
\ 'PDF_stroke(': 'resource $p | bool',
\ 'PDF_suspend_page(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_translate(': 'resource $p, float $tx, float $ty | bool',
\ 'PDF_utf16_to_utf8(': 'resource $pdfdoc, string $utf16string | string',
\ 'PDF_utf32_to_utf16(': 'resource $pdfdoc, string $utf32string, string $ordering | string',
\ 'PDF_utf8_to_utf16(': 'resource $pdfdoc, string $utf8string, string $ordering | string',
\ 'pfsockopen(': 'string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]] | resource',
\ 'pg_affected_rows(': 'resource $result | int',
\ 'pg_cancel_query(': 'resource $connection | bool',
\ 'pg_client_encoding(': '[ resource $connection] | string',
\ 'pg_close(': '[ resource $connection] | bool',
\ 'pg_connect(': 'string $connection_string [, int $connect_type] | resource',
\ 'pg_connection_busy(': 'resource $connection | bool',
\ 'pg_connection_reset(': 'resource $connection | bool',
\ 'pg_connection_status(': 'resource $connection | int',
\ 'pg_convert(': 'resource $connection, string $table_name, array $assoc_array [, int $options = 0] | array',
\ 'pg_copy_from(': 'resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as]] | bool',
\ 'pg_copy_to(': 'resource $connection, string $table_name [, string $delimiter [, string $null_as]] | array',
\ 'pg_dbname(': '[ resource $connection] | string',
\ 'pg_delete(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_end_copy(': '[ resource $connection] | bool',
\ 'pg_escape_bytea(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_identifier(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_literal(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_string(': '[ resource $connection [, string $data]] | string',
\ 'pg_execute(': '[ resource $connection [, string $stmtname [, array $params]]] | resource',
\ 'pg_fetch_all_columns(': 'resource $result [, int $column = 0] | array',
\ 'pg_fetch_all(': 'resource $result | array',
\ 'pg_fetch_array(': 'resource $result [, int $row [, int $result_type = PGSQL_BOTH]] | array',
\ 'pg_fetch_assoc(': 'resource $result [, int $row] | array',
\ 'pg_fetch_object(': 'resource $result [, int $row [, int $result_type = PGSQL_ASSOC]] | object',
\ 'pg_fetch_result(': 'resource $result, int $row, mixed $field | string',
\ 'pg_fetch_row(': 'resource $result [, int $row] | array',
\ 'pg_field_is_null(': 'resource $result, int $row, mixed $field | int',
\ 'pg_field_name(': 'resource $result, int $field_number | string',
\ 'pg_field_num(': 'resource $result, string $field_name | int',
\ 'pg_field_prtlen(': 'resource $result, int $row_number, mixed $field_name_or_number | int',
\ 'pg_field_size(': 'resource $result, int $field_number | int',
\ 'pg_field_table(': 'resource $result, int $field_number [, bool $oid_only = false] | mixed',
\ 'pg_field_type_oid(': 'resource $result, int $field_number | int',
\ 'pg_field_type(': 'resource $result, int $field_number | string',
\ 'pg_free_result(': 'resource $result | bool',
\ 'pg_get_notify(': 'resource $connection [, int $result_type] | array',
\ 'pg_get_pid(': 'resource $connection | int',
\ 'pg_get_result(': '[ resource $connection] | resource',
\ 'pg_host(': '[ resource $connection] | string',
\ 'pg_insert(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_last_error(': '[ resource $connection] | string',
\ 'pg_last_notice(': 'resource $connection | string',
\ 'pg_last_oid(': 'resource $result | string',
\ 'pg_lo_close(': 'resource $large_object | bool',
\ 'pg_lo_create(': '[ resource $connection [, mixed $object_id]] | int',
\ 'pg_lo_export(': '[ resource $connection [, int $oid [, string $pathname]]] | bool',
\ 'pg_lo_import(': '[ resource $connection [, string $pathname [, mixed $object_id]]] | int',
\ 'pg_lo_open(': 'resource $connection, int $oid, string $mode | resource',
\ 'pg_lo_read_all(': 'resource $large_object | int',
\ 'pg_lo_read(': 'resource $large_object [, int $len = 8192] | string',
\ 'pg_lo_seek(': 'resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR] | bool',
\ 'pg_lo_tell(': 'resource $large_object | int',
\ 'pg_lo_unlink(': 'resource $connection, int $oid | bool',
\ 'pg_lo_write(': 'resource $large_object, string $data [, int $len] | int',
\ 'pg_meta_data(': 'resource $connection, string $table_name | array',
\ 'pg_num_fields(': 'resource $result | int',
\ 'pg_num_rows(': 'resource $result | int',
\ 'pg_options(': '[ resource $connection] | string',
\ 'pg_parameter_status(': '[ resource $connection [, string $param_name]] | string',
\ 'pg_pconnect(': 'string $connection_string [, int $connect_type] | resource',
\ 'pg_ping(': '[ resource $connection] | bool',
\ 'pg_port(': '[ resource $connection] | int',
\ 'pg_prepare(': '[ resource $connection [, string $stmtname [, string $query]]] | resource',
\ 'pg_put_line(': '[ resource $connection [, string $data]] | bool',
\ 'pg_query_params(': '[ resource $connection [, string $query [, array $params]]] | resource',
\ 'pg_query(': '[ resource $connection [, string $query]] | resource',
\ 'pg_result_error_field(': 'resource $result, int $fieldcode | string',
\ 'pg_result_error(': 'resource $result | string',
\ 'pg_result_seek(': 'resource $result, int $offset | bool',
\ 'pg_result_status(': 'resource $result [, int $type = PGSQL_STATUS_LONG] | mixed',
\ 'pg_select(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_send_execute(': 'resource $connection, string $stmtname, array $params | bool',
\ 'pg_send_prepare(': 'resource $connection, string $stmtname, string $query | bool',
\ 'pg_send_query_params(': 'resource $connection, string $query, array $params | bool',
\ 'pg_send_query(': 'resource $connection, string $query | bool',
\ 'pg_set_client_encoding(': '[ resource $connection [, string $encoding]] | int',
\ 'pg_set_error_verbosity(': '[ resource $connection [, int $verbosity]] | int',
\ 'pg_trace(': 'string $pathname [, string $mode = "w" [, resource $connection]] | bool',
\ 'pg_transaction_status(': 'resource $connection | int',
\ 'pg_tty(': '[ resource $connection] | string',
\ 'pg_unescape_bytea(': 'string $data | string',
\ 'pg_untrace(': '[ resource $connection] | bool',
\ 'pg_update(': 'resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_version(': '[ resource $connection] | array',
\ 'php_check_syntax(': 'string $filename [, string &$error_message] | bool',
\ 'php_ini_loaded_file(': 'void | string',
\ 'php_ini_scanned_files(': 'void | string',
\ 'php_logo_guid(': 'void | string',
\ 'php_sapi_name(': 'void | string',
\ 'php_strip_whitespace(': 'string $filename | string',
\ 'php_uname(': '[ string $mode = "a"] | string',
\ 'phpcredits(': '[ int $flag = CREDITS_ALL] | bool',
\ 'phpinfo(': '[ int $what = INFO_ALL] | bool',
\ 'phpversion(': '[ string $extension] | string',
\ 'pi(': 'void | float',
\ 'png2wbmp(': 'string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold | bool',
\ 'popen(': 'string $command, string $mode | resource',
\ 'pos(': 'pos â€” Alias of current()',
\ 'posix_access(': 'string $file [, int $mode = POSIX_F_OK] | bool',
\ 'posix_ctermid(': 'void | string',
\ 'posix_errno(': 'posix_errno â€” Alias of posix_get_last_error()',
\ 'posix_get_last_error(': 'void | int',
\ 'posix_getcwd(': 'void | string',
\ 'posix_getegid(': 'void | int',
\ 'posix_geteuid(': 'void | int',
\ 'posix_getgid(': 'void | int',
\ 'posix_getgrgid(': 'int $gid | array',
\ 'posix_getgrnam(': 'string $name | array',
\ 'posix_getgroups(': 'void | array',
\ 'posix_getlogin(': 'void | string',
\ 'posix_getpgid(': 'int $pid | int',
\ 'posix_getpgrp(': 'void | int',
\ 'posix_getpid(': 'void | int',
\ 'posix_getppid(': 'void | int',
\ 'posix_getpwnam(': 'string $username | array',
\ 'posix_getpwuid(': 'int $uid | array',
\ 'posix_getrlimit(': 'void | array',
\ 'posix_getsid(': 'int $pid | int',
\ 'posix_getuid(': 'void | int',
\ 'posix_initgroups(': 'string $name, int $base_group_id | bool',
\ 'posix_isatty(': 'int $fd | bool',
\ 'posix_kill(': 'int $pid, int $sig | bool',
\ 'posix_mkfifo(': 'string $pathname, int $mode | bool',
\ 'posix_mknod(': 'string $pathname, int $mode [, int $major = 0 [, int $minor = 0]] | bool',
\ 'posix_setegid(': 'int $gid | bool',
\ 'posix_seteuid(': 'int $uid | bool',
\ 'posix_setgid(': 'int $gid | bool',
\ 'posix_setpgid(': 'int $pid, int $pgid | bool',
\ 'posix_setsid(': 'void | int',
\ 'posix_setuid(': 'int $uid | bool',
\ 'posix_strerror(': 'int $errno | string',
\ 'posix_times(': 'void | array',
\ 'posix_ttyname(': 'int $fd | string',
\ 'posix_uname(': 'void | array',
\ 'pow(': 'number $base, number $exp | number',
\ 'preg_filter(': 'mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_grep(': 'string $pattern, array $input [, int $flags = 0] | array',
\ 'preg_last_error(': 'void | int',
\ 'preg_match_all(': 'string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0]]] | int',
\ 'preg_match(': 'string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0]]] | int',
\ 'preg_quote(': 'string $str [, string $delimiter = NULL] | string',
\ 'preg_replace_callback(': 'mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_replace(': 'mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_split(': 'string $pattern, string $subject [, int $limit = -1 [, int $flags = 0]] | array',
\ 'prev(': 'array &$array | mixed',
\ 'print_r(': 'mixed $expression [, bool $return = false] | mixed',
\ 'print(': 'string $arg | int',
\ 'printer_abort(': 'resource $printer_handle | void',
\ 'printer_close(': 'resource $printer_handle | void',
\ 'printer_create_brush(': 'int $style, string $color | resource',
\ 'printer_create_dc(': 'resource $printer_handle | void',
\ 'printer_create_font(': 'string $face, int $height, int $width, int $font_weight, bool $italic, bool $underline, bool $strikeout, int $orientation | resource',
\ 'printer_create_pen(': 'int $style, int $width, string $color | resource',
\ 'printer_delete_brush(': 'resource $brush_handle | void',
\ 'printer_delete_dc(': 'resource $printer_handle | bool',
\ 'printer_delete_font(': 'resource $font_handle | void',
\ 'printer_delete_pen(': 'resource $pen_handle | void',
\ 'printer_draw_bmp(': 'resource $printer_handle, string $filename, int $x, int $y [, int $width [, int $height]] | bool',
\ 'printer_draw_chord(': 'resource $printer_handle, int $rec_x, int $rec_y, int $rec_x1, int $rec_y1, int $rad_x, int $rad_y, int $rad_x1, int $rad_y1 | void',
\ 'printer_draw_elipse(': 'resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y | void',
\ 'printer_draw_line(': 'resource $printer_handle, int $from_x, int $from_y, int $to_x, int $to_y | void',
\ 'printer_draw_pie(': 'resource $printer_handle, int $rec_x, int $rec_y, int $rec_x1, int $rec_y1, int $rad1_x, int $rad1_y, int $rad2_x, int $rad2_y | void',
\ 'printer_draw_rectangle(': 'resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y | void',
\ 'printer_draw_roundrect(': 'resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y, int $width, int $height | void',
\ 'printer_draw_text(': 'resource $printer_handle, string $text, int $x, int $y | void',
\ 'printer_end_doc(': 'resource $printer_handle | bool',
\ 'printer_end_page(': 'resource $printer_handle | bool',
\ 'printer_get_option(': 'resource $printer_handle, string $option | mixed',
\ 'printer_list(': 'int $enumtype [, string $name [, int $level]] | array',
\ 'printer_logical_fontheight(': 'resource $printer_handle, int $height | int',
\ 'printer_open(': '[ string $printername] | resource',
\ 'printer_select_brush(': 'resource $printer_handle, resource $brush_handle | void',
\ 'printer_select_font(': 'resource $printer_handle, resource $font_handle | void',
\ 'printer_select_pen(': 'resource $printer_handle, resource $pen_handle | void',
\ 'printer_set_option(': 'resource $printer_handle, int $option, mixed $value | bool',
\ 'printer_start_doc(': 'resource $printer_handle [, string $document] | bool',
\ 'printer_start_page(': 'resource $printer_handle | bool',
\ 'printer_write(': 'resource $printer_handle, string $content | bool',
\ 'printf(': 'string $format [, mixed $args [, mixed $...]] | int',
\ 'proc_close(': 'resource $process | int',
\ 'proc_get_status(': 'resource $process | array',
\ 'proc_nice(': 'int $increment | bool',
\ 'proc_open(': 'string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options]]] | resource',
\ 'proc_terminate(': 'resource $process [, int $signal = 15] | bool',
\ 'property_exists(': 'mixed $class, string $property | bool',
\ 'ps_add_bookmark(': 'resource $psdoc, string $text [, int $parent = 0 [, int $open = 0]] | int',
\ 'ps_add_launchlink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename | bool',
\ 'ps_add_locallink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest | bool',
\ 'ps_add_note(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open | bool',
\ 'ps_add_pdflink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest | bool',
\ 'ps_add_weblink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url | bool',
\ 'ps_arc(': 'resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta | bool',
\ 'ps_arcn(': 'resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta | bool',
\ 'ps_begin_page(': 'resource $psdoc, float $width, float $height | bool',
\ 'ps_begin_pattern(': 'resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype | int',
\ 'ps_begin_template(': 'resource $psdoc, float $width, float $height | int',
\ 'ps_circle(': 'resource $psdoc, float $x, float $y, float $radius | bool',
\ 'ps_clip(': 'resource $psdoc | bool',
\ 'ps_close_image(': 'resource $psdoc, int $imageid | void',
\ 'ps_close(': 'resource $psdoc | bool',
\ 'ps_closepath_stroke(': 'resource $psdoc | bool',
\ 'ps_closepath(': 'resource $psdoc | bool',
\ 'ps_continue_text(': 'resource $psdoc, string $text | bool',
\ 'ps_curveto(': 'resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool',
\ 'ps_delete(': 'resource $psdoc | bool',
\ 'ps_end_page(': 'resource $psdoc | bool',
\ 'ps_end_pattern(': 'resource $psdoc | bool',
\ 'ps_end_template(': 'resource $psdoc | bool',
\ 'ps_fill_stroke(': 'resource $psdoc | bool',
\ 'ps_fill(': 'resource $psdoc | bool',
\ 'ps_findfont(': 'resource $psdoc, string $fontname, string $encoding [, bool $embed = false] | int',
\ 'ps_get_buffer(': 'resource $psdoc | string',
\ 'ps_get_parameter(': 'resource $psdoc, string $name [, float $modifier] | string',
\ 'ps_get_value(': 'resource $psdoc, string $name [, float $modifier] | float',
\ 'ps_hyphenate(': 'resource $psdoc, string $text | array',
\ 'ps_include_file(': 'resource $psdoc, string $file | bool',
\ 'ps_lineto(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_makespotcolor(': 'resource $psdoc, string $name [, int $reserved = 0] | int',
\ 'ps_moveto(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_new(': 'void | resource',
\ 'ps_open_file(': 'resource $psdoc [, string $filename] | bool',
\ 'ps_open_image_file(': 'resource $psdoc, string $type, string $filename [, string $stringparam [, int $intparam = 0]] | int',
\ 'ps_open_image(': 'resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params | int',
\ 'ps_open_memory_image(': 'resource $psdoc, int $gd | int',
\ 'ps_place_image(': 'resource $psdoc, int $imageid, float $x, float $y, float $scale | bool',
\ 'ps_rect(': 'resource $psdoc, float $x, float $y, float $width, float $height | bool',
\ 'ps_restore(': 'resource $psdoc | bool',
\ 'ps_rotate(': 'resource $psdoc, float $rot | bool',
\ 'ps_save(': 'resource $psdoc | bool',
\ 'ps_scale(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_set_border_color(': 'resource $psdoc, float $red, float $green, float $blue | bool',
\ 'ps_set_border_dash(': 'resource $psdoc, float $black, float $white | bool',
\ 'ps_set_border_style(': 'resource $psdoc, string $style, float $width | bool',
\ 'ps_set_info(': 'resource $p, string $key, string $val | bool',
\ 'ps_set_parameter(': 'resource $psdoc, string $name, string $value | bool',
\ 'ps_set_text_pos(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_set_value(': 'resource $psdoc, string $name, float $value | bool',
\ 'ps_setcolor(': 'resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4 | bool',
\ 'ps_setdash(': 'resource $psdoc, float $on, float $off | bool',
\ 'ps_setflat(': 'resource $psdoc, float $value | bool',
\ 'ps_setfont(': 'resource $psdoc, int $fontid, float $size | bool',
\ 'ps_setgray(': 'resource $psdoc, float $gray | bool',
\ 'ps_setlinecap(': 'resource $psdoc, int $type | bool',
\ 'ps_setlinejoin(': 'resource $psdoc, int $type | bool',
\ 'ps_setlinewidth(': 'resource $psdoc, float $width | bool',
\ 'ps_setmiterlimit(': 'resource $psdoc, float $value | bool',
\ 'ps_setoverprintmode(': 'resource $psdoc, int $mode | bool',
\ 'ps_setpolydash(': 'resource $psdoc, float $arr | bool',
\ 'ps_shading_pattern(': 'resource $psdoc, int $shadingid, string $optlist | int',
\ 'ps_shading(': 'resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist | int',
\ 'ps_shfill(': 'resource $psdoc, int $shadingid | bool',
\ 'ps_show_boxed(': 'resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature] | int',
\ 'ps_show_xy(': 'resource $psdoc, string $text, float $x, float $y | bool',
\ 'ps_show_xy2(': 'resource $psdoc, string $text, int $len, float $xcoor, float $ycoor | bool',
\ 'ps_show(': 'resource $psdoc, string $text | bool',
\ 'ps_show2(': 'resource $psdoc, string $text, int $len | bool',
\ 'ps_string_geometry(': 'resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]] | array',
\ 'ps_stringwidth(': 'resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]] | float',
\ 'ps_stroke(': 'resource $psdoc | bool',
\ 'ps_symbol_name(': 'resource $psdoc, int $ord [, int $fontid = 0] | string',
\ 'ps_symbol_width(': 'resource $psdoc, int $ord [, int $fontid = 0 [, float $size = 0.0]] | float',
\ 'ps_symbol(': 'resource $psdoc, int $ord | bool',
\ 'ps_translate(': 'resource $psdoc, float $x, float $y | bool',
\ 'pspell_add_to_personal(': 'int $dictionary_link, string $word | bool',
\ 'pspell_add_to_session(': 'int $dictionary_link, string $word | bool',
\ 'pspell_check(': 'int $dictionary_link, string $word | bool',
\ 'pspell_clear_session(': 'int $dictionary_link | bool',
\ 'pspell_config_create(': 'string $language [, string $spelling [, string $jargon [, string $encoding]]] | int',
\ 'pspell_config_data_dir(': 'int $conf, string $directory | bool',
\ 'pspell_config_dict_dir(': 'int $conf, string $directory | bool',
\ 'pspell_config_ignore(': 'int $dictionary_link, int $n | bool',
\ 'pspell_config_mode(': 'int $dictionary_link, int $mode | bool',
\ 'pspell_config_personal(': 'int $dictionary_link, string $file | bool',
\ 'pspell_config_repl(': 'int $dictionary_link, string $file | bool',
\ 'pspell_config_runtogether(': 'int $dictionary_link, bool $flag | bool',
\ 'pspell_config_save_repl(': 'int $dictionary_link, bool $flag | bool',
\ 'pspell_new_config(': 'int $config | int',
\ 'pspell_new_personal(': 'string $personal, string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]] | int',
\ 'pspell_new(': 'string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]] | int',
\ 'pspell_save_wordlist(': 'int $dictionary_link | bool',
\ 'pspell_store_replacement(': 'int $dictionary_link, string $misspelled, string $correct | bool',
\ 'pspell_suggest(': 'int $dictionary_link, string $word | array',
\ 'putenv(': 'string $setting | bool',
\ 'px_close(': 'resource $pxdoc | bool',
\ 'px_create_fp(': 'resource $pxdoc, resource $file, array $fielddesc | bool',
\ 'px_date2string(': 'resource $pxdoc, int $value, string $format | string',
\ 'px_delete_record(': 'resource $pxdoc, int $num | bool',
\ 'px_delete(': 'resource $pxdoc | bool',
\ 'px_get_field(': 'resource $pxdoc, int $fieldno | array',
\ 'px_get_info(': 'resource $pxdoc | array',
\ 'px_get_parameter(': 'resource $pxdoc, string $name | string',
\ 'px_get_record(': 'resource $pxdoc, int $num [, int $mode = 0] | array',
\ 'px_get_schema(': 'resource $pxdoc [, int $mode = 0] | array',
\ 'px_get_value(': 'resource $pxdoc, string $name | float',
\ 'px_insert_record(': 'resource $pxdoc, array $data | int',
\ 'px_new(': 'void | resource',
\ 'px_numfields(': 'resource $pxdoc | int',
\ 'px_numrecords(': 'resource $pxdoc | int',
\ 'px_open_fp(': 'resource $pxdoc, resource $file | bool',
\ 'px_put_record(': 'resource $pxdoc, array $record [, int $recpos = -1] | bool',
\ 'px_retrieve_record(': 'resource $pxdoc, int $num [, int $mode = 0] | array',
\ 'px_set_blob_file(': 'resource $pxdoc, string $filename | bool',
\ 'px_set_parameter(': 'resource $pxdoc, string $name, string $value | bool',
\ 'px_set_tablename(': 'resource $pxdoc, string $name | void',
\ 'px_set_targetencoding(': 'resource $pxdoc, string $encoding | bool',
\ 'px_set_value(': 'resource $pxdoc, string $name, float $value | bool',
\ 'px_timestamp2string(': 'resource $pxdoc, float $value, string $format | string',
\ 'px_update_record(': 'resource $pxdoc, array $data, int $num | bool',
\ 'qdom_error(': 'void | string',
\ 'qdom_tree(': 'string $doc | QDomDocument',
\ 'quoted_printable_decode(': 'string $str | string',
\ 'quoted_printable_encode(': 'string $str | string',
\ 'quotemeta(': 'string $str | string',
\ 'rad2deg(': 'float $number | float',
\ 'radius_acct_open(': 'void | resource',
\ 'radius_add_server(': 'resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries | bool',
\ 'radius_auth_open(': 'void | resource',
\ 'radius_close(': 'resource $radius_handle | bool',
\ 'radius_config(': 'resource $radius_handle, string $file | bool',
\ 'radius_create_request(': 'resource $radius_handle, int $type | bool',
\ 'radius_cvt_addr(': 'string $data | string',
\ 'radius_cvt_int(': 'string $data | int',
\ 'radius_cvt_string(': 'string $data | string',
\ 'radius_demangle_mppe_key(': 'resource $radius_handle, string $mangled | string',
\ 'radius_demangle(': 'resource $radius_handle, string $mangled | string',
\ 'radius_get_attr(': 'resource $radius_handle | mixed',
\ 'radius_get_vendor_attr(': 'string $data | array',
\ 'radius_put_addr(': 'resource $radius_handle, int $type, string $addr | bool',
\ 'radius_put_attr(': 'resource $radius_handle, int $type, string $value | bool',
\ 'radius_put_int(': 'resource $radius_handle, int $type, int $value | bool',
\ 'radius_put_string(': 'resource $radius_handle, int $type, string $value | bool',
\ 'radius_put_vendor_addr(': 'resource $radius_handle, int $vendor, int $type, string $addr | bool',
\ 'radius_put_vendor_attr(': 'resource $radius_handle, int $vendor, int $type, string $value | bool',
\ 'radius_put_vendor_int(': 'resource $radius_handle, int $vendor, int $type, int $value | bool',
\ 'radius_put_vendor_string(': 'resource $radius_handle, int $vendor, int $type, string $value | bool',
\ 'radius_request_authenticator(': 'resource $radius_handle | string',
\ 'radius_send_request(': 'resource $radius_handle | int',
\ 'radius_server_secret(': 'resource $radius_handle | string',
\ 'radius_strerror(': 'resource $radius_handle | string',
\ 'rand(': 'void | int',
\ 'range(': 'mixed $start, mixed $end [, number $step = 1] | array',
\ 'rar_wrapper_cache_stats(': 'void | string',
\ 'rawurldecode(': 'string $str | string',
\ 'rawurlencode(': 'string $str | string',
\ 'read_exif_data(': 'read_exif_data â€” Alias of exif_read_data()',
\ 'readdir(': '[ resource $dir_handle] | string',
\ 'readfile(': 'string $filename [, bool $use_include_path = false [, resource $context]] | int',
\ 'readgzfile(': 'string $filename [, int $use_include_path = 0] | int',
\ 'readline_add_history(': 'string $line | bool',
\ 'readline_callback_handler_install(': 'string $prompt, callable $callback | bool',
\ 'readline_callback_handler_remove(': 'void | bool',
\ 'readline_callback_read_char(': 'void | void',
\ 'readline_clear_history(': 'void | bool',
\ 'readline_completion_function(': 'callable $function | bool',
\ 'readline_info(': '[ string $varname [, string $newvalue]] | mixed',
\ 'readline_list_history(': 'void | array',
\ 'readline_on_new_line(': 'void | void',
\ 'readline_read_history(': '[ string $filename] | bool',
\ 'readline_redisplay(': 'void | void',
\ 'readline_write_history(': '[ string $filename] | bool',
\ 'readline(': '[ string $prompt] | string',
\ 'readlink(': 'string $path | string',
\ 'realpath_cache_get(': 'void | array',
\ 'realpath_cache_size(': 'void | int',
\ 'realpath(': 'string $path | string',
\ 'recode_file(': 'string $request, resource $input, resource $output | bool',
\ 'recode_string(': 'string $request, string $string | string',
\ 'recode(': 'recode â€” Alias of recode_string()',
\ 'register_shutdown_function(': 'callable $callback [, mixed $parameter [, mixed $...]] | void',
\ 'register_tick_function(': 'callable $function [, mixed $arg [, mixed $...]] | bool',
\ 'rename_function(': 'string $original_name, string $new_name | bool',
\ 'rename(': 'string $oldname, string $newname [, resource $context] | bool',
\ 'reset(': 'array &$array | mixed',
\ 'restore_error_handler(': 'void | bool',
\ 'restore_exception_handler(': 'void | bool',
\ 'restore_include_path(': 'void | void',
\ 'rewind(': 'resource $handle | bool',
\ 'rewinddir(': '[ resource $dir_handle] | void',
\ 'rmdir(': 'string $dirname [, resource $context] | bool',
\ 'round(': 'float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP]] | float',
\ 'rpm_close(': 'resource $rpmr | bool',
\ 'rpm_get_tag(': 'resource $rpmr, int $tagnum | mixed',
\ 'rpm_is_valid(': 'string $filename | bool',
\ 'rpm_open(': 'string $filename | resource',
\ 'rpm_version(': 'void | string',
\ 'rrd_create(': 'string $filename, array $options | bool',
\ 'rrd_error(': 'void | string',
\ 'rrd_fetch(': 'string $filename, array $options | array',
\ 'rrd_first(': 'string $file [, int $raaindex = 0] | int',
\ 'rrd_graph(': 'string $filename, array $options | array',
\ 'rrd_info(': 'string $filename | array',
\ 'rrd_last(': 'string $filename | int',
\ 'rrd_lastupdate(': 'string $filename | array',
\ 'rrd_restore(': 'string $xml_file, string $rrd_file [, array $options] | bool',
\ 'rrd_tune(': 'string $filename, array $options | bool',
\ 'rrd_update(': 'string $filename, array $options | bool',
\ 'rrd_version(': 'void | string',
\ 'rrd_xport(': 'array $options | array',
\ 'rsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'rtrim(': 'string $str [, string $charlist] | string',
\ 'runkit_class_adopt(': 'string $classname, string $parentname | bool',
\ 'runkit_class_emancipate(': 'string $classname | bool',
\ 'runkit_constant_add(': 'string $constname, mixed $value | bool',
\ 'runkit_constant_redefine(': 'string $constname, mixed $newvalue | bool',
\ 'runkit_constant_remove(': 'string $constname | bool',
\ 'runkit_function_add(': 'string $funcname, string $arglist, string $code | bool',
\ 'runkit_function_copy(': 'string $funcname, string $targetname | bool',
\ 'runkit_function_redefine(': 'string $funcname, string $arglist, string $code | bool',
\ 'runkit_function_remove(': 'string $funcname | bool',
\ 'runkit_function_rename(': 'string $funcname, string $newname | bool',
\ 'runkit_import(': 'string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS] | bool',
\ 'runkit_lint_file(': 'string $filename | bool',
\ 'runkit_lint(': 'string $code | bool',
\ 'runkit_method_add(': 'string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC] | bool',
\ 'runkit_method_copy(': 'string $dClass, string $dMethod, string $sClass [, string $sMethod] | bool',
\ 'runkit_method_redefine(': 'string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC] | bool',
\ 'runkit_method_remove(': 'string $classname, string $methodname | bool',
\ 'runkit_method_rename(': 'string $classname, string $methodname, string $newname | bool',
\ 'runkit_return_value_used(': 'void | bool',
\ 'runkit_sandbox_output_handler(': 'object $sandbox [, mixed $callback] | mixed',
\ 'runkit_superglobals(': 'void | array',
\ 'scandir(': 'string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context]] | array',
\ 'sem_acquire(': 'resource $sem_identifier | bool',
\ 'sem_get(': 'int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1]]] | resource',
\ 'sem_release(': 'resource $sem_identifier | bool',
\ 'sem_remove(': 'resource $sem_identifier | bool',
\ 'serialize(': 'mixed $value | string',
\ 'session_cache_expire(': '[ string $new_cache_expire] | int',
\ 'session_cache_limiter(': '[ string $cache_limiter] | string',
\ 'session_commit(': 'session_commit â€” Alias of session_write_close()',
\ 'session_decode(': 'string $data | bool',
\ 'session_destroy(': 'void | bool',
\ 'session_encode(': 'void | string',
\ 'session_get_cookie_params(': 'void | array',
\ 'session_id(': '[ string $id] | string',
\ 'session_is_registered(': 'string $name | bool',
\ 'session_module_name(': '[ string $module] | string',
\ 'session_name(': '[ string $name] | string',
\ 'session_pgsql_add_error(': 'int $error_level [, string $error_message] | bool',
\ 'session_pgsql_get_error(': '[ bool $with_error_message = false] | array',
\ 'session_pgsql_get_field(': 'void | string',
\ 'session_pgsql_reset(': 'void | bool',
\ 'session_pgsql_set_field(': 'string $value | bool',
\ 'session_pgsql_status(': 'void | array',
\ 'session_regenerate_id(': '[ bool $delete_old_session = false] | bool',
\ 'session_register_shutdown(': 'void | void',
\ 'session_register(': 'mixed $name [, mixed $...] | bool',
\ 'session_save_path(': '[ string $path] | string',
\ 'session_set_cookie_params(': 'int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false]]]] | void',
\ 'session_set_save_handler(': 'callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc | bool',
\ 'session_start(': 'void | bool',
\ 'session_status(': 'void | int',
\ 'session_unregister(': 'string $name | bool',
\ 'session_unset(': 'void | void',
\ 'session_write_close(': 'void | void',
\ 'set_error_handler(': 'callable $error_handler [, int $error_types = E_ALL | E_STRICT] | mixed',
\ 'set_exception_handler(': 'callable $exception_handler | callable',
\ 'set_file_buffer(': 'set_file_buffer â€” Alias of stream_set_write_buffer()',
\ 'set_include_path(': 'string $new_include_path | string',
\ 'set_magic_quotes_runtime(': 'bool $new_setting | bool',
\ 'set_socket_blocking(': 'set_socket_blocking â€” Alias of stream_set_blocking()',
\ 'set_time_limit(': 'int $seconds | void',
\ 'setcookie(': 'string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false]]]]]] | bool',
\ 'setlocale(': 'int $category, string $locale [, string $...] | string',
\ 'setproctitle(': 'string $title | void',
\ 'setrawcookie(': 'string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false]]]]]] | bool',
\ 'setthreadtitle(': 'string $title | bool',
\ 'settype(': 'mixed &$var, string $type | bool',
\ 'sha1_file(': 'string $filename [, bool $raw_output = false] | string',
\ 'sha1(': 'string $str [, bool $raw_output = false] | string',
\ 'shell_exec(': 'string $cmd | string',
\ 'shm_attach(': 'int $key [, int $memsize [, int $perm = 0666]] | resource',
\ 'shm_detach(': 'resource $shm_identifier | bool',
\ 'shm_get_var(': 'resource $shm_identifier, int $variable_key | mixed',
\ 'shm_has_var(': 'resource $shm_identifier, int $variable_key | bool',
\ 'shm_put_var(': 'resource $shm_identifier, int $variable_key, mixed $variable | bool',
\ 'shm_remove_var(': 'resource $shm_identifier, int $variable_key | bool',
\ 'shm_remove(': 'resource $shm_identifier | bool',
\ 'shmop_close(': 'int $shmid | void',
\ 'shmop_delete(': 'int $shmid | bool',
\ 'shmop_open(': 'int $key, string $flags, int $mode, int $size | int',
\ 'shmop_read(': 'int $shmid, int $start, int $count | string',
\ 'shmop_size(': 'int $shmid | int',
\ 'shmop_write(': 'int $shmid, string $data, int $offset | int',
\ 'show_source(': 'show_source â€” Alias of highlight_file()',
\ 'shuffle(': 'array &$array | bool',
\ 'similar_text(': 'string $first, string $second [, float &$percent] | int',
\ 'simplexml_import_dom(': 'DOMNode $node [, string $class_name = "SimpleXMLElement"] | SimpleXMLElement',
\ 'simplexml_load_file(': 'string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false]]]] | SimpleXMLElement',
\ 'simplexml_load_string(': 'string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false]]]] | SimpleXMLElement',
\ 'sin(': 'float $arg | float',
\ 'sinh(': 'float $arg | float',
\ 'sizeof(': 'sizeof â€” Alias of count()',
\ 'sleep(': 'int $seconds | int',
\ 'snmp_get_quick_print(': 'void | bool',
\ 'snmp_get_valueretrieval(': 'void | int',
\ 'snmp_read_mib(': 'string $filename | bool',
\ 'snmp_set_enum_print(': 'int $enum_print | bool',
\ 'snmp_set_oid_numeric_print(': 'int $oid_format | void',
\ 'snmp_set_oid_output_format(': '[ int $oid_format = SNMP_OID_OUTPUT_MODULE] | bool',
\ 'snmp_set_quick_print(': 'bool $quick_print | bool',
\ 'snmp_set_valueretrieval(': '[ int $method = SNMP_VALUE_LIBRARY] | bool',
\ 'snmp2_get(': 'string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | string',
\ 'snmp2_getnext(': 'string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | string',
\ 'snmp2_real_walk(': 'string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | array',
\ 'snmp2_set(': 'string $host, string $community, string $object_id, string $type, string $value [, string $timeout = 1000000 [, string $retries = 5]] | bool',
\ 'snmp2_walk(': 'string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | array',
\ 'snmp3_get(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | string',
\ 'snmp3_getnext(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | string',
\ 'snmp3_real_walk(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | array',
\ 'snmp3_set(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]] | bool',
\ 'snmp3_walk(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]] | array',
\ 'snmpget(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmpgetnext(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmprealwalk(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmpset(': 'string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5]] | bool',
\ 'snmpwalk(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmpwalkoid(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'socket_accept(': 'resource $socket | resource',
\ 'socket_bind(': 'resource $socket, string $address [, int $port = 0] | bool',
\ 'socket_clear_error(': '[ resource $socket] | void',
\ 'socket_close(': 'resource $socket | void',
\ 'socket_connect(': 'resource $socket, string $address [, int $port = 0] | bool',
\ 'socket_create_listen(': 'int $port [, int $backlog = 128] | resource',
\ 'socket_create_pair(': 'int $domain, int $type, int $protocol, array &$fd | bool',
\ 'socket_create(': 'int $domain, int $type, int $protocol | resource',
\ 'socket_get_option(': 'resource $socket, int $level, int $optname | mixed',
\ 'socket_get_status(': 'socket_get_status â€” Alias of stream_get_meta_data()',
\ 'socket_getpeername(': 'resource $socket, string &$address [, int &$port] | bool',
\ 'socket_getsockname(': 'resource $socket, string &$addr [, int &$port] | bool',
\ 'socket_import_stream(': 'resource $stream | resource',
\ 'socket_last_error(': '[ resource $socket] | int',
\ 'socket_listen(': 'resource $socket [, int $backlog = 0] | bool',
\ 'socket_read(': 'resource $socket, int $length [, int $type = PHP_BINARY_READ] | string',
\ 'socket_recv(': 'resource $socket, string &$buf, int $len, int $flags | int',
\ 'socket_recvfrom(': 'resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port] | int',
\ 'socket_select(': 'array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0] | int',
\ 'socket_send(': 'resource $socket, string $buf, int $len, int $flags | int',
\ 'socket_sendto(': 'resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0] | int',
\ 'socket_set_block(': 'resource $socket | bool',
\ 'socket_set_blocking(': 'socket_set_blocking â€” Alias of stream_set_blocking()',
\ 'socket_set_nonblock(': 'resource $socket | bool',
\ 'socket_set_option(': 'resource $socket, int $level, int $optname, mixed $optval | bool',
\ 'socket_set_timeout(': 'socket_set_timeout â€” Alias of stream_set_timeout()',
\ 'socket_shutdown(': 'resource $socket [, int $how = 2] | bool',
\ 'socket_strerror(': 'int $errno | string',
\ 'socket_write(': 'resource $socket, string $buffer [, int $length = 0] | int',
\ 'solr_get_version(': 'void | string',
\ 'sort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'soundex(': 'string $str | string',
\ 'spl_autoload_call(': 'string $class_name | void',
\ 'spl_autoload_extensions(': '[ string $file_extensions] | string',
\ 'spl_autoload_functions(': 'void | array',
\ 'spl_autoload_register(': '[ callable $autoload_function [, bool $throw = true [, bool $prepend = false]]] | bool',
\ 'spl_autoload_unregister(': 'mixed $autoload_function | bool',
\ 'spl_autoload(': 'string $class_name [, string $file_extensions = spl_autoload_extensions()] | void',
\ 'spl_classes(': 'void | array',
\ 'spl_object_hash(': 'object $obj | string',
\ 'split(': 'string $pattern, string $string [, int $limit = -1] | array',
\ 'spliti(': 'string $pattern, string $string [, int $limit = -1] | array',
\ 'sprintf(': 'string $format [, mixed $args [, mixed $...]] | string',
\ 'sql_regcase(': 'string $string | string',
\ 'sqlite_array_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true]] | array',
\ 'sqlite_busy_timeout(': 'resource $dbhandle, int $milliseconds | void',
\ 'sqlite_changes(': 'resource $dbhandle | int',
\ 'sqlite_close(': 'resource $dbhandle | void',
\ 'sqlite_column(': 'resource $result, mixed $index_or_name [, bool $decode_binary = true] | mixed',
\ 'sqlite_create_aggregate(': 'resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1] | void',
\ 'sqlite_create_function(': 'resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1] | void',
\ 'sqlite_current(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true]] | array',
\ 'sqlite_error_string(': 'int $error_code | string',
\ 'sqlite_escape_string(': 'string $item | string',
\ 'sqlite_exec(': 'resource $dbhandle, string $query [, string &$error_msg] | bool',
\ 'sqlite_factory(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | SQLiteDatabase',
\ 'sqlite_fetch_all(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true]] | array',
\ 'sqlite_fetch_array(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true]] | array',
\ 'sqlite_fetch_column_types(': 'string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC] | array',
\ 'sqlite_fetch_object(': 'resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = true]]] | object',
\ 'sqlite_fetch_single(': 'resource $result [, bool $decode_binary = true] | string',
\ 'sqlite_fetch_string(': 'sqlite_fetch_string â€” Alias of sqlite_fetch_single()',
\ 'sqlite_field_name(': 'resource $result, int $field_index | string',
\ 'sqlite_has_more(': 'resource $result | bool',
\ 'sqlite_has_prev(': 'resource $result | bool',
\ 'SQLiteResult::key(': 'void | int',
\ 'sqlite_last_error(': 'resource $dbhandle | int',
\ 'sqlite_last_insert_rowid(': 'resource $dbhandle | int',
\ 'sqlite_libencoding(': 'void | string',
\ 'sqlite_libversion(': 'void | string',
\ 'sqlite_next(': 'resource $result | bool',
\ 'sqlite_num_fields(': 'resource $result | int',
\ 'sqlite_num_rows(': 'resource $result | int',
\ 'sqlite_open(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | resource',
\ 'sqlite_popen(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | resource',
\ 'sqlite_prev(': 'resource $result | bool',
\ 'sqlite_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]] | resource',
\ 'sqlite_rewind(': 'resource $result | bool',
\ 'sqlite_seek(': 'resource $result, int $rownum | bool',
\ 'sqlite_single_query(': 'resource $db, string $query [, bool $first_row_only [, bool $decode_binary]] | array',
\ 'sqlite_udf_decode_binary(': 'string $data | string',
\ 'sqlite_udf_encode_binary(': 'string $data | string',
\ 'sqlite_unbuffered_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]] | resource',
\ 'sqlite_valid(': 'resource $result | bool',
\ 'sqlsrv_begin_transaction(': 'resource $conn | bool',
\ 'sqlsrv_cancel(': 'resource $stmt | bool',
\ 'sqlsrv_client_info(': 'resource $conn | array',
\ 'sqlsrv_close(': 'resource $conn | bool',
\ 'sqlsrv_commit(': 'resource $conn | bool',
\ 'sqlsrv_configure(': 'string $setting, mixed $value | bool',
\ 'sqlsrv_connect(': 'string $serverName [, array $connectionInfo] | resource',
\ 'sqlsrv_errors(': '[ int $errorsOrWarnings] | mixed',
\ 'sqlsrv_execute(': 'resource $stmt | bool',
\ 'sqlsrv_fetch_array(': 'resource $stmt [, int $fetchType [, int $row [, int $offset]]] | array',
\ 'sqlsrv_fetch_object(': 'resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset]]]] | mixed',
\ 'sqlsrv_fetch(': 'resource $stmt [, int $row [, int $offset]] | mixed',
\ 'sqlsrv_field_metadata(': 'resource $stmt | mixed',
\ 'sqlsrv_free_stmt(': 'resource $stmt | bool',
\ 'sqlsrv_get_config(': 'string $setting | mixed',
\ 'sqlsrv_get_field(': 'resource $stmt, int $fieldIndex [, int $getAsType] | mixed',
\ 'sqlsrv_has_rows(': 'resource $stmt | bool',
\ 'sqlsrv_next_result(': 'resource $stmt | mixed',
\ 'sqlsrv_num_fields(': 'resource $stmt | mixed',
\ 'sqlsrv_num_rows(': 'resource $stmt | mixed',
\ 'sqlsrv_prepare(': 'resource $conn, string $sql [, array $params [, array $options]] | mixed',
\ 'sqlsrv_query(': 'resource $conn, string $sql [, array $params [, array $options]] | mixed',
\ 'sqlsrv_rollback(': 'resource $conn | bool',
\ 'sqlsrv_rows_affected(': 'resource $stmt | int',
\ 'sqlsrv_send_stream_data(': 'resource $stmt | bool',
\ 'sqlsrv_server_info(': 'resource $conn | array',
\ 'sqrt(': 'float $arg | float',
\ 'srand(': '[ int $seed] | void',
\ 'sscanf(': 'string $str, string $format [, mixed &$...] | mixed',
\ 'ssdeep_fuzzy_compare(': 'string $signature1, string $signature2 | int',
\ 'ssdeep_fuzzy_hash_filename(': 'string $file_name | string',
\ 'ssdeep_fuzzy_hash(': 'string $to_hash | string',
\ 'ssh2_auth_agent(': 'resource $session, string $username | bool',
\ 'ssh2_auth_hostbased_file(': 'resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase [, string $local_username]] | bool',
\ 'ssh2_auth_none(': 'resource $session, string $username | mixed',
\ 'ssh2_auth_password(': 'resource $session, string $username, string $password | bool',
\ 'ssh2_auth_pubkey_file(': 'resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase] | bool',
\ 'ssh2_connect(': 'string $host [, int $port = 22 [, array $methods [, array $callbacks]]] | resource',
\ 'ssh2_exec(': 'resource $session, string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]] | resource',
\ 'ssh2_fetch_stream(': 'resource $channel, int $streamid | resource',
\ 'ssh2_fingerprint(': 'resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX] | string',
\ 'ssh2_methods_negotiated(': 'resource $session | array',
\ 'ssh2_publickey_add(': 'resource $pkey, string $algoname, string $blob [, bool $overwrite = false [, array $attributes]] | bool',
\ 'ssh2_publickey_init(': 'resource $session | resource',
\ 'ssh2_publickey_list(': 'resource $pkey | array',
\ 'ssh2_publickey_remove(': 'resource $pkey, string $algoname, string $blob | bool',
\ 'ssh2_scp_recv(': 'resource $session, string $remote_file, string $local_file | bool',
\ 'ssh2_scp_send(': 'resource $session, string $local_file, string $remote_file [, int $create_mode = 0644] | bool',
\ 'ssh2_sftp_chmod(': 'resource $sftp, string $filename, int $mode | bool',
\ 'ssh2_sftp_lstat(': 'resource $sftp, string $path | array',
\ 'ssh2_sftp_mkdir(': 'resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = false]] | bool',
\ 'ssh2_sftp_readlink(': 'resource $sftp, string $link | string',
\ 'ssh2_sftp_realpath(': 'resource $sftp, string $filename | string',
\ 'ssh2_sftp_rename(': 'resource $sftp, string $from, string $to | bool',
\ 'ssh2_sftp_rmdir(': 'resource $sftp, string $dirname | bool',
\ 'ssh2_sftp_stat(': 'resource $sftp, string $path | array',
\ 'ssh2_sftp_symlink(': 'resource $sftp, string $target, string $link | bool',
\ 'ssh2_sftp_unlink(': 'resource $sftp, string $filename | bool',
\ 'ssh2_sftp(': 'resource $session | resource',
\ 'ssh2_shell(': 'resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]] | resource',
\ 'ssh2_tunnel(': 'resource $session, string $host, int $port | resource',
\ 'stat(': 'string $filename | array',
\ 'stats_absolute_deviation(': 'array $a | float',
\ 'stats_cdf_beta(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_binomial(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_cauchy(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_chisquare(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_exponential(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_f(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_gamma(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_laplace(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_logistic(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_negative_binomial(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_noncentral_chisquare(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_noncentral_f(': 'float $par1, float $par2, float $par3, float $par4, int $which | float',
\ 'stats_cdf_poisson(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_t(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_uniform(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_weibull(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_covariance(': 'array $a, array $b | float',
\ 'stats_den_uniform(': 'float $x, float $a, float $b | float',
\ 'stats_dens_beta(': 'float $x, float $a, float $b | float',
\ 'stats_dens_cauchy(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_chisquare(': 'float $x, float $dfr | float',
\ 'stats_dens_exponential(': 'float $x, float $scale | float',
\ 'stats_dens_f(': 'float $x, float $dfr1, float $dfr2 | float',
\ 'stats_dens_gamma(': 'float $x, float $shape, float $scale | float',
\ 'stats_dens_laplace(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_logistic(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_negative_binomial(': 'float $x, float $n, float $pi | float',
\ 'stats_dens_normal(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_pmf_binomial(': 'float $x, float $n, float $pi | float',
\ 'stats_dens_pmf_hypergeometric(': 'float $n1, float $n2, float $N1, float $N2 | float',
\ 'stats_dens_pmf_poisson(': 'float $x, float $lb | float',
\ 'stats_dens_t(': 'float $x, float $dfr | float',
\ 'stats_dens_weibull(': 'float $x, float $a, float $b | float',
\ 'stats_harmonic_mean(': 'array $a | number',
\ 'stats_kurtosis(': 'array $a | float',
\ 'stats_rand_gen_beta(': 'float $a, float $b | float',
\ 'stats_rand_gen_chisquare(': 'float $df | float',
\ 'stats_rand_gen_exponential(': 'float $av | float',
\ 'stats_rand_gen_f(': 'float $dfn, float $dfd | float',
\ 'stats_rand_gen_funiform(': 'float $low, float $high | float',
\ 'stats_rand_gen_gamma(': 'float $a, float $r | float',
\ 'stats_rand_gen_ibinomial_negative(': 'int $n, float $p | int',
\ 'stats_rand_gen_ibinomial(': 'int $n, float $pp | int',
\ 'stats_rand_gen_int(': 'void | int',
\ 'stats_rand_gen_ipoisson(': 'float $mu | int',
\ 'stats_rand_gen_iuniform(': 'int $low, int $high | int',
\ 'stats_rand_gen_noncenral_chisquare(': 'float $df, float $xnonc | float',
\ 'stats_rand_gen_noncentral_f(': 'float $dfn, float $dfd, float $xnonc | float',
\ 'stats_rand_gen_noncentral_t(': 'float $df, float $xnonc | float',
\ 'stats_rand_gen_normal(': 'float $av, float $sd | float',
\ 'stats_rand_gen_t(': 'float $df | float',
\ 'stats_rand_get_seeds(': 'void | array',
\ 'stats_rand_phrase_to_seeds(': 'string $phrase | array',
\ 'stats_rand_ranf(': 'void | float',
\ 'stats_rand_setall(': 'int $iseed1, int $iseed2 | void',
\ 'stats_skew(': 'array $a | float',
\ 'stats_standard_deviation(': 'array $a [, bool $sample = false] | float',
\ 'stats_stat_binomial_coef(': 'int $x, int $n | float',
\ 'stats_stat_correlation(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_gennch(': 'int $n | float',
\ 'stats_stat_independent_t(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_innerproduct(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_noncentral_t(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_stat_paired_t(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_percentile(': 'float $df, float $xnonc | float',
\ 'stats_stat_powersum(': 'array $arr, float $power | float',
\ 'stats_variance(': 'array $a [, bool $sample = false] | float',
\ 'stomp_connect_error(': 'void | string',
\ 'stomp_version(': 'void | string',
\ 'str_getcsv(': 'string $input [, string $delimiter = '','' [, string $enclosure = ''"'' [, string $escape = ''\\'']]] | array',
\ 'str_ireplace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_pad(': 'string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT]] | string',
\ 'str_repeat(': 'string $input, int $multiplier | string',
\ 'str_replace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_rot13(': 'string $str | string',
\ 'str_shuffle(': 'string $str | string',
\ 'str_split(': 'string $string [, int $split_length = 1] | array',
\ 'str_word_count(': 'string $string [, int $format = 0 [, string $charlist]] | mixed',
\ 'strcasecmp(': 'string $str1, string $str2 | int',
\ 'strchr(': 'strchr â€” Alias of strstr()',
\ 'strcmp(': 'string $str1, string $str2 | int',
\ 'strcoll(': 'string $str1, string $str2 | int',
\ 'strcspn(': 'string $str1, string $str2 [, int $start [, int $length]] | int',
\ 'stream_bucket_append(': 'resource $brigade, resource $bucket | void',
\ 'stream_bucket_make_writeable(': 'resource $brigade | object',
\ 'stream_bucket_new(': 'resource $stream, string $buffer | object',
\ 'stream_bucket_prepend(': 'resource $brigade, resource $bucket | void',
\ 'stream_context_create(': '[ array $options [, array $params]] | resource',
\ 'stream_context_get_default(': '[ array $options] | resource',
\ 'stream_context_get_options(': 'resource $stream_or_context | array',
\ 'stream_context_get_params(': 'resource $stream_or_context | array',
\ 'stream_context_set_default(': 'array $options | resource',
\ 'stream_context_set_option(': 'resource $stream_or_context, string $wrapper, string $option, mixed $value | bool',
\ 'stream_context_set_params(': 'resource $stream_or_context, array $params | bool',
\ 'stream_copy_to_stream(': 'resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0]] | int',
\ 'stream_encoding(': 'resource $stream [, string $encoding] | bool',
\ 'stream_filter_append(': 'resource $stream, string $filtername [, int $read_write [, mixed $params]] | resource',
\ 'stream_filter_prepend(': 'resource $stream, string $filtername [, int $read_write [, mixed $params]] | resource',
\ 'stream_filter_register(': 'string $filtername, string $classname | bool',
\ 'stream_filter_remove(': 'resource $stream_filter | bool',
\ 'stream_get_contents(': 'resource $handle [, int $maxlength = -1 [, int $offset = -1]] | string',
\ 'stream_get_filters(': 'void | array',
\ 'stream_get_line(': 'resource $handle, int $length [, string $ending] | string',
\ 'stream_get_meta_data(': 'resource $stream | array',
\ 'stream_get_transports(': 'void | array',
\ 'stream_get_wrappers(': 'void | array',
\ 'stream_is_local(': 'mixed $stream_or_url | bool',
\ 'stream_notification_callback(': 'int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max | void',
\ 'stream_resolve_include_path(': 'string $filename | string',
\ 'stream_select(': 'array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0] | int',
\ 'stream_set_blocking(': 'resource $stream, int $mode | bool',
\ 'stream_set_chunk_size(': 'resource $fp, int $chunk_size | int',
\ 'stream_set_read_buffer(': 'resource $stream, int $buffer | int',
\ 'stream_set_timeout(': 'resource $stream, int $seconds [, int $microseconds = 0] | bool',
\ 'stream_set_write_buffer(': 'resource $stream, int $buffer | int',
\ 'stream_socket_accept(': 'resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername]] | resource',
\ 'stream_socket_client(': 'string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context]]]]] | resource',
\ 'stream_socket_enable_crypto(': 'resource $stream, bool $enable [, int $crypto_type [, resource $session_stream]] | mixed',
\ 'stream_socket_get_name(': 'resource $handle, bool $want_peer | string',
\ 'stream_socket_pair(': 'int $domain, int $type, int $protocol | array',
\ 'stream_socket_recvfrom(': 'resource $socket, int $length [, int $flags = 0 [, string &$address]] | string',
\ 'stream_socket_sendto(': 'resource $socket, string $data [, int $flags = 0 [, string $address]] | int',
\ 'stream_socket_server(': 'string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context]]]] | resource',
\ 'stream_socket_shutdown(': 'resource $stream, int $how | bool',
\ 'stream_supports_lock(': 'resource $stream | bool',
\ 'stream_wrapper_register(': 'string $protocol, string $classname [, int $flags = 0] | bool',
\ 'stream_wrapper_restore(': 'string $protocol | bool',
\ 'stream_wrapper_unregister(': 'string $protocol | bool',
\ 'strftime(': 'string $format [, int $timestamp = time()] | string',
\ 'strip_tags(': 'string $str [, string $allowable_tags] | string',
\ 'stripcslashes(': 'string $str | string',
\ 'stripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'stripslashes(': 'string $str | string',
\ 'stristr(': 'string $haystack, mixed $needle [, bool $before_needle = false] | string',
\ 'strlen(': 'string $string | int',
\ 'strnatcasecmp(': 'string $str1, string $str2 | int',
\ 'strnatcmp(': 'string $str1, string $str2 | int',
\ 'strncasecmp(': 'string $str1, string $str2, int $len | int',
\ 'strncmp(': 'string $str1, string $str2, int $len | int',
\ 'strpbrk(': 'string $haystack, string $char_list | string',
\ 'strpos(': 'string $haystack, mixed $needle [, int $offset = 0] | int',
\ 'strptime(': 'string $date, string $format | array',
\ 'strrchr(': 'string $haystack, mixed $needle | string',
\ 'strrev(': 'string $string | string',
\ 'strripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'strrpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'strspn(': 'string $subject, string $mask [, int $start [, int $length]] | int',
\ 'strstr(': 'string $haystack, mixed $needle [, bool $before_needle = false] | string',
\ 'strtok(': 'string $str, string $token | string',
\ 'strtolower(': 'string $str | string',
\ 'strtotime(': 'string $time [, int $now = time()] | int',
\ 'strtoupper(': 'string $string | string',
\ 'strtr(': 'string $str, string $from, string $to | string',
\ 'strval(': 'mixed $var | string',
\ 'substr_compare(': 'string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = false]] | int',
\ 'substr_count(': 'string $haystack, string $needle [, int $offset = 0 [, int $length]] | int',
\ 'substr_replace(': 'mixed $string, mixed $replacement, mixed $start [, mixed $length] | mixed',
\ 'substr(': 'string $string, int $start [, int $length] | string',
\ 'svn_add(': 'string $path [, bool $recursive = true [, bool $force = false]] | bool',
\ 'svn_auth_get_parameter(': 'string $key | string',
\ 'svn_auth_set_parameter(': 'string $key, string $value | void',
\ 'svn_blame(': 'string $repository_url [, int $revision_no = SVN_REVISION_HEAD] | array',
\ 'svn_cat(': 'string $repos_url [, int $revision_no] | string',
\ 'svn_checkout(': 'string $repos, string $targetpath [, int $revision [, int $flags = 0]] | bool',
\ 'svn_cleanup(': 'string $workingdir | bool',
\ 'svn_client_version(': 'void | string',
\ 'svn_commit(': 'string $log, array $targets [, bool $recursive = true] | array',
\ 'svn_delete(': 'string $path [, bool $force = false] | bool',
\ 'svn_diff(': 'string $path1, int $rev1, string $path2, int $rev2 | array',
\ 'svn_export(': 'string $frompath, string $topath [, bool $working_copy = true [, int $revision_no = -1]] | bool',
\ 'svn_fs_abort_txn(': 'resource $txn | bool',
\ 'svn_fs_apply_text(': 'resource $root, string $path | resource',
\ 'svn_fs_begin_txn2(': 'resource $repos, int $rev | resource',
\ 'svn_fs_change_node_prop(': 'resource $root, string $path, string $name, string $value | bool',
\ 'svn_fs_check_path(': 'resource $fsroot, string $path | int',
\ 'svn_fs_contents_changed(': 'resource $root1, string $path1, resource $root2, string $path2 | bool',
\ 'svn_fs_copy(': 'resource $from_root, string $from_path, resource $to_root, string $to_path | bool',
\ 'svn_fs_delete(': 'resource $root, string $path | bool',
\ 'svn_fs_dir_entries(': 'resource $fsroot, string $path | array',
\ 'svn_fs_file_contents(': 'resource $fsroot, string $path | resource',
\ 'svn_fs_file_length(': 'resource $fsroot, string $path | int',
\ 'svn_fs_is_dir(': 'resource $root, string $path | bool',
\ 'svn_fs_is_file(': 'resource $root, string $path | bool',
\ 'svn_fs_make_dir(': 'resource $root, string $path | bool',
\ 'svn_fs_make_file(': 'resource $root, string $path | bool',
\ 'svn_fs_node_created_rev(': 'resource $fsroot, string $path | int',
\ 'svn_fs_node_prop(': 'resource $fsroot, string $path, string $propname | string',
\ 'svn_fs_props_changed(': 'resource $root1, string $path1, resource $root2, string $path2 | bool',
\ 'svn_fs_revision_prop(': 'resource $fs, int $revnum, string $propname | string',
\ 'svn_fs_revision_root(': 'resource $fs, int $revnum | resource',
\ 'svn_fs_txn_root(': 'resource $txn | resource',
\ 'svn_fs_youngest_rev(': 'resource $fs | int',
\ 'svn_import(': 'string $path, string $url, bool $nonrecursive | bool',
\ 'svn_log(': 'string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY]]]] | array',
\ 'svn_ls(': 'string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = false [, bool $peg = false]]] | array',
\ 'svn_mkdir(': 'string $path [, string $log_message] | bool',
\ 'svn_repos_create(': 'string $path [, array $config [, array $fsconfig]] | resource',
\ 'svn_repos_fs_begin_txn_for_commit(': 'resource $repos, int $rev, string $author, string $log_msg | resource',
\ 'svn_repos_fs_commit_txn(': 'resource $txn | int',
\ 'svn_repos_fs(': 'resource $repos | resource',
\ 'svn_repos_hotcopy(': 'string $repospath, string $destpath, bool $cleanlogs | bool',
\ 'svn_repos_open(': 'string $path | resource',
\ 'svn_repos_recover(': 'string $path | bool',
\ 'svn_revert(': 'string $path [, bool $recursive = false] | bool',
\ 'svn_status(': 'string $path [, int $flags = 0] | array',
\ 'svn_update(': 'string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = true]] | int',
\ 'swf_actiongeturl(': 'string $url, string $target | void',
\ 'swf_actiongotoframe(': 'int $framenumber | void',
\ 'swf_actiongotolabel(': 'string $label | void',
\ 'swf_actionnextframe(': 'void | void',
\ 'swf_actionplay(': 'void | void',
\ 'swf_actionprevframe(': 'void | void',
\ 'swf_actionsettarget(': 'string $target | void',
\ 'swf_actionstop(': 'void | void',
\ 'swf_actiontogglequality(': 'void | void',
\ 'swf_actionwaitforframe(': 'int $framenumber, int $skipcount | void',
\ 'swf_addbuttonrecord(': 'int $states, int $shapeid, int $depth | void',
\ 'swf_addcolor(': 'float $r, float $g, float $b, float $a | void',
\ 'swf_closefile(': '[ int $return_file] | void',
\ 'swf_definebitmap(': 'int $objid, string $image_name | void',
\ 'swf_definefont(': 'int $fontid, string $fontname | void',
\ 'swf_defineline(': 'int $objid, float $x1, float $y1, float $x2, float $y2, float $width | void',
\ 'swf_definepoly(': 'int $objid, array $coords, int $npoints, float $width | void',
\ 'swf_definerect(': 'int $objid, float $x1, float $y1, float $x2, float $y2, float $width | void',
\ 'swf_definetext(': 'int $objid, string $str, int $docenter | void',
\ 'swf_endbutton(': 'void | void',
\ 'swf_enddoaction(': 'void | void',
\ 'swf_endshape(': 'void | void',
\ 'swf_endsymbol(': 'void | void',
\ 'swf_fontsize(': 'float $size | void',
\ 'swf_fontslant(': 'float $slant | void',
\ 'swf_fonttracking(': 'float $tracking | void',
\ 'swf_getbitmapinfo(': 'int $bitmapid | array',
\ 'swf_getfontinfo(': 'void | array',
\ 'swf_getframe(': 'void | int',
\ 'swf_labelframe(': 'string $name | void',
\ 'swf_lookat(': 'float $view_x, float $view_y, float $view_z, float $reference_x, float $reference_y, float $reference_z, float $twist | void',
\ 'swf_modifyobject(': 'int $depth, int $how | void',
\ 'swf_mulcolor(': 'float $r, float $g, float $b, float $a | void',
\ 'swf_nextid(': 'void | int',
\ 'swf_oncondition(': 'int $transition | void',
\ 'swf_openfile(': 'string $filename, float $width, float $height, float $framerate, float $r, float $g, float $b | void',
\ 'swf_ortho(': 'float $xmin, float $xmax, float $ymin, float $ymax, float $zmin, float $zmax | void',
\ 'swf_ortho2(': 'float $xmin, float $xmax, float $ymin, float $ymax | void',
\ 'swf_perspective(': 'float $fovy, float $aspect, float $near, float $far | void',
\ 'swf_placeobject(': 'int $objid, int $depth | void',
\ 'swf_polarview(': 'float $dist, float $azimuth, float $incidence, float $twist | void',
\ 'swf_popmatrix(': 'void | void',
\ 'swf_posround(': 'int $round | void',
\ 'swf_pushmatrix(': 'void | void',
\ 'swf_removeobject(': 'int $depth | void',
\ 'swf_rotate(': 'float $angle, string $axis | void',
\ 'swf_scale(': 'float $x, float $y, float $z | void',
\ 'swf_setfont(': 'int $fontid | void',
\ 'swf_setframe(': 'int $framenumber | void',
\ 'swf_shapearc(': 'float $x, float $y, float $r, float $ang1, float $ang2 | void',
\ 'swf_shapecurveto(': 'float $x1, float $y1, float $x2, float $y2 | void',
\ 'swf_shapecurveto3(': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void',
\ 'swf_shapefillbitmapclip(': 'int $bitmapid | void',
\ 'swf_shapefillbitmaptile(': 'int $bitmapid | void',
\ 'swf_shapefilloff(': 'void | void',
\ 'swf_shapefillsolid(': 'float $r, float $g, float $b, float $a | void',
\ 'swf_shapelinesolid(': 'float $r, float $g, float $b, float $a, float $width | void',
\ 'swf_shapelineto(': 'float $x, float $y | void',
\ 'swf_shapemoveto(': 'float $x, float $y | void',
\ 'swf_showframe(': 'void | void',
\ 'swf_startbutton(': 'int $objid, int $type | void',
\ 'swf_startdoaction(': 'void | void',
\ 'swf_startshape(': 'int $objid | void',
\ 'swf_startsymbol(': 'int $objid | void',
\ 'swf_textwidth(': 'string $str | float',
\ 'swf_translate(': 'float $x, float $y, float $z | void',
\ 'swf_viewport(': 'float $xmin, float $xmax, float $ymin, float $ymax | void',
\ 'sybase_affected_rows(': '[ resource $link_identifier] | int',
\ 'sybase_close(': '[ resource $link_identifier] | bool',
\ 'sybase_connect(': '[ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = false]]]]]] | resource',
\ 'sybase_data_seek(': 'resource $result_identifier, int $row_number | bool',
\ 'sybase_deadlock_retry_count(': 'int $retry_count | void',
\ 'sybase_fetch_array(': 'resource $result | array',
\ 'sybase_fetch_assoc(': 'resource $result | array',
\ 'sybase_fetch_field(': 'resource $result [, int $field_offset = -1] | object',
\ 'sybase_fetch_object(': 'resource $result [, mixed $object] | object',
\ 'sybase_fetch_row(': 'resource $result | array',
\ 'sybase_field_seek(': 'resource $result, int $field_offset | bool',
\ 'sybase_free_result(': 'resource $result | bool',
\ 'sybase_get_last_message(': 'void | string',
\ 'sybase_min_client_severity(': 'int $severity | void',
\ 'sybase_min_error_severity(': 'int $severity | void',
\ 'sybase_min_message_severity(': 'int $severity | void',
\ 'sybase_min_server_severity(': 'int $severity | void',
\ 'sybase_num_fields(': 'resource $result | int',
\ 'sybase_num_rows(': 'resource $result | int',
\ 'sybase_pconnect(': '[ string $servername [, string $username [, string $password [, string $charset [, string $appname]]]]] | resource',
\ 'sybase_query(': 'string $query [, resource $link_identifier] | mixed',
\ 'sybase_result(': 'resource $result, int $row, mixed $field | string',
\ 'sybase_select_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'sybase_set_message_handler(': 'callable $handler [, resource $link_identifier] | bool',
\ 'sybase_unbuffered_query(': 'string $query, resource $link_identifier [, bool $store_result] | resource',
\ 'symlink(': 'string $target, string $link | bool',
\ 'sys_get_temp_dir(': 'void | string',
\ 'sys_getloadavg(': 'void | array',
\ 'syslog(': 'int $priority, string $message | bool',
\ 'system(': 'string $command [, int &$return_var] | string',
\ 'taint(': 'string &$string [, string $...] | bool',
\ 'tan(': 'float $arg | float',
\ 'tanh(': 'float $arg | float',
\ 'tcpwrap_check(': 'string $daemon, string $address [, string $user [, bool $nodns = false]] | bool',
\ 'tempnam(': 'string $dir, string $prefix | string',
\ 'textdomain(': 'string $text_domain | string',
\ 'tidy_access_count(': 'tidy $object | int',
\ 'tidy_config_count(': 'tidy $object | int',
\ 'tidy_error_count(': 'tidy $object | int',
\ 'tidy_get_output(': 'tidy $object | string',
\ 'tidy_load_config(': 'string $filename, string $encoding | void',
\ 'tidy_reset_config(': 'void | bool',
\ 'tidy_save_config(': 'string $filename | bool',
\ 'tidy_set_encoding(': 'string $encoding | bool',
\ 'tidy_setopt(': 'string $option, mixed $value | bool',
\ 'tidy_warning_count(': 'tidy $object | int',
\ 'time_nanosleep(': 'int $seconds, int $nanoseconds | mixed',
\ 'time_sleep_until(': 'float $timestamp | bool',
\ 'time(': 'void | int',
\ 'timezone_name_from_abbr(': 'string $abbr [, int $gmtOffset = -1 [, int $isdst = -1]] | string',
\ 'timezone_version_get(': 'void | string',
\ 'tmpfile(': 'void | resource',
\ 'token_get_all(': 'string $source | array',
\ 'token_name(': 'int $token | string',
\ 'touch(': 'string $filename [, int $time = time() [, int $atime]] | bool',
\ 'trader_acos(': 'array $real | array',
\ 'trader_ad(': 'array $high, array $low, array $close, array $volume | array',
\ 'trader_add(': 'array $real0, array $real1 | array',
\ 'trader_adosc(': 'array $high, array $low, array $close, array $volume [, integer $fastPeriod [, integer $slowPeriod]] | array',
\ 'trader_adx(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_adxr(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_apo(': 'array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType]]] | array',
\ 'trader_aroon(': 'array $high, array $low [, integer $timePeriod] | array',
\ 'trader_aroonosc(': 'array $high, array $low [, integer $timePeriod] | array',
\ 'trader_asin(': 'array $real | array',
\ 'trader_atan(': 'array $real | array',
\ 'trader_atr(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_avgprice(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_bbands(': 'array $real [, integer $timePeriod [, float $nbDevUp [, float $nbDevDn [, integer $mAType]]]] | array',
\ 'trader_beta(': 'array $real0, array $real1 [, integer $timePeriod] | array',
\ 'trader_bop(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cci(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_cdl2crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3blackcrows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3inside(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3linestrike(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3outside(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3starsinsouth(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3whitesoldiers(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlabandonedbaby(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdladvanceblock(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlbelthold(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlbreakaway(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlclosingmarubozu(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlconcealbabyswall(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlcounterattack(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldarkcloudcover(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdldoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldojistar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldragonflydoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlengulfing(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdleveningdojistar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdleveningstar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlgapsidesidewhite(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlgravestonedoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhammer(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhangingman(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlharami(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlharamicross(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhighwave(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhikkake(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhikkakemod(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhomingpigeon(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlidentical3crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlinneck(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlinvertedhammer(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlkicking(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlkickingbylength(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlladderbottom(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdllongleggeddoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdllongline(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmarubozu(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmatchinglow(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmathold(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlmorningdojistar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlmorningstar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlonneck(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlpiercing(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlrickshawman(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlrisefall3methods(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlseparatinglines(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlshootingstar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlshortline(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlspinningtop(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlstalledpattern(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlsticksandwich(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltakuri(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltasukigap(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlthrusting(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltristar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlunique3river(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlupsidegap2crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlxsidegap3methods(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_ceil(': 'array $real | array',
\ 'trader_cmo(': 'array $real [, integer $timePeriod] | array',
\ 'trader_correl(': 'array $real0, array $real1 [, integer $timePeriod] | array',
\ 'trader_cos(': 'array $real | array',
\ 'trader_cosh(': 'array $real | array',
\ 'trader_dema(': 'array $real [, integer $timePeriod] | array',
\ 'trader_div(': 'array $real0, array $real1 | array',
\ 'trader_dx(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_ema(': 'array $real [, integer $timePeriod] | array',
\ 'trader_errno(': 'void | integer',
\ 'trader_exp(': 'array $real | array',
\ 'trader_floor(': 'array $real | array',
\ 'trader_get_compat(': 'void | integer',
\ 'trader_get_unstable_period(': 'integer $functionId | integer',
\ 'trader_ht_dcperiod(': 'array $real | array',
\ 'trader_ht_dcphase(': 'array $real | array',
\ 'trader_ht_phasor(': 'array $real | array',
\ 'trader_ht_sine(': 'array $real | array',
\ 'trader_ht_trendline(': 'array $real | array',
\ 'trader_ht_trendmode(': 'array $real | array',
\ 'trader_kama(': 'array $real [, integer $timePeriod] | array',
\ 'trader_linearreg_angle(': 'array $real [, integer $timePeriod] | array',
\ 'trader_linearreg_intercept(': 'array $real [, integer $timePeriod] | array',
\ 'trader_linearreg_slope(': 'array $real [, integer $timePeriod] | array',
\ 'trader_linearreg(': 'array $real [, integer $timePeriod] | array',
\ 'trader_ln(': 'array $real | array',
\ 'trader_log10(': 'array $real | array',
\ 'trader_ma(': 'array $real [, integer $timePeriod [, integer $mAType]] | array',
\ 'trader_macd(': 'array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $signalPeriod]]] | array',
\ 'trader_macdext(': 'array $real [, integer $fastPeriod [, integer $fastMAType [, integer $slowPeriod [, integer $slowMAType [, integer $signalPeriod [, integer $signalMAType]]]]]] | array',
\ 'trader_macdfix(': 'array $real [, integer $signalPeriod] | array',
\ 'trader_mama(': 'array $real [, float $fastLimit [, float $slowLimit]] | array',
\ 'trader_mavp(': 'array $real, array $periods [, integer $minPeriod [, integer $maxPeriod [, integer $mAType]]] | array',
\ 'trader_max(': 'array $real [, integer $timePeriod] | array',
\ 'trader_maxindex(': 'array $real [, integer $timePeriod] | array',
\ 'trader_medprice(': 'array $high, array $low | array',
\ 'trader_mfi(': 'array $high, array $low, array $close, array $volume [, integer $timePeriod] | array',
\ 'trader_midpoint(': 'array $real [, integer $timePeriod] | array',
\ 'trader_midprice(': 'array $high, array $low [, integer $timePeriod] | array',
\ 'trader_min(': 'array $real [, integer $timePeriod] | array',
\ 'trader_minindex(': 'array $real [, integer $timePeriod] | array',
\ 'trader_minmax(': 'array $real [, integer $timePeriod] | array',
\ 'trader_minmaxindex(': 'array $real [, integer $timePeriod] | array',
\ 'trader_minus_di(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_minus_dm(': 'array $high, array $low [, integer $timePeriod] | array',
\ 'trader_mom(': 'array $real [, integer $timePeriod] | array',
\ 'trader_mult(': 'array $real0, array $real1 | array',
\ 'trader_natr(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_obv(': 'array $real, array $volume | array',
\ 'trader_plus_di(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_plus_dm(': 'array $high, array $low [, integer $timePeriod] | array',
\ 'trader_ppo(': 'array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType]]] | array',
\ 'trader_roc(': 'array $real [, integer $timePeriod] | array',
\ 'trader_rocp(': 'array $real [, integer $timePeriod] | array',
\ 'trader_rocr(': 'array $real [, integer $timePeriod] | array',
\ 'trader_rocr100(': 'array $real [, integer $timePeriod] | array',
\ 'trader_rsi(': 'array $real [, integer $timePeriod] | array',
\ 'trader_sar(': 'array $high, array $low [, float $acceleration [, float $maximum]] | array',
\ 'trader_sarext(': 'array $high, array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort]]]]]]]] | array',
\ 'trader_set_compat(': 'integer $compatId | void',
\ 'trader_set_unstable_period(': 'integer $functionId, integer $timePeriod | void',
\ 'trader_sin(': 'array $real | array',
\ 'trader_sinh(': 'array $real | array',
\ 'trader_sma(': 'array $real [, integer $timePeriod] | array',
\ 'trader_sqrt(': 'array $real | array',
\ 'trader_stddev(': 'array $real [, integer $timePeriod [, float $nbDev]] | array',
\ 'trader_stoch(': 'array $high, array $low, array $close [, integer $fastK_Period [, integer $slowK_Period [, integer $slowK_MAType [, integer $slowD_Period [, integer $slowD_MAType]]]]] | array',
\ 'trader_stochf(': 'array $high, array $low, array $close [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType]]] | array',
\ 'trader_stochrsi(': 'array $real [, integer $timePeriod [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType]]]] | array',
\ 'trader_sub(': 'array $real0, array $real1 | array',
\ 'trader_sum(': 'array $real [, integer $timePeriod] | array',
\ 'trader_t3(': 'array $real [, integer $timePeriod [, float $vFactor]] | array',
\ 'trader_tan(': 'array $real | array',
\ 'trader_tanh(': 'array $real | array',
\ 'trader_tema(': 'array $real [, integer $timePeriod] | array',
\ 'trader_trange(': 'array $high, array $low, array $close | array',
\ 'trader_trima(': 'array $real [, integer $timePeriod] | array',
\ 'trader_trix(': 'array $real [, integer $timePeriod] | array',
\ 'trader_tsf(': 'array $real [, integer $timePeriod] | array',
\ 'trader_typprice(': 'array $high, array $low, array $close | array',
\ 'trader_ultosc(': 'array $high, array $low, array $close [, integer $timePeriod1 [, integer $timePeriod2 [, integer $timePeriod3]]] | array',
\ 'trader_var(': 'array $real [, integer $timePeriod [, float $nbDev]] | array',
\ 'trader_wclprice(': 'array $high, array $low, array $close | array',
\ 'trader_willr(': 'array $high, array $low, array $close [, integer $timePeriod] | array',
\ 'trader_wma(': 'array $real [, integer $timePeriod] | array',
\ 'trait_exists(': 'string $traitname [, bool $autoload] | bool',
\ 'trigger_error(': 'string $error_msg [, int $error_type = E_USER_NOTICE] | bool',
\ 'trim(': 'string $str [, string $charlist = " \t\n\r\0\x0B"] | string',
\ 'uasort(': 'array &$array, callable $cmp_function | bool',
\ 'ucfirst(': 'string $str | string',
\ 'ucwords(': 'string $str | string',
\ 'udm_add_search_limit(': 'resource $agent, int $var, string $val | bool',
\ 'udm_alloc_agent_array(': 'array $databases | resource',
\ 'udm_alloc_agent(': 'string $dbaddr [, string $dbmode] | resource',
\ 'udm_api_version(': 'void | int',
\ 'udm_cat_list(': 'resource $agent, string $category | array',
\ 'udm_cat_path(': 'resource $agent, string $category | array',
\ 'udm_check_charset(': 'resource $agent, string $charset | bool',
\ 'udm_check_stored(': 'resource $agent, int $link, string $doc_id | int',
\ 'udm_clear_search_limits(': 'resource $agent | bool',
\ 'udm_close_stored(': 'resource $agent, int $link | int',
\ 'udm_crc32(': 'resource $agent, string $str | int',
\ 'udm_errno(': 'resource $agent | int',
\ 'udm_error(': 'resource $agent | string',
\ 'udm_find(': 'resource $agent, string $query | resource',
\ 'udm_free_agent(': 'resource $agent | int',
\ 'udm_free_ispell_data(': 'int $agent | bool',
\ 'udm_free_res(': 'resource $res | bool',
\ 'udm_get_doc_count(': 'resource $agent | int',
\ 'udm_get_res_field(': 'resource $res, int $row, int $field | string',
\ 'udm_get_res_param(': 'resource $res, int $param | string',
\ 'udm_hash32(': 'resource $agent, string $str | int',
\ 'udm_load_ispell_data(': 'resource $agent, int $var, string $val1, string $val2, int $flag | bool',
\ 'udm_open_stored(': 'resource $agent, string $storedaddr | int',
\ 'udm_set_agent_param(': 'resource $agent, int $var, string $val | bool',
\ 'uksort(': 'array &$array, callable $cmp_function | bool',
\ 'umask(': '[ int $mask] | int',
\ 'uniqid(': '[ string $prefix = "" [, bool $more_entropy = false]] | string',
\ 'unixtojd(': '[ int $timestamp = time()] | int',
\ 'unlink(': 'string $filename [, resource $context] | bool',
\ 'unpack(': 'string $format, string $data | array',
\ 'unregister_tick_function(': 'string $function_name | void',
\ 'unserialize(': 'string $str | mixed',
\ 'unset(': 'mixed $var [, mixed $...] | void',
\ 'untaint(': 'string &$string [, string $...] | bool',
\ 'urldecode(': 'string $str | string',
\ 'urlencode(': 'string $str | string',
\ 'use_soap_error_handler(': '[ bool $handler = true] | bool',
\ 'usleep(': 'int $micro_seconds | void',
\ 'usort(': 'array &$array, callable $cmp_function | bool',
\ 'utf8_decode(': 'string $data | string',
\ 'utf8_encode(': 'string $data | string',
\ 'var_dump(': 'mixed $expression [, mixed $...] | void',
\ 'var_export(': 'mixed $expression [, bool $return = false] | mixed',
\ 'variant_abs(': 'mixed $val | mixed',
\ 'variant_add(': 'mixed $left, mixed $right | mixed',
\ 'variant_and(': 'mixed $left, mixed $right | mixed',
\ 'variant_cast(': 'variant $variant, int $type | variant',
\ 'variant_cat(': 'mixed $left, mixed $right | mixed',
\ 'variant_cmp(': 'mixed $left, mixed $right [, int $lcid [, int $flags]] | int',
\ 'variant_date_from_timestamp(': 'int $timestamp | variant',
\ 'variant_date_to_timestamp(': 'variant $variant | int',
\ 'variant_div(': 'mixed $left, mixed $right | mixed',
\ 'variant_eqv(': 'mixed $left, mixed $right | mixed',
\ 'variant_fix(': 'mixed $variant | mixed',
\ 'variant_get_type(': 'variant $variant | int',
\ 'variant_idiv(': 'mixed $left, mixed $right | mixed',
\ 'variant_imp(': 'mixed $left, mixed $right | mixed',
\ 'variant_int(': 'mixed $variant | mixed',
\ 'variant_mod(': 'mixed $left, mixed $right | mixed',
\ 'variant_mul(': 'mixed $left, mixed $right | mixed',
\ 'variant_neg(': 'mixed $variant | mixed',
\ 'variant_not(': 'mixed $variant | mixed',
\ 'variant_or(': 'mixed $left, mixed $right | mixed',
\ 'variant_pow(': 'mixed $left, mixed $right | mixed',
\ 'variant_round(': 'mixed $variant, int $decimals | mixed',
\ 'variant_set_type(': 'variant $variant, int $type | void',
\ 'variant_set(': 'variant $variant, mixed $value | void',
\ 'variant_sub(': 'mixed $left, mixed $right | mixed',
\ 'variant_xor(': 'mixed $left, mixed $right | mixed',
\ 'version_compare(': 'string $version1, string $version2 [, string $operator] | mixed',
\ 'vfprintf(': 'resource $handle, string $format, array $args | int',
\ 'virtual(': 'string $filename | bool',
\ 'vpopmail_add_alias_domain_ex(': 'string $olddomain, string $newdomain | bool',
\ 'vpopmail_add_alias_domain(': 'string $domain, string $aliasdomain | bool',
\ 'vpopmail_add_domain_ex(': 'string $domain, string $passwd [, string $quota [, string $bounce [, bool $apop]]] | bool',
\ 'vpopmail_add_domain(': 'string $domain, string $dir, int $uid, int $gid | bool',
\ 'vpopmail_add_user(': 'string $user, string $domain, string $password [, string $gecos [, bool $apop]] | bool',
\ 'vpopmail_alias_add(': 'string $user, string $domain, string $alias | bool',
\ 'vpopmail_alias_del_domain(': 'string $domain | bool',
\ 'vpopmail_alias_del(': 'string $user, string $domain | bool',
\ 'vpopmail_alias_get_all(': 'string $domain | array',
\ 'vpopmail_alias_get(': 'string $alias, string $domain | array',
\ 'vpopmail_auth_user(': 'string $user, string $domain, string $password [, string $apop] | bool',
\ 'vpopmail_del_domain_ex(': 'string $domain | bool',
\ 'vpopmail_del_domain(': 'string $domain | bool',
\ 'vpopmail_del_user(': 'string $user, string $domain | bool',
\ 'vpopmail_error(': 'void | string',
\ 'vpopmail_passwd(': 'string $user, string $domain, string $password [, bool $apop] | bool',
\ 'vpopmail_set_user_quota(': 'string $user, string $domain, string $quota | bool',
\ 'vprintf(': 'string $format, array $args | int',
\ 'vsprintf(': 'string $format, array $args | string',
\ 'w32api_deftype(': 'string $typename, string $member1_type, string $member1_name [, string $... [, string $...]] | bool',
\ 'w32api_init_dtype(': 'string $typename, mixed $value [, mixed $...] | resource',
\ 'w32api_invoke_function(': 'string $funcname, mixed $argument [, mixed $...] | mixed',
\ 'w32api_register_function(': 'string $library, string $function_name, string $return_type | bool',
\ 'w32api_set_call_method(': 'int $method | void',
\ 'wddx_add_vars(': 'resource $packet_id, mixed $var_name [, mixed $...] | bool',
\ 'wddx_deserialize(': 'string $packet | mixed',
\ 'wddx_packet_end(': 'resource $packet_id | string',
\ 'wddx_packet_start(': '[ string $comment] | resource',
\ 'wddx_serialize_value(': 'mixed $var [, string $comment] | string',
\ 'wddx_serialize_vars(': 'mixed $var_name [, mixed $...] | string',
\ 'win32_continue_service(': 'string $servicename [, string $machine] | int',
\ 'win32_create_service(': 'array $details [, string $machine] | mixed',
\ 'win32_delete_service(': 'string $servicename [, string $machine] | mixed',
\ 'win32_get_last_control_message(': 'void | int',
\ 'win32_pause_service(': 'string $servicename [, string $machine] | int',
\ 'win32_ps_list_procs(': 'void | array',
\ 'win32_ps_stat_mem(': 'void | array',
\ 'win32_ps_stat_proc(': '[ int $pid = 0] | array',
\ 'win32_query_service_status(': 'string $servicename [, string $machine] | mixed',
\ 'win32_set_service_status(': 'int $status [, int $checkpoint = 0] | bool',
\ 'win32_start_service_ctrl_dispatcher(': 'string $name | mixed',
\ 'win32_start_service(': 'string $servicename [, string $machine] | int',
\ 'win32_stop_service(': 'string $servicename [, string $machine] | int',
\ 'wincache_fcache_fileinfo(': '[ bool $summaryonly = false] | array',
\ 'wincache_fcache_meminfo(': 'void | array',
\ 'wincache_lock(': 'string $key [, bool $isglobal = false] | bool',
\ 'wincache_ocache_fileinfo(': '[ bool $summaryonly = false] | array',
\ 'wincache_ocache_meminfo(': 'void | array',
\ 'wincache_refresh_if_changed(': '[ array $files] | bool',
\ 'wincache_rplist_fileinfo(': '[ bool $summaryonly = false] | array',
\ 'wincache_rplist_meminfo(': 'void | array',
\ 'wincache_scache_info(': '[ bool $summaryonly = false] | array',
\ 'wincache_scache_meminfo(': 'void | array',
\ 'wincache_ucache_add(': 'string $key, mixed $value [, int $ttl = 0] | bool',
\ 'wincache_ucache_cas(': 'string $key, int $old_value, int $new_value | bool',
\ 'wincache_ucache_clear(': 'void | bool',
\ 'wincache_ucache_dec(': 'string $key [, int $dec_by = 1 [, bool &$success]] | mixed',
\ 'wincache_ucache_delete(': 'mixed $key | bool',
\ 'wincache_ucache_exists(': 'string $key | bool',
\ 'wincache_ucache_get(': 'mixed $key [, bool &$success] | mixed',
\ 'wincache_ucache_inc(': 'string $key [, int $inc_by = 1 [, bool &$success]] | mixed',
\ 'wincache_ucache_info(': '[ bool $summaryonly = false [, string $key]] | array',
\ 'wincache_ucache_meminfo(': 'void | array',
\ 'wincache_ucache_set(': 'mixed $key, mixed $value [, int $ttl = 0] | bool',
\ 'wincache_unlock(': 'string $key | bool',
\ 'wordwrap(': 'string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false]]] | string',
\ 'xattr_get(': 'string $filename, string $name [, int $flags = 0] | string',
\ 'xattr_list(': 'string $filename [, int $flags = 0] | array',
\ 'xattr_remove(': 'string $filename, string $name [, int $flags = 0] | bool',
\ 'xattr_set(': 'string $filename, string $name, string $value [, int $flags = 0] | bool',
\ 'xattr_supported(': 'string $filename [, int $flags = 0] | bool',
\ 'xdiff_file_bdiff_size(': 'string $file | int',
\ 'xdiff_file_bdiff(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_file_bpatch(': 'string $file, string $patch, string $dest | bool',
\ 'xdiff_file_diff_binary(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_file_diff(': 'string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = false]] | bool',
\ 'xdiff_file_merge3(': 'string $old_file, string $new_file1, string $new_file2, string $dest | mixed',
\ 'xdiff_file_patch_binary(': 'string $file, string $patch, string $dest | bool',
\ 'xdiff_file_patch(': 'string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL] | mixed',
\ 'xdiff_file_rabdiff(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_string_bdiff_size(': 'string $patch | int',
\ 'xdiff_string_bdiff(': 'string $old_data, string $new_data | string',
\ 'xdiff_string_bpatch(': 'string $str, string $patch | string',
\ 'xdiff_string_diff(': 'string $old_data, string $new_data [, int $context = 3 [, bool $minimal = false]] | string',
\ 'xdiff_string_merge3(': 'string $old_data, string $new_data1, string $new_data2 [, string &$error] | mixed',
\ 'xdiff_string_patch_binary(': 'string $str, string $patch | string',
\ 'xdiff_string_patch(': 'string $str, string $patch [, int $flags [, string &$error]] | string',
\ 'xhprof_disable(': 'void | array',
\ 'xhprof_enable(': '[ int $flags = 0 [, array $options]] | void',
\ 'xhprof_sample_disable(': 'void | array',
\ 'xhprof_sample_enable(': 'void | void',
\ 'xml_error_string(': 'int $code | string',
\ 'xml_get_current_byte_index(': 'resource $parser | int',
\ 'xml_get_current_column_number(': 'resource $parser | int',
\ 'xml_get_current_line_number(': 'resource $parser | int',
\ 'xml_get_error_code(': 'resource $parser | int',
\ 'xml_parse_into_struct(': 'resource $parser, string $data, array &$values [, array &$index] | int',
\ 'xml_parse(': 'resource $parser, string $data [, bool $is_final = false] | int',
\ 'xml_parser_create_ns(': '[ string $encoding [, string $separator = '':'']] | resource',
\ 'xml_parser_create(': '[ string $encoding] | resource',
\ 'xml_parser_free(': 'resource $parser | bool',
\ 'xml_parser_get_option(': 'resource $parser, int $option | mixed',
\ 'xml_parser_set_option(': 'resource $parser, int $option, mixed $value | bool',
\ 'xml_set_character_data_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_default_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_element_handler(': 'resource $parser, callable $start_element_handler, callable $end_element_handler | bool',
\ 'xml_set_end_namespace_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_external_entity_ref_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_notation_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_object(': 'resource $parser, object &$object | bool',
\ 'xml_set_processing_instruction_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_start_namespace_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_unparsed_entity_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xmlrpc_decode_request(': 'string $xml, string &$method [, string $encoding] | mixed',
\ 'xmlrpc_decode(': 'string $xml [, string $encoding = "iso-8859-1"] | mixed',
\ 'xmlrpc_encode_request(': 'string $method, mixed $params [, array $output_options] | string',
\ 'xmlrpc_encode(': 'mixed $value | string',
\ 'xmlrpc_get_type(': 'mixed $value | string',
\ 'xmlrpc_is_fault(': 'array $arg | bool',
\ 'xmlrpc_parse_method_descriptions(': 'string $xml | array',
\ 'xmlrpc_server_add_introspection_data(': 'resource $server, array $desc | int',
\ 'xmlrpc_server_call_method(': 'resource $server, string $xml, mixed $user_data [, array $output_options] | string',
\ 'xmlrpc_server_create(': 'void | resource',
\ 'xmlrpc_server_destroy(': 'resource $server | int',
\ 'xmlrpc_server_register_introspection_callback(': 'resource $server, string $function | bool',
\ 'xmlrpc_server_register_method(': 'resource $server, string $method_name, string $function | bool',
\ 'xmlrpc_set_type(': 'string &$value, string $type | bool',
\ 'xmlwriter_end_attribute(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_cdata(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_comment(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_document(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_attlist(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_entity(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_pi(': 'resource $xmlwriter | bool',
\ 'xmlwriter_flush(': 'resource $xmlwriter [, bool $empty = true] | mixed',
\ 'xmlwriter_full_end_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_open_memory(': 'void | resource',
\ 'xmlwriter_open_uri(': 'string $uri | resource',
\ 'xmlwriter_output_memory(': 'resource $xmlwriter [, bool $flush = true] | string',
\ 'xmlwriter_set_indent_string(': 'resource $xmlwriter, string $indentString | bool',
\ 'xmlwriter_set_indent(': 'resource $xmlwriter, bool $indent | bool',
\ 'xmlwriter_start_attribute_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri | bool',
\ 'xmlwriter_start_attribute(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_cdata(': 'resource $xmlwriter | bool',
\ 'xmlwriter_start_comment(': 'resource $xmlwriter | bool',
\ 'xmlwriter_start_document(': 'resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone]]] | bool',
\ 'xmlwriter_start_dtd_attlist(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_dtd_element(': 'resource $xmlwriter, string $qualifiedName | bool',
\ 'xmlwriter_start_dtd_entity(': 'resource $xmlwriter, string $name, bool $isparam | bool',
\ 'xmlwriter_start_dtd(': 'resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId]] | bool',
\ 'xmlwriter_start_element_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri | bool',
\ 'xmlwriter_start_element(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_pi(': 'resource $xmlwriter, string $target | bool',
\ 'xmlwriter_text(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_attribute_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri, string $content | bool',
\ 'xmlwriter_write_attribute(': 'resource $xmlwriter, string $name, string $value | bool',
\ 'xmlwriter_write_cdata(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_comment(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_dtd_attlist(': 'resource $xmlwriter, string $name, string $content | bool',
\ 'xmlwriter_write_dtd_element(': 'resource $xmlwriter, string $name, string $content | bool',
\ 'xmlwriter_write_dtd_entity(': 'resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid | bool',
\ 'xmlwriter_write_dtd(': 'resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset]]] | bool',
\ 'xmlwriter_write_element_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri [, string $content] | bool',
\ 'xmlwriter_write_element(': 'resource $xmlwriter, string $name [, string $content] | bool',
\ 'xmlwriter_write_pi(': 'resource $xmlwriter, string $target, string $content | bool',
\ 'xmlwriter_write_raw(': 'resource $xmlwriter, string $content | bool',
\ 'xslt_backend_info(': 'void | string',
\ 'xslt_backend_name(': 'void | string',
\ 'xslt_backend_version(': 'void | string',
\ 'xslt_create(': 'void | resource',
\ 'xslt_errno(': 'resource $xh | int',
\ 'xslt_error(': 'resource $xh | string',
\ 'xslt_free(': 'resource $xh | void',
\ 'xslt_getopt(': 'resource $processor | int',
\ 'xslt_process(': 'resource $xh, string $xmlcontainer, string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters]]] | mixed',
\ 'xslt_set_base(': 'resource $xh, string $uri | void',
\ 'xslt_set_encoding(': 'resource $xh, string $encoding | void',
\ 'xslt_set_error_handler(': 'resource $xh, mixed $handler | void',
\ 'xslt_set_log(': 'resource $xh [, mixed $log] | void',
\ 'xslt_set_object(': 'resource $processor, object &$obj | bool',
\ 'xslt_set_sax_handler(': 'resource $xh, array $handlers | void',
\ 'xslt_set_sax_handlers(': 'resource $processor, array $handlers | void',
\ 'xslt_set_scheme_handler(': 'resource $xh, array $handlers | void',
\ 'xslt_set_scheme_handlers(': 'resource $xh, array $handlers | void',
\ 'xslt_setopt(': 'resource $processor, int $newmask | mixed',
\ 'yaml_emit_file(': 'string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks]]] | bool',
\ 'yaml_emit(': 'mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks]]] | string',
\ 'yaml_parse_file(': 'string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks]]] | mixed',
\ 'yaml_parse_url(': 'string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks]]] | mixed',
\ 'yaml_parse(': 'string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks]]] | mixed',
\ 'yaz_addinfo(': 'resource $id | string',
\ 'yaz_ccl_conf(': 'resource $id, array $config | void',
\ 'yaz_ccl_parse(': 'resource $id, string $query, array &$result | bool',
\ 'yaz_close(': 'resource $id | bool',
\ 'yaz_connect(': 'string $zurl [, mixed $options] | mixed',
\ 'yaz_database(': 'resource $id, string $databases | bool',
\ 'yaz_element(': 'resource $id, string $elementset | bool',
\ 'yaz_errno(': 'resource $id | int',
\ 'yaz_error(': 'resource $id | string',
\ 'yaz_es_result(': 'resource $id | array',
\ 'yaz_es(': 'resource $id, string $type, array $args | void',
\ 'yaz_get_option(': 'resource $id, string $name | string',
\ 'yaz_hits(': 'resource $id [, array &$searchresult] | int',
\ 'yaz_itemorder(': 'resource $id, array $args | void',
\ 'yaz_present(': 'resource $id | bool',
\ 'yaz_range(': 'resource $id, int $start, int $number | void',
\ 'yaz_record(': 'resource $id, int $pos, string $type | string',
\ 'yaz_scan_result(': 'resource $id [, array &$result] | array',
\ 'yaz_scan(': 'resource $id, string $type, string $startterm [, array $flags] | void',
\ 'yaz_schema(': 'resource $id, string $schema | void',
\ 'yaz_search(': 'resource $id, string $type, string $query | bool',
\ 'yaz_set_option(': 'resource $id, string $name, string $value | void',
\ 'yaz_sort(': 'resource $id, string $criteria | void',
\ 'yaz_syntax(': 'resource $id, string $syntax | void',
\ 'yaz_wait(': '[ array &$options] | mixed',
\ 'yp_all(': 'string $domain, string $map, string $callback | void',
\ 'yp_cat(': 'string $domain, string $map | array',
\ 'yp_err_string(': 'int $errorcode | string',
\ 'yp_errno(': 'void | int',
\ 'yp_first(': 'string $domain, string $map | array',
\ 'yp_get_default_domain(': 'void | string',
\ 'yp_master(': 'string $domain, string $map | string',
\ 'yp_match(': 'string $domain, string $map, string $key | string',
\ 'yp_next(': 'string $domain, string $map, string $key | array',
\ 'yp_order(': 'string $domain, string $map | int',
\ 'zend_logo_guid(': 'void | string',
\ 'zend_thread_id(': 'void | int',
\ 'zend_version(': 'void | string',
\ 'zip_close(': 'resource $zip | void',
\ 'zip_entry_close(': 'resource $zip_entry | bool',
\ 'zip_entry_compressedsize(': 'resource $zip_entry | int',
\ 'zip_entry_compressionmethod(': 'resource $zip_entry | string',
\ 'zip_entry_filesize(': 'resource $zip_entry | int',
\ 'zip_entry_name(': 'resource $zip_entry | string',
\ 'zip_entry_open(': 'resource $zip, resource $zip_entry [, string $mode] | bool',
\ 'zip_entry_read(': 'resource $zip_entry [, int $length] | string',
\ 'zip_open(': 'string $filename | resource',
\ 'zip_read(': 'resource $zip | resource',
\ 'zlib_decode(': 'string $data [, string $max_decoded_len] | string',
\ 'zlib_encode(': 'string $data, string $encoding [, string $level = -1] | string',
\ 'zlib_get_coding_type(': 'void | string',
\ }
